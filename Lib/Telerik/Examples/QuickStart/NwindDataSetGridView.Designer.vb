'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1426
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
Imports System
Namespace Telerik.Examples.WinControls


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), Global.System.Xml.Serialization.XmlRootAttribute("NwindDataSetGridView"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
	Public Partial Class NwindDataSetGridView
		Inherits Global.System.Data.DataSet

		Private tableEmployees As EmployeesDataTable

		Private tableOrder_Details As Order_DetailsDataTable

		Private tableOrders As OrdersDataTable

		Private relationOrdersOrder_Details As Global.System.Data.DataRelation

		Private relationEmployeesOrders As Global.System.Data.DataRelation

		Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
				ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
				If (Not ds.Tables("Employees") Is Nothing) Then
					MyBase.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
				End If
				If (Not ds.Tables("Order Details") Is Nothing) Then
					MyBase.Tables.Add(New Order_DetailsDataTable(ds.Tables("Order Details")))
				End If
				If (Not ds.Tables("Orders") Is Nothing) Then
					MyBase.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Employees() As EmployeesDataTable
			Get
				Return Me.tableEmployees
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Order_Details() As Order_DetailsDataTable
			Get
				Return Me.tableOrder_Details
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Orders() As OrdersDataTable
			Get
				Return Me.tableOrders
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.BrowsableAttribute(True), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
		Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set
				Me._schemaSerializationMode = Value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Overrides Function Clone() As Global.System.Data.DataSet
			Dim cln As NwindDataSetGridView = (CType(MyBase.Clone(), NwindDataSetGridView))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
				ds.ReadXml(reader)
				If (Not ds.Tables("Employees") Is Nothing) Then
					MyBase.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
				End If
				If (Not ds.Tables("Order Details") Is Nothing) Then
					MyBase.Tables.Add(New Order_DetailsDataTable(ds.Tables("Order Details")))
				End If
				If (Not ds.Tables("Orders") Is Nothing) Then
					MyBase.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
			Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
			Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableEmployees = (CType(MyBase.Tables("Employees"), EmployeesDataTable))
			If (initTable = True) Then
				If (Not Me.tableEmployees Is Nothing) Then
					Me.tableEmployees.InitVars()
				End If
			End If
			Me.tableOrder_Details = (CType(MyBase.Tables("Order Details"), Order_DetailsDataTable))
			If (initTable = True) Then
				If (Not Me.tableOrder_Details Is Nothing) Then
					Me.tableOrder_Details.InitVars()
				End If
			End If
			Me.tableOrders = (CType(MyBase.Tables("Orders"), OrdersDataTable))
			If (initTable = True) Then
				If (Not Me.tableOrders Is Nothing) Then
					Me.tableOrders.InitVars()
				End If
			End If
			Me.relationOrdersOrder_Details = Me.Relations("OrdersOrder Details")
			Me.relationEmployeesOrders = Me.Relations("EmployeesOrders")
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitClass()
			Me.DataSetName = "NwindDataSetGridView"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/NwindDataSetGridView.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableEmployees = New EmployeesDataTable()
			MyBase.Tables.Add(Me.tableEmployees)
			Me.tableOrder_Details = New Order_DetailsDataTable()
			MyBase.Tables.Add(Me.tableOrder_Details)
			Me.tableOrders = New OrdersDataTable()
			MyBase.Tables.Add(Me.tableOrders)
			Me.relationOrdersOrder_Details = New Global.System.Data.DataRelation("OrdersOrder Details", New Global.System.Data.DataColumn() { Me.tableOrders.OrderIDColumn}, New Global.System.Data.DataColumn() { Me.tableOrder_Details.OrderIDColumn}, False)
			Me.Relations.Add(Me.relationOrdersOrder_Details)
			Me.relationEmployeesOrders = New Global.System.Data.DataRelation("EmployeesOrders", New Global.System.Data.DataColumn() { Me.tableEmployees.EmployeeIDColumn}, New Global.System.Data.DataColumn() { Me.tableOrders.EmployeeIDColumn}, False)
			Me.Relations.Add(Me.relationEmployeesOrders)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeEmployees() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeOrder_Details() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeOrders() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
			Dim ds As NwindDataSetGridView = New NwindDataSetGridView()
			Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
			Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
				Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
				Try
					Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
					Do While schemas.MoveNext()
						schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0
							Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If
					Loop
				Finally
					If (Not s1 Is Nothing) Then
						s1.Close()
					End If
					If (Not s2 Is Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function

		Public Delegate Sub EmployeesRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeesRowChangeEvent)

		Public Delegate Sub Order_DetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As Order_DetailsRowChangeEvent)

		Public Delegate Sub OrdersRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdersRowChangeEvent)

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public Partial Class EmployeesDataTable
			Inherits Global.System.Data.DataTable
			Implements Global.System.Collections.IEnumerable

			Private columnEmployeeID As Global.System.Data.DataColumn

			Private columnLastName As Global.System.Data.DataColumn

			Private columnFirstName As Global.System.Data.DataColumn

			Private columnTitle As Global.System.Data.DataColumn

			Private columnTitleOfCourtesy As Global.System.Data.DataColumn

			Private columnBirthDate As Global.System.Data.DataColumn

			Private columnHireDate As Global.System.Data.DataColumn

			Private columnAddress As Global.System.Data.DataColumn

			Private columnCity As Global.System.Data.DataColumn

			Private columnRegion As Global.System.Data.DataColumn

			Private columnPostalCode As Global.System.Data.DataColumn

			Private columnCountry As Global.System.Data.DataColumn

			Private columnHomePhone As Global.System.Data.DataColumn

			Private columnExtension As Global.System.Data.DataColumn

			Private columnPhoto As Global.System.Data.DataColumn

			Private columnNotes As Global.System.Data.DataColumn

			Private columnReportsTo As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Employees"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property EmployeeIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnEmployeeID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLastName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnFirstName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTitle
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property TitleOfCourtesyColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnTitleOfCourtesy
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnBirthDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property HireDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnHireDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnAddress
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnRegion
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPostalCode
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCountry
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property HomePhoneColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnHomePhone
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ExtensionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnExtension
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PhotoColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPhoto
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnNotes
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ReportsToColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnReportsTo
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Default Property Item(ByVal index As Integer) As EmployeesRow
				Get
					Return (CType(Me.Rows(index), EmployeesRow))
				End Get
			End Property

			Public Event EmployeesRowChanging As EmployeesRowChangeEventHandler

			Public Event EmployeesRowChanged As EmployeesRowChangeEventHandler

			Public Event EmployeesRowDeleting As EmployeesRowChangeEventHandler

			Public Event EmployeesRowDeleted As EmployeesRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddEmployeesRow(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate As System.DateTime, ByVal HireDate As System.DateTime, ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Photo As String, ByVal Notes As String, ByVal ReportsTo As Integer) As EmployeesRow
				Dim rowEmployeesRow As EmployeesRow = (CType(Me.NewRow(), EmployeesRow))
				Dim columnValuesArray As Object() = New Object() { Nothing, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDate, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Notes, ReportsTo}
				rowEmployeesRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowEmployeesRow)
				Return rowEmployeesRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function FindByEmployeeID(ByVal EmployeeID As Integer) As EmployeesRow
				Return (CType(Me.Rows.Find(New Object() { EmployeeID}), EmployeesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As EmployeesDataTable = (CType(MyBase.Clone(), EmployeesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New EmployeesDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnEmployeeID = MyBase.Columns("EmployeeID")
				Me.columnLastName = MyBase.Columns("LastName")
				Me.columnFirstName = MyBase.Columns("FirstName")
				Me.columnTitle = MyBase.Columns("Title")
				Me.columnTitleOfCourtesy = MyBase.Columns("TitleOfCourtesy")
				Me.columnBirthDate = MyBase.Columns("BirthDate")
				Me.columnHireDate = MyBase.Columns("HireDate")
				Me.columnAddress = MyBase.Columns("Address")
				Me.columnCity = MyBase.Columns("City")
				Me.columnRegion = MyBase.Columns("Region")
				Me.columnPostalCode = MyBase.Columns("PostalCode")
				Me.columnCountry = MyBase.Columns("Country")
				Me.columnHomePhone = MyBase.Columns("HomePhone")
				Me.columnExtension = MyBase.Columns("Extension")
				Me.columnPhoto = MyBase.Columns("Photo")
				Me.columnNotes = MyBase.Columns("Notes")
				Me.columnReportsTo = MyBase.Columns("ReportsTo")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnEmployeeID = New Global.System.Data.DataColumn("EmployeeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEmployeeID)
				Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLastName)
				Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFirstName)
				Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTitle)
				Me.columnTitleOfCourtesy = New Global.System.Data.DataColumn("TitleOfCourtesy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnTitleOfCourtesy)
				Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnBirthDate)
				Me.columnHireDate = New Global.System.Data.DataColumn("HireDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHireDate)
				Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnAddress)
				Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCity)
				Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRegion)
				Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPostalCode)
				Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCountry)
				Me.columnHomePhone = New Global.System.Data.DataColumn("HomePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnHomePhone)
				Me.columnExtension = New Global.System.Data.DataColumn("Extension", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnExtension)
				Me.columnPhoto = New Global.System.Data.DataColumn("Photo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPhoto)
				Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnNotes)
				Me.columnReportsTo = New Global.System.Data.DataColumn("ReportsTo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnReportsTo)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnEmployeeID}, True))
				Me.columnEmployeeID.AutoIncrement = True
				Me.columnEmployeeID.AllowDBNull = False
				Me.columnEmployeeID.Unique = True
				Me.columnLastName.MaxLength = 20
				Me.columnFirstName.MaxLength = 10
				Me.columnTitle.MaxLength = 30
				Me.columnTitleOfCourtesy.MaxLength = 25
				Me.columnAddress.MaxLength = 60
				Me.columnCity.MaxLength = 15
				Me.columnRegion.MaxLength = 15
				Me.columnPostalCode.MaxLength = 10
				Me.columnCountry.MaxLength = 15
				Me.columnHomePhone.MaxLength = 24
				Me.columnExtension.MaxLength = 4
				Me.columnPhoto.MaxLength = 255
				Me.columnNotes.MaxLength = 536870910
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewEmployeesRow() As EmployeesRow
				Return (CType(Me.NewRow(), EmployeesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New EmployeesRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(EmployeesRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.EmployeesRowChangedEvent Is Nothing) Then
					RaiseEvent EmployeesRowChanged(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.EmployeesRowChangingEvent Is Nothing) Then
					RaiseEvent EmployeesRowChanging(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.EmployeesRowDeletedEvent Is Nothing) Then
					RaiseEvent EmployeesRowDeleted(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.EmployeesRowDeletingEvent Is Nothing) Then
					RaiseEvent EmployeesRowDeleting(Me, New EmployeesRowChangeEvent((CType(e.Row, EmployeesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveEmployeesRow(ByVal row As EmployeesRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As NwindDataSetGridView = New NwindDataSetGridView()
				Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "EmployeesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (Not s1 Is Nothing) Then
							s1.Close()
						End If
						If (Not s2 Is Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public Partial Class Order_DetailsDataTable
			Inherits Global.System.Data.DataTable
			Implements Global.System.Collections.IEnumerable

			Private columnOrderID As Global.System.Data.DataColumn

			Private columnProductID As Global.System.Data.DataColumn

			Private columnUnitPrice As Global.System.Data.DataColumn

			Private columnQuantity As Global.System.Data.DataColumn

			Private columnDiscount As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Order Details"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property OrderIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnOrderID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ProductIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnProductID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnUnitPrice
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnQuantity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDiscount
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Default Property Item(ByVal index As Integer) As Order_DetailsRow
				Get
					Return (CType(Me.Rows(index), Order_DetailsRow))
				End Get
			End Property

			Public Event Order_DetailsRowChanging As Order_DetailsRowChangeEventHandler

			Public Event Order_DetailsRowChanged As Order_DetailsRowChangeEventHandler

			Public Event Order_DetailsRowDeleting As Order_DetailsRowChangeEventHandler

			Public Event Order_DetailsRowDeleted As Order_DetailsRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddOrder_DetailsRow(ByVal row As Order_DetailsRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddOrder_DetailsRow(ByVal parentOrdersRowByOrdersOrder_Details As OrdersRow, ByVal ProductID As Integer, ByVal UnitPrice As Decimal, ByVal Quantity As Short, ByVal Discount As Single) As Order_DetailsRow
				Dim rowOrder_DetailsRow As Order_DetailsRow = (CType(Me.NewRow(), Order_DetailsRow))
				Dim columnValuesArray As Object() = New Object() { Nothing, ProductID, UnitPrice, Quantity, Discount}
				If (Not parentOrdersRowByOrdersOrder_Details Is Nothing) Then
					columnValuesArray(0) = parentOrdersRowByOrdersOrder_Details(0)
				End If
				rowOrder_DetailsRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowOrder_DetailsRow)
				Return rowOrder_DetailsRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function FindByOrderIDProductID(ByVal OrderID As Integer, ByVal ProductID As Integer) As Order_DetailsRow
				Return (CType(Me.Rows.Find(New Object() { OrderID, ProductID}), Order_DetailsRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As Order_DetailsDataTable = (CType(MyBase.Clone(), Order_DetailsDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New Order_DetailsDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnOrderID = MyBase.Columns("OrderID")
				Me.columnProductID = MyBase.Columns("ProductID")
				Me.columnUnitPrice = MyBase.Columns("UnitPrice")
				Me.columnQuantity = MyBase.Columns("Quantity")
				Me.columnDiscount = MyBase.Columns("Discount")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnOrderID = New Global.System.Data.DataColumn("OrderID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnOrderID)
				Me.columnProductID = New Global.System.Data.DataColumn("ProductID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnProductID)
				Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnUnitPrice)
				Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnQuantity)
				Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDiscount)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnOrderID, Me.columnProductID}, True))
				Me.columnOrderID.AllowDBNull = False
				Me.columnProductID.AllowDBNull = False
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewOrder_DetailsRow() As Order_DetailsRow
				Return (CType(Me.NewRow(), Order_DetailsRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New Order_DetailsRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(Order_DetailsRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.Order_DetailsRowChangedEvent Is Nothing) Then
					Order_DetailsRowChangedEvent(Me, New Order_DetailsRowChangeEvent((CType(e.Row, Order_DetailsRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.Order_DetailsRowChangingEvent Is Nothing) Then
					Order_DetailsRowChangingEvent(Me, New Order_DetailsRowChangeEvent((CType(e.Row, Order_DetailsRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.Order_DetailsRowDeletedEvent Is Nothing) Then
					Order_DetailsRowDeletedEvent(Me, New Order_DetailsRowChangeEvent((CType(e.Row, Order_DetailsRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.Order_DetailsRowDeletingEvent Is Nothing) Then
					Order_DetailsRowDeletingEvent(Me, New Order_DetailsRowChangeEvent((CType(e.Row, Order_DetailsRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveOrder_DetailsRow(ByVal row As Order_DetailsRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As NwindDataSetGridView = New NwindDataSetGridView()
				Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "Order_DetailsDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (Not s1 Is Nothing) Then
							s1.Close()
						End If
						If (Not s2 Is Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Public Partial Class OrdersDataTable
			Inherits Global.System.Data.DataTable
			Implements Global.System.Collections.IEnumerable

			Private columnOrderID As Global.System.Data.DataColumn

			Private columnCustomerID As Global.System.Data.DataColumn

			Private columnEmployeeID As Global.System.Data.DataColumn

			Private columnOrderDate As Global.System.Data.DataColumn

			Private columnRequiredDate As Global.System.Data.DataColumn

			Private columnShippedDate As Global.System.Data.DataColumn

			Private columnShipVia As Global.System.Data.DataColumn

			Private columnFreight As Global.System.Data.DataColumn

			Private columnShipName As Global.System.Data.DataColumn

			Private columnShipAddress As Global.System.Data.DataColumn

			Private columnShipCity As Global.System.Data.DataColumn

			Private columnShipRegion As Global.System.Data.DataColumn

			Private columnShipPostalCode As Global.System.Data.DataColumn

			Private columnShipCountry As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Orders"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property OrderIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnOrderID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CustomerIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCustomerID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property EmployeeIDColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnEmployeeID
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property OrderDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnOrderDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property RequiredDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnRequiredDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShippedDateColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShippedDate
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipViaColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipVia
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property FreightColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnFreight
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipAddressColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipAddress
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipCityColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipCity
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipRegionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipRegion
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipPostalCodeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipPostalCode
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ShipCountryColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnShipCountry
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Default Property Item(ByVal index As Integer) As OrdersRow
				Get
					Return (CType(Me.Rows(index), OrdersRow))
				End Get
			End Property

			Public Event OrdersRowChanging As OrdersRowChangeEventHandler

			Public Event OrdersRowChanged As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleting As OrdersRowChangeEventHandler

			Public Event OrdersRowDeleted As OrdersRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddOrdersRow(ByVal CustomerID As String, ByVal parentEmployeesRowByEmployeesOrders As EmployeesRow, ByVal OrderDate As System.DateTime, ByVal RequiredDate As System.DateTime, ByVal ShippedDate As System.DateTime, ByVal ShipVia As Integer, ByVal Freight As Decimal, ByVal ShipName As String, ByVal ShipAddress As String, ByVal ShipCity As String, ByVal ShipRegion As String, ByVal ShipPostalCode As String, ByVal ShipCountry As String) As OrdersRow
				Dim rowOrdersRow As OrdersRow = (CType(Me.NewRow(), OrdersRow))
				Dim columnValuesArray As Object() = New Object() { Nothing, CustomerID, Nothing, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry}
				If (Not parentEmployeesRowByEmployeesOrders Is Nothing) Then
					columnValuesArray(2) = parentEmployeesRowByEmployeesOrders(0)
				End If
				rowOrdersRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowOrdersRow)
				Return rowOrdersRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function FindByOrderID(ByVal OrderID As Integer) As OrdersRow
				Return (CType(Me.Rows.Find(New Object() { OrderID}), OrdersRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As OrdersDataTable = (CType(MyBase.Clone(), OrdersDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New OrdersDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnOrderID = MyBase.Columns("OrderID")
				Me.columnCustomerID = MyBase.Columns("CustomerID")
				Me.columnEmployeeID = MyBase.Columns("EmployeeID")
				Me.columnOrderDate = MyBase.Columns("OrderDate")
				Me.columnRequiredDate = MyBase.Columns("RequiredDate")
				Me.columnShippedDate = MyBase.Columns("ShippedDate")
				Me.columnShipVia = MyBase.Columns("ShipVia")
				Me.columnFreight = MyBase.Columns("Freight")
				Me.columnShipName = MyBase.Columns("ShipName")
				Me.columnShipAddress = MyBase.Columns("ShipAddress")
				Me.columnShipCity = MyBase.Columns("ShipCity")
				Me.columnShipRegion = MyBase.Columns("ShipRegion")
				Me.columnShipPostalCode = MyBase.Columns("ShipPostalCode")
				Me.columnShipCountry = MyBase.Columns("ShipCountry")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnOrderID = New Global.System.Data.DataColumn("OrderID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnOrderID)
				Me.columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCustomerID)
				Me.columnEmployeeID = New Global.System.Data.DataColumn("EmployeeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEmployeeID)
				Me.columnOrderDate = New Global.System.Data.DataColumn("OrderDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnOrderDate)
				Me.columnRequiredDate = New Global.System.Data.DataColumn("RequiredDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRequiredDate)
				Me.columnShippedDate = New Global.System.Data.DataColumn("ShippedDate", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShippedDate)
				Me.columnShipVia = New Global.System.Data.DataColumn("ShipVia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipVia)
				Me.columnFreight = New Global.System.Data.DataColumn("Freight", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnFreight)
				Me.columnShipName = New Global.System.Data.DataColumn("ShipName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipName)
				Me.columnShipAddress = New Global.System.Data.DataColumn("ShipAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipAddress)
				Me.columnShipCity = New Global.System.Data.DataColumn("ShipCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipCity)
				Me.columnShipRegion = New Global.System.Data.DataColumn("ShipRegion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipRegion)
				Me.columnShipPostalCode = New Global.System.Data.DataColumn("ShipPostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipPostalCode)
				Me.columnShipCountry = New Global.System.Data.DataColumn("ShipCountry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnShipCountry)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnOrderID}, True))
				Me.columnOrderID.AutoIncrement = True
				Me.columnOrderID.AllowDBNull = False
				Me.columnOrderID.Unique = True
				Me.columnCustomerID.MaxLength = 5
				Me.columnShipName.MaxLength = 40
				Me.columnShipAddress.MaxLength = 60
				Me.columnShipCity.MaxLength = 15
				Me.columnShipRegion.MaxLength = 15
				Me.columnShipPostalCode.MaxLength = 10
				Me.columnShipCountry.MaxLength = 15
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewOrdersRow() As OrdersRow
				Return (CType(Me.NewRow(), OrdersRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New OrdersRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(OrdersRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Not Me.OrdersRowChangedEvent Is Nothing) Then
					RaiseEvent OrdersRowChanged(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Not Me.OrdersRowChangingEvent Is Nothing) Then
					RaiseEvent OrdersRowChanging(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Not Me.OrdersRowDeletedEvent Is Nothing) Then
					RaiseEvent OrdersRowDeleted(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Not Me.OrdersRowDeletingEvent Is Nothing) Then
					RaiseEvent OrdersRowDeleting(Me, New OrdersRowChangeEvent((CType(e.Row, OrdersRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveOrdersRow(ByVal row As OrdersRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As NwindDataSetGridView = New NwindDataSetGridView()
				Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "OrdersDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (Not s1 Is Nothing) Then
							s1.Close()
						End If
						If (Not s2 Is Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Partial Class EmployeesRow
			Inherits Global.System.Data.DataRow

			Private tableEmployees As EmployeesDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableEmployees = (CType(Me.Table, EmployeesDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property EmployeeID() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableEmployees.EmployeeIDColumn))))
				End Get
				Set
					Me(Me.tableEmployees.EmployeeIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property LastName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.LastNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.LastNameColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property FirstName() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.FirstNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.FirstNameColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Title() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.TitleColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.TitleColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property TitleOfCourtesy() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.TitleOfCourtesyColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'TitleOfCourtesy' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.TitleOfCourtesyColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property BirthDate() As System.DateTime
				Get
					Try
						Return (CType(Me(Me.tableEmployees.BirthDateColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDate' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.BirthDateColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property HireDate() As System.DateTime
				Get
					Try
						Return (CType(Me(Me.tableEmployees.HireDateColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'HireDate' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.HireDateColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Address() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.AddressColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.AddressColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property City() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CityColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.CityColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Region() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.RegionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.RegionColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property PostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.PostalCodeColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.PostalCodeColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.CountryColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.CountryColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property HomePhone() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.HomePhoneColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'HomePhone' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.HomePhoneColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Extension() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.ExtensionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Extension' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.ExtensionColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Photo() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.PhotoColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Photo' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.PhotoColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Notes() As String
				Get
					Try
						Return (CStr(Me(Me.tableEmployees.NotesColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.NotesColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ReportsTo() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableEmployees.ReportsToColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ReportsTo' in table 'Employees' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableEmployees.ReportsToColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsLastNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.LastNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetLastNameNull()
				Me(Me.tableEmployees.LastNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsFirstNameNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.FirstNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetFirstNameNull()
				Me(Me.tableEmployees.FirstNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsTitleNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.TitleColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetTitleNull()
				Me(Me.tableEmployees.TitleColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsTitleOfCourtesyNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.TitleOfCourtesyColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetTitleOfCourtesyNull()
				Me(Me.tableEmployees.TitleOfCourtesyColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsBirthDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.BirthDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetBirthDateNull()
				Me(Me.tableEmployees.BirthDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsHireDateNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.HireDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetHireDateNull()
				Me(Me.tableEmployees.HireDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsAddressNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.AddressColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetAddressNull()
				Me(Me.tableEmployees.AddressColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCityNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCityNull()
				Me(Me.tableEmployees.CityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsRegionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.RegionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetRegionNull()
				Me(Me.tableEmployees.RegionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PostalCodeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPostalCodeNull()
				Me(Me.tableEmployees.PostalCodeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.CountryColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCountryNull()
				Me(Me.tableEmployees.CountryColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsHomePhoneNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.HomePhoneColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetHomePhoneNull()
				Me(Me.tableEmployees.HomePhoneColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsExtensionNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ExtensionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetExtensionNull()
				Me(Me.tableEmployees.ExtensionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPhotoNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.PhotoColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPhotoNull()
				Me(Me.tableEmployees.PhotoColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsNotesNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.NotesColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetNotesNull()
				Me(Me.tableEmployees.NotesColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsReportsToNull() As Boolean
				Return Me.IsNull(Me.tableEmployees.ReportsToColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetReportsToNull()
				Me(Me.tableEmployees.ReportsToColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function GetOrdersRows() As OrdersRow()
				If (Me.Table.ChildRelations("EmployeesOrders") Is Nothing) Then
					Return New OrdersRow(){}
				Else
					Return (CType(MyBase.GetChildRows(Me.Table.ChildRelations("EmployeesOrders")), OrdersRow()))
				End If
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Partial Class Order_DetailsRow
			Inherits Global.System.Data.DataRow

			Private tableOrder_Details As Order_DetailsDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableOrder_Details = (CType(Me.Table, Order_DetailsDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property OrderID() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableOrder_Details.OrderIDColumn))))
				End Get
				Set
					Me(Me.tableOrder_Details.OrderIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ProductID() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableOrder_Details.ProductIDColumn))))
				End Get
				Set
					Me(Me.tableOrder_Details.ProductIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property UnitPrice() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableOrder_Details.UnitPriceColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'Order Details' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrder_Details.UnitPriceColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Quantity() As Short
				Get
					Try
						Return (CShort(Fix(Me(Me.tableOrder_Details.QuantityColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'Order Details' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrder_Details.QuantityColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Discount() As Single
				Get
					Try
						Return (CSng(Me(Me.tableOrder_Details.DiscountColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'Order Details' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrder_Details.DiscountColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property OrdersRow() As OrdersRow
				Get
					Return (CType(Me.GetParentRow(Me.Table.ParentRelations("OrdersOrder Details")), OrdersRow))
				End Get
				Set
					Me.SetParentRow(Value, Me.Table.ParentRelations("OrdersOrder Details"))
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsUnitPriceNull() As Boolean
				Return Me.IsNull(Me.tableOrder_Details.UnitPriceColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetUnitPriceNull()
				Me(Me.tableOrder_Details.UnitPriceColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsQuantityNull() As Boolean
				Return Me.IsNull(Me.tableOrder_Details.QuantityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetQuantityNull()
				Me(Me.tableOrder_Details.QuantityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsDiscountNull() As Boolean
				Return Me.IsNull(Me.tableOrder_Details.DiscountColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetDiscountNull()
				Me(Me.tableOrder_Details.DiscountColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Partial Class OrdersRow
			Inherits Global.System.Data.DataRow

			Private tableOrders As OrdersDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableOrders = (CType(Me.Table, OrdersDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property OrderID() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableOrders.OrderIDColumn))))
				End Get
				Set
					Me(Me.tableOrders.OrderIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property CustomerID() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.CustomerIDColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerID' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.CustomerIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property EmployeeID() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableOrders.EmployeeIDColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeID' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.EmployeeIDColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property OrderDate() As System.DateTime
				Get
					Try
						Return (CType(Me(Me.tableOrders.OrderDateColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'OrderDate' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.OrderDateColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property RequiredDate() As System.DateTime
				Get
					Try
						Return (CType(Me(Me.tableOrders.RequiredDateColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'RequiredDate' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.RequiredDateColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShippedDate() As System.DateTime
				Get
					Try
						Return (CType(Me(Me.tableOrders.ShippedDateColumn), Global.System.DateTime))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShippedDate' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShippedDateColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipVia() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableOrders.ShipViaColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipVia' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipViaColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Freight() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableOrders.FreightColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Freight' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.FreightColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipName() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipName' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipNameColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipAddress() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipAddressColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipAddress' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipAddressColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipCity() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipCityColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipCity' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipCityColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipRegion() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipRegionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipRegion' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipRegionColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipPostalCode() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipPostalCodeColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipPostalCode' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipPostalCodeColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ShipCountry() As String
				Get
					Try
						Return (CStr(Me(Me.tableOrders.ShipCountryColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ShipCountry' in table 'Orders' is DBNull.", e)
					End Try
				End Get
				Set
					Me(Me.tableOrders.ShipCountryColumn) = Value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property EmployeesRow() As EmployeesRow
				Get
					Return (CType(Me.GetParentRow(Me.Table.ParentRelations("EmployeesOrders")), EmployeesRow))
				End Get
				Set
					Me.SetParentRow(Value, Me.Table.ParentRelations("EmployeesOrders"))
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCustomerIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.CustomerIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCustomerIDNull()
				Me(Me.tableOrders.CustomerIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsEmployeeIDNull() As Boolean
				Return Me.IsNull(Me.tableOrders.EmployeeIDColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetEmployeeIDNull()
				Me(Me.tableOrders.EmployeeIDColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsOrderDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.OrderDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetOrderDateNull()
				Me(Me.tableOrders.OrderDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsRequiredDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.RequiredDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetRequiredDateNull()
				Me(Me.tableOrders.RequiredDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShippedDateNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShippedDateColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShippedDateNull()
				Me(Me.tableOrders.ShippedDateColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipViaNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipViaColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipViaNull()
				Me(Me.tableOrders.ShipViaColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsFreightNull() As Boolean
				Return Me.IsNull(Me.tableOrders.FreightColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetFreightNull()
				Me(Me.tableOrders.FreightColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipNameNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipNameNull()
				Me(Me.tableOrders.ShipNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipAddressNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipAddressColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipAddressNull()
				Me(Me.tableOrders.ShipAddressColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipCityNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipCityColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipCityNull()
				Me(Me.tableOrders.ShipCityColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipRegionNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipRegionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipRegionNull()
				Me(Me.tableOrders.ShipRegionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipPostalCodeNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipPostalCodeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipPostalCodeNull()
				Me(Me.tableOrders.ShipPostalCodeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsShipCountryNull() As Boolean
				Return Me.IsNull(Me.tableOrders.ShipCountryColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetShipCountryNull()
				Me(Me.tableOrders.ShipCountryColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function GetOrder_DetailsRows() As Order_DetailsRow()
				If (Me.Table.ChildRelations("OrdersOrder Details") Is Nothing) Then
					Return New Order_DetailsRow(){}
				Else
					Return (CType(MyBase.GetChildRows(Me.Table.ChildRelations("OrdersOrder Details")), Order_DetailsRow()))
				End If
			End Function
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class EmployeesRowChangeEvent
			Inherits Global.System.EventArgs

			Private eventRow As EmployeesRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row As EmployeesRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As EmployeesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class Order_DetailsRowChangeEvent
			Inherits Global.System.EventArgs

			Private eventRow As Order_DetailsRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row As Order_DetailsRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As Order_DetailsRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class OrdersRowChangeEvent
			Inherits Global.System.EventArgs

			Private eventRow As OrdersRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row As OrdersRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As OrdersRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
Namespace Telerik.Examples.WinControls.NwindDataSetGridViewTableAdapters


	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Public Partial Class EmployeesTableAdapter
		Inherits Global.System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set
				Me._connection = Value
				If (Not Me.Adapter.InsertCommand Is Nothing) Then
					Me.Adapter.InsertCommand.Connection = Value
				End If
				If (Not Me.Adapter.DeleteCommand Is Nothing) Then
					Me.Adapter.DeleteCommand.Connection = Value
				End If
				If (Not Me.Adapter.UpdateCommand Is Nothing) Then
					Me.Adapter.UpdateCommand.Connection = Value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Not Me.CommandCollection(i) Is Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = Value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set
				Me._clearBeforeFill = Value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Employees"
			tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID")
			tableMapping.ColumnMappings.Add("LastName", "LastName")
			tableMapping.ColumnMappings.Add("FirstName", "FirstName")
			tableMapping.ColumnMappings.Add("Title", "Title")
			tableMapping.ColumnMappings.Add("TitleOfCourtesy", "TitleOfCourtesy")
			tableMapping.ColumnMappings.Add("BirthDate", "BirthDate")
			tableMapping.ColumnMappings.Add("HireDate", "HireDate")
			tableMapping.ColumnMappings.Add("Address", "Address")
			tableMapping.ColumnMappings.Add("City", "City")
			tableMapping.ColumnMappings.Add("Region", "Region")
			tableMapping.ColumnMappings.Add("PostalCode", "PostalCode")
			tableMapping.ColumnMappings.Add("Country", "Country")
			tableMapping.ColumnMappings.Add("HomePhone", "HomePhone")
			tableMapping.ColumnMappings.Add("Extension", "Extension")
			tableMapping.ColumnMappings.Add("Photo", "Photo")
			tableMapping.ColumnMappings.Add("Notes", "Notes")
			tableMapping.ColumnMappings.Add("ReportsTo", "ReportsTo")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Employees` WHERE ((`EmployeeID` = ?) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `TitleOfCourtesy` IS NULL) OR (`TitleOfCourtesy` = ?)) AND ((? = 1 AND `BirthDate` IS NULL) OR (`BirthDate` = ?)) AND ((? = 1 AND `HireDate` IS NULL) OR (`HireDate` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `Extension` IS NULL) OR (`Extension` = ?)) AND ((? = 1 AND `Photo` IS NULL) OR (`Photo` = ?)) AND ((? = 1 AND `ReportsTo` IS NULL) OR (`ReportsTo` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LastName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FirstName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Title", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BirthDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HireDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HomePhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Extension", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Photo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Photo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Employees` (`LastName`, `FirstName`, `Title`, `TitleOfCourtesy`, `BirthDate`, `HireDate`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `HomePhone`, `Extension`, `Photo`, `Notes`, `ReportsTo`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Photo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Notes", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Notes", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Employees` SET `LastName` = ?, `FirstName` = ?, `Title` = ?, `TitleOfCourtesy` = ?, `BirthDate` = ?, `HireDate` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `HomePhone` = ?, `Extension` = ?, `Photo` = ?, `Notes` = ?, `ReportsTo` = ? WHERE ((`EmployeeID` = ?) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `TitleOfCourtesy` IS NULL) OR (`TitleOfCourtesy` = ?)) AND ((? = 1 AND `BirthDate` IS NULL) OR (`BirthDate` = ?)) AND ((? = 1 AND `HireDate` IS NULL) OR (`HireDate` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `Extension` IS NULL) OR (`Extension` = ?)) AND ((? = 1 AND `Photo` IS NULL) OR (`Photo` = ?)) AND ((? = 1 AND `ReportsTo` IS NULL) OR (`ReportsTo` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Photo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Notes", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Notes", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LastName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LastName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LastName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FirstName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FirstName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "FirstName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Title", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Title", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Title", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TitleOfCourtesy", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "TitleOfCourtesy", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BirthDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BirthDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BirthDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HireDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HireDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HireDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Address", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Address", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Address", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_City", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_City", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "City", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Region", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Region", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Region", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HomePhone", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HomePhone", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "HomePhone", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Extension", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Extension", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Extension", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Photo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Photo", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Photo", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ReportsTo", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReportsTo", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT EmployeeID, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDa" & "te, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Not" & "es, ReportsTo FROM Employees"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As NwindDataSetGridView.EmployeesDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As NwindDataSetGridView.EmployeesDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As NwindDataSetGridView.EmployeesDataTable = New NwindDataSetGridView.EmployeesDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As NwindDataSetGridView.EmployeesDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As NwindDataSetGridView) As Integer
			Return Me.Adapter.Update(dataSet, "Employees")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows As Global.System.Data.DataRow()) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_EmployeeID As Integer, ByVal Original_LastName As String, ByVal Original_FirstName As String, ByVal Original_Title As String, ByVal Original_TitleOfCourtesy As String, ByVal Original_BirthDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_HireDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_HomePhone As String, ByVal Original_Extension As String, ByVal Original_Photo As String, ByVal Original_ReportsTo As Global.System.Nullable(Of Integer)) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Fix(Original_EmployeeID)))
			If (Original_LastName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_LastName")
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_LastName))
			End If
			If (Original_FirstName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_FirstName")
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_FirstName))
			End If
			If (Original_Title Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_Title))
			End If
			If (Original_TitleOfCourtesy Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_TitleOfCourtesy))
			End If
			If (Original_BirthDate.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CDate(Original_BirthDate.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
			End If
			If (Original_HireDate.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CDate(Original_HireDate.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			End If
			If (Original_Address Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_Address))
			End If
			If (Original_City Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_City))
			End If
			If (Original_Region Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(18).Value = (CStr(Original_Region))
			End If
			If (Original_PostalCode Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(20).Value = (CStr(Original_PostalCode))
			End If
			If (Original_Country Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(22).Value = (CStr(Original_Country))
			End If
			If (Original_HomePhone Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(24).Value = (CStr(Original_HomePhone))
			End If
			If (Original_Extension Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(25).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(25).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(26).Value = (CStr(Original_Extension))
			End If
			If (Original_Photo Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(27).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(27).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(28).Value = (CStr(Original_Photo))
			End If
			If (Original_ReportsTo.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(29).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(30).Value = (CInt(Fix(Original_ReportsTo.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(29).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate As Global.System.Nullable(Of Global.System.DateTime), ByVal HireDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Photo As String, ByVal Notes As String, ByVal ReportsTo As Global.System.Nullable(Of Integer)) As Integer
			If (LastName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("LastName")
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(LastName))
			End If
			If (FirstName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("FirstName")
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(FirstName))
			End If
			If (Title Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(Title))
			End If
			If (TitleOfCourtesy Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(TitleOfCourtesy))
			End If
			If (BirthDate.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = (CDate(BirthDate.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (HireDate.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = (CDate(HireDate.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Address Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(Address))
			End If
			If (City Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = (CStr(City))
			End If
			If (Region Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = (CStr(Region))
			End If
			If (PostalCode Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(PostalCode))
			End If
			If (Country Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(Country))
			End If
			If (HomePhone Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(11).Value = (CStr(HomePhone))
			End If
			If (Extension Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(12).Value = (CStr(Extension))
			End If
			If (Photo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(13).Value = (CStr(Photo))
			End If
			If (Notes Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(14).Value = (CStr(Notes))
			End If
			If (ReportsTo.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(15).Value = (CInt(Fix(ReportsTo.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal LastName As String, ByVal FirstName As String, ByVal Title As String, ByVal TitleOfCourtesy As String, ByVal BirthDate As Global.System.Nullable(Of Global.System.DateTime), ByVal HireDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Address As String, ByVal City As String, ByVal Region As String, ByVal PostalCode As String, ByVal Country As String, ByVal HomePhone As String, ByVal Extension As String, ByVal Photo As String, ByVal Notes As String, ByVal ReportsTo As Global.System.Nullable(Of Integer), ByVal Original_EmployeeID As Integer, ByVal Original_LastName As String, ByVal Original_FirstName As String, ByVal Original_Title As String, ByVal Original_TitleOfCourtesy As String, ByVal Original_BirthDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_HireDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_Address As String, ByVal Original_City As String, ByVal Original_Region As String, ByVal Original_PostalCode As String, ByVal Original_Country As String, ByVal Original_HomePhone As String, ByVal Original_Extension As String, ByVal Original_Photo As String, ByVal Original_ReportsTo As Global.System.Nullable(Of Integer)) As Integer
			If (LastName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("LastName")
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(LastName))
			End If
			If (FirstName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("FirstName")
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(FirstName))
			End If
			If (Title Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(Title))
			End If
			If (TitleOfCourtesy Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(TitleOfCourtesy))
			End If
			If (BirthDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CDate(BirthDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (HireDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CDate(HireDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Address Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(Address))
			End If
			If (City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CStr(City))
			End If
			If (Region Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(Region))
			End If
			If (PostalCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(PostalCode))
			End If
			If (Country Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Country))
			End If
			If (HomePhone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(HomePhone))
			End If
			If (Extension Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CStr(Extension))
			End If
			If (Photo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CStr(Photo))
			End If
			If (Notes Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CStr(Notes))
			End If
			If (ReportsTo.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CInt(Fix(ReportsTo.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(16).Value = (CInt(Fix(Original_EmployeeID)))
			If (Original_LastName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_LastName")
			Else
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CStr(Original_LastName))
			End If
			If (Original_FirstName Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_FirstName")
			Else
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CStr(Original_FirstName))
			End If
			If (Original_Title Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CStr(Original_Title))
			End If
			If (Original_TitleOfCourtesy Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CStr(Original_TitleOfCourtesy))
			End If
			If (Original_BirthDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CDate(Original_BirthDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
			End If
			If (Original_HireDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CDate(Original_HireDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
			End If
			If (Original_Address Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CStr(Original_Address))
			End If
			If (Original_City Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(32).Value = (CStr(Original_City))
			End If
			If (Original_Region Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(33).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(33).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(34).Value = (CStr(Original_Region))
			End If
			If (Original_PostalCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(36).Value = (CStr(Original_PostalCode))
			End If
			If (Original_Country Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(38).Value = (CStr(Original_Country))
			End If
			If (Original_HomePhone Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(39).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(39).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(40).Value = (CStr(Original_HomePhone))
			End If
			If (Original_Extension Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(41).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(41).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(42).Value = (CStr(Original_Extension))
			End If
			If (Original_Photo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(43).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(43).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(44).Value = (CStr(Original_Photo))
			End If
			If (Original_ReportsTo.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(45).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(46).Value = (CInt(Fix(Original_ReportsTo.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(45).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Public Partial Class Order_DetailsTableAdapter
		Inherits Global.System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set
				Me._connection = Value
				If (Not Me.Adapter.InsertCommand Is Nothing) Then
					Me.Adapter.InsertCommand.Connection = Value
				End If
				If (Not Me.Adapter.DeleteCommand Is Nothing) Then
					Me.Adapter.DeleteCommand.Connection = Value
				End If
				If (Not Me.Adapter.UpdateCommand Is Nothing) Then
					Me.Adapter.UpdateCommand.Connection = Value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Not Me.CommandCollection(i) Is Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = Value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set
				Me._clearBeforeFill = Value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Order Details"
			tableMapping.ColumnMappings.Add("OrderID", "OrderID")
			tableMapping.ColumnMappings.Add("ProductID", "ProductID")
			tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice")
			tableMapping.ColumnMappings.Add("Quantity", "Quantity")
			tableMapping.ColumnMappings.Add("Discount", "Discount")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Order Details` WHERE ((`OrderID` = ?) AND (`ProductID` = ?) AND ((? " & "= 1 AND `UnitPrice` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `Quantity` IS" & " NULL) OR (`Quantity` = ?)) AND ((? = 1 AND `Discount` IS NULL) OR (`Discount` =" & " ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitPrice", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Quantity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Quantity", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Discount", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discount", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Discount", Global.System.Data.OleDb.OleDbType.Single, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discount", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Order Details` (`OrderID`, `ProductID`, `UnitPrice`, `Quantity`, `Di" & "scount`) VALUES (?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OrderID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Quantity", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Discount", Global.System.Data.OleDb.OleDbType.Single, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discount", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Order Details` SET `OrderID` = ?, `ProductID` = ?, `UnitPrice` = ?, `Quantity` = ?, `Discount` = ? WHERE ((`OrderID` = ?) AND (`ProductID` = ?) AND ((? = 1 AND `UnitPrice` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `Quantity` IS NULL) OR (`Quantity` = ?)) AND ((? = 1 AND `Discount` IS NULL) OR (`Discount` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OrderID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Quantity", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Discount", Global.System.Data.OleDb.OleDbType.Single, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discount", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ProductID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ProductID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UnitPrice", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UnitPrice", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "UnitPrice", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Quantity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Quantity", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Quantity", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Discount", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discount", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Discount", Global.System.Data.OleDb.OleDbType.Single, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Discount", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT OrderID, ProductID, UnitPrice, Quantity, Discount FROM [Order Details]"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As NwindDataSetGridView.Order_DetailsDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As NwindDataSetGridView.Order_DetailsDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As NwindDataSetGridView.Order_DetailsDataTable = New NwindDataSetGridView.Order_DetailsDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As NwindDataSetGridView.Order_DetailsDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As NwindDataSetGridView) As Integer
			Return Me.Adapter.Update(dataSet, "Order Details")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows As Global.System.Data.DataRow()) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_OrderID As Global.System.Nullable(Of Integer), ByVal Original_ProductID As Integer, ByVal Original_UnitPrice As Decimal, ByVal Original_Quantity As Short, ByVal Original_Discount As Single) As Integer
			If (Original_OrderID.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Fix(Original_OrderID.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.DeleteCommand.Parameters(1).Value = (CInt(Fix(Original_ProductID)))
			Me.Adapter.DeleteCommand.Parameters(2).Value = (CObj(0))
			Me.Adapter.DeleteCommand.Parameters(3).Value = (CDec(Original_UnitPrice))
			Me.Adapter.DeleteCommand.Parameters(4).Value = (CObj(0))
			Me.Adapter.DeleteCommand.Parameters(5).Value = (CShort(Fix(Original_Quantity)))
			Me.Adapter.DeleteCommand.Parameters(6).Value = (CObj(0))
			Me.Adapter.DeleteCommand.Parameters(7).Value = (CSng(Original_Discount))
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal OrderID As Global.System.Nullable(Of Integer), ByVal ProductID As Integer, ByVal UnitPrice As Decimal, ByVal Quantity As Short, ByVal Discount As Single) As Integer
			If (OrderID.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CInt(Fix(OrderID.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.InsertCommand.Parameters(1).Value = (CInt(Fix(ProductID)))
			Me.Adapter.InsertCommand.Parameters(2).Value = (CDec(UnitPrice))
			Me.Adapter.InsertCommand.Parameters(3).Value = (CShort(Fix(Quantity)))
			Me.Adapter.InsertCommand.Parameters(4).Value = (CSng(Discount))
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal OrderID As Global.System.Nullable(Of Integer), ByVal ProductID As Integer, ByVal UnitPrice As Decimal, ByVal Quantity As Short, ByVal Discount As Single, ByVal Original_OrderID As Global.System.Nullable(Of Integer), ByVal Original_ProductID As Integer, ByVal Original_UnitPrice As Decimal, ByVal Original_Quantity As Short, ByVal Original_Discount As Single) As Integer
			If (OrderID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CInt(Fix(OrderID.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(1).Value = (CInt(Fix(ProductID)))
			Me.Adapter.UpdateCommand.Parameters(2).Value = (CDec(UnitPrice))
			Me.Adapter.UpdateCommand.Parameters(3).Value = (CShort(Fix(Quantity)))
			Me.Adapter.UpdateCommand.Parameters(4).Value = (CSng(Discount))
			If (Original_OrderID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CInt(Fix(Original_OrderID.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(6).Value = (CInt(Fix(Original_ProductID)))
			Me.Adapter.UpdateCommand.Parameters(7).Value = (CObj(0))
			Me.Adapter.UpdateCommand.Parameters(8).Value = (CDec(Original_UnitPrice))
			Me.Adapter.UpdateCommand.Parameters(9).Value = (CObj(0))
			Me.Adapter.UpdateCommand.Parameters(10).Value = (CShort(Fix(Original_Quantity)))
			Me.Adapter.UpdateCommand.Parameters(11).Value = (CObj(0))
			Me.Adapter.UpdateCommand.Parameters(12).Value = (CSng(Original_Discount))
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal UnitPrice As Decimal, ByVal Quantity As Short, ByVal Discount As Single, ByVal Original_OrderID As Global.System.Nullable(Of Integer), ByVal Original_ProductID As Integer, ByVal Original_UnitPrice As Decimal, ByVal Original_Quantity As Short, ByVal Original_Discount As Single) As Integer
			Return Me.Update(Original_OrderID, Original_ProductID, UnitPrice, Quantity, Discount, Original_OrderID, Original_ProductID, Original_UnitPrice, Original_Quantity, Original_Discount)
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Public Partial Class OrdersTableAdapter
		Inherits Global.System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set
				Me._connection = Value
				If (Not Me.Adapter.InsertCommand Is Nothing) Then
					Me.Adapter.InsertCommand.Connection = Value
				End If
				If (Not Me.Adapter.DeleteCommand Is Nothing) Then
					Me.Adapter.DeleteCommand.Connection = Value
				End If
				If (Not Me.Adapter.UpdateCommand Is Nothing) Then
					Me.Adapter.UpdateCommand.Connection = Value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Not Me.CommandCollection(i) Is Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = Value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set
				Me._clearBeforeFill = Value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Orders"
			tableMapping.ColumnMappings.Add("OrderID", "OrderID")
			tableMapping.ColumnMappings.Add("CustomerID", "CustomerID")
			tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID")
			tableMapping.ColumnMappings.Add("OrderDate", "OrderDate")
			tableMapping.ColumnMappings.Add("RequiredDate", "RequiredDate")
			tableMapping.ColumnMappings.Add("ShippedDate", "ShippedDate")
			tableMapping.ColumnMappings.Add("ShipVia", "ShipVia")
			tableMapping.ColumnMappings.Add("Freight", "Freight")
			tableMapping.ColumnMappings.Add("ShipName", "ShipName")
			tableMapping.ColumnMappings.Add("ShipAddress", "ShipAddress")
			tableMapping.ColumnMappings.Add("ShipCity", "ShipCity")
			tableMapping.ColumnMappings.Add("ShipRegion", "ShipRegion")
			tableMapping.ColumnMappings.Add("ShipPostalCode", "ShipPostalCode")
			tableMapping.ColumnMappings.Add("ShipCountry", "ShipCountry")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Orders` WHERE ((`OrderID` = ?) AND ((? = 1 AND `CustomerID` IS NULL) OR (`CustomerID` = ?)) AND ((? = 1 AND `EmployeeID` IS NULL) OR (`EmployeeID` = ?)) AND ((? = 1 AND `OrderDate` IS NULL) OR (`OrderDate` = ?)) AND ((? = 1 AND `RequiredDate` IS NULL) OR (`RequiredDate` = ?)) AND ((? = 1 AND `ShippedDate` IS NULL) OR (`ShippedDate` = ?)) AND ((? = 1 AND `ShipVia` IS NULL) OR (`ShipVia` = ?)) AND ((? = 1 AND `Freight` IS NULL) OR (`Freight` = ?)) AND ((? = 1 AND `ShipName` IS NULL) OR (`ShipName` = ?)) AND ((? = 1 AND `ShipAddress` IS NULL) OR (`ShipAddress` = ?)) AND ((? = 1 AND `ShipCity` IS NULL) OR (`ShipCity` = ?)) AND ((? = 1 AND `ShipRegion` IS NULL) OR (`ShipRegion` = ?)) AND ((? = 1 AND `ShipPostalCode` IS NULL) OR (`ShipPostalCode` = ?)) AND ((? = 1 AND `ShipCountry` IS NULL) OR (`ShipCountry` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CustomerID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OrderDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RequiredDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RequiredDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RequiredDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RequiredDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShippedDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShippedDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShippedDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShippedDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipVia", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipVia", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipVia", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipVia", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Freight", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Freight", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Freight", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Freight", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipAddress", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipAddress", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipAddress", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipAddress", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipCity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCity", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipCity", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCity", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipRegion", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipRegion", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipRegion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipRegion", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipPostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipPostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipPostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipPostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipCountry", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCountry", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipCountry", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCountry", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Orders` (`CustomerID`, `EmployeeID`, `OrderDate`, `RequiredDate`, `S" & "hippedDate`, `ShipVia`, `Freight`, `ShipName`, `ShipAddress`, `ShipCity`, `ShipR" & "egion`, `ShipPostalCode`, `ShipCountry`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?" & ", ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OrderDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RequiredDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RequiredDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShippedDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShippedDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipVia", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipVia", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Freight", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Freight", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipAddress", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipAddress", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipCity", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCity", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipRegion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipRegion", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipPostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipPostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipCountry", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCountry", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Orders` SET `CustomerID` = ?, `EmployeeID` = ?, `OrderDate` = ?, `RequiredDate` = ?, `ShippedDate` = ?, `ShipVia` = ?, `Freight` = ?, `ShipName` = ?, `ShipAddress` = ?, `ShipCity` = ?, `ShipRegion` = ?, `ShipPostalCode` = ?, `ShipCountry` = ? WHERE ((`OrderID` = ?) AND ((? = 1 AND `CustomerID` IS NULL) OR (`CustomerID` = ?)) AND ((? = 1 AND `EmployeeID` IS NULL) OR (`EmployeeID` = ?)) AND ((? = 1 AND `OrderDate` IS NULL) OR (`OrderDate` = ?)) AND ((? = 1 AND `RequiredDate` IS NULL) OR (`RequiredDate` = ?)) AND ((? = 1 AND `ShippedDate` IS NULL) OR (`ShippedDate` = ?)) AND ((? = 1 AND `ShipVia` IS NULL) OR (`ShipVia` = ?)) AND ((? = 1 AND `Freight` IS NULL) OR (`Freight` = ?)) AND ((? = 1 AND `ShipName` IS NULL) OR (`ShipName` = ?)) AND ((? = 1 AND `ShipAddress` IS NULL) OR (`ShipAddress` = ?)) AND ((? = 1 AND `ShipCity` IS NULL) OR (`ShipCity` = ?)) AND ((? = 1 AND `ShipRegion` IS NULL) OR (`ShipRegion` = ?)) AND ((? = 1 AND `ShipPostalCode` IS NULL) OR (`ShipPostalCode` = ?)) AND ((? = 1 AND `ShipCountry` IS NULL) OR (`ShipCountry` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OrderDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RequiredDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RequiredDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShippedDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShippedDate", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipVia", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipVia", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Freight", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Freight", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipAddress", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipAddress", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipCity", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCity", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipRegion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipRegion", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipPostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipPostalCode", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ShipCountry", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCountry", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CustomerID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CustomerID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "CustomerID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EmployeeID", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EmployeeID", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OrderDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OrderDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OrderDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RequiredDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RequiredDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RequiredDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RequiredDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShippedDate", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShippedDate", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShippedDate", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShippedDate", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipVia", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipVia", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipVia", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipVia", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Freight", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Freight", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Freight", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Freight", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipAddress", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipAddress", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipAddress", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipAddress", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipCity", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCity", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipCity", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCity", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipRegion", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipRegion", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipRegion", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipRegion", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipPostalCode", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipPostalCode", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipPostalCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipPostalCode", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ShipCountry", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCountry", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ShipCountry", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ShipCountry", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.NwindConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, Shi" & "pVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, Ship" & "Country FROM Orders"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As NwindDataSetGridView.OrdersDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As NwindDataSetGridView.OrdersDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As NwindDataSetGridView.OrdersDataTable = New NwindDataSetGridView.OrdersDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As NwindDataSetGridView.OrdersDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As NwindDataSetGridView) As Integer
			Return Me.Adapter.Update(dataSet, "Orders")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows As Global.System.Data.DataRow()) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_OrderID As Integer, ByVal Original_CustomerID As String, ByVal Original_EmployeeID As Global.System.Nullable(Of Integer), ByVal Original_OrderDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_RequiredDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_ShippedDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_ShipVia As Global.System.Nullable(Of Integer), ByVal Original_Freight As Global.System.Nullable(Of Decimal), ByVal Original_ShipName As String, ByVal Original_ShipAddress As String, ByVal Original_ShipCity As String, ByVal Original_ShipRegion As String, ByVal Original_ShipPostalCode As String, ByVal Original_ShipCountry As String) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Fix(Original_OrderID)))
			If (Original_CustomerID Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_CustomerID))
			End If
			If (Original_EmployeeID.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CInt(Fix(Original_EmployeeID.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (Original_OrderDate.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CDate(Original_OrderDate.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (Original_RequiredDate.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CDate(Original_RequiredDate.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			If (Original_ShippedDate.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CDate(Original_ShippedDate.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
			End If
			If (Original_ShipVia.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CInt(Fix(Original_ShipVia.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			End If
			If (Original_Freight.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CDec(Original_Freight.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			End If
			If (Original_ShipName Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_ShipName))
			End If
			If (Original_ShipAddress Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(18).Value = (CStr(Original_ShipAddress))
			End If
			If (Original_ShipCity Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(20).Value = (CStr(Original_ShipCity))
			End If
			If (Original_ShipRegion Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(21).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(22).Value = (CStr(Original_ShipRegion))
			End If
			If (Original_ShipPostalCode Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(23).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(24).Value = (CStr(Original_ShipPostalCode))
			End If
			If (Original_ShipCountry Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(25).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(25).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(26).Value = (CStr(Original_ShipCountry))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal CustomerID As String, ByVal EmployeeID As Global.System.Nullable(Of Integer), ByVal OrderDate As Global.System.Nullable(Of Global.System.DateTime), ByVal RequiredDate As Global.System.Nullable(Of Global.System.DateTime), ByVal ShippedDate As Global.System.Nullable(Of Global.System.DateTime), ByVal ShipVia As Global.System.Nullable(Of Integer), ByVal Freight As Global.System.Nullable(Of Decimal), ByVal ShipName As String, ByVal ShipAddress As String, ByVal ShipCity As String, ByVal ShipRegion As String, ByVal ShipPostalCode As String, ByVal ShipCountry As String) As Integer
			If (CustomerID Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = (CStr(CustomerID))
			End If
			If (EmployeeID.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = (CInt(Fix(EmployeeID.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			If (OrderDate.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CDate(OrderDate.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (RequiredDate.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = (CDate(RequiredDate.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			End If
			If (ShippedDate.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = (CDate(ShippedDate.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (ShipVia.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = (CInt(Fix(ShipVia.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Freight.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = (CDec(Freight.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (ShipName Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = (CStr(ShipName))
			End If
			If (ShipAddress Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = (CStr(ShipAddress))
			End If
			If (ShipCity Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(ShipCity))
			End If
			If (ShipRegion Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(ShipRegion))
			End If
			If (ShipPostalCode Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(11).Value = (CStr(ShipPostalCode))
			End If
			If (ShipCountry Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(12).Value = (CStr(ShipCountry))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal CustomerID As String, ByVal EmployeeID As Global.System.Nullable(Of Integer), ByVal OrderDate As Global.System.Nullable(Of Global.System.DateTime), ByVal RequiredDate As Global.System.Nullable(Of Global.System.DateTime), ByVal ShippedDate As Global.System.Nullable(Of Global.System.DateTime), ByVal ShipVia As Global.System.Nullable(Of Integer), ByVal Freight As Global.System.Nullable(Of Decimal), ByVal ShipName As String, ByVal ShipAddress As String, ByVal ShipCity As String, ByVal ShipRegion As String, ByVal ShipPostalCode As String, ByVal ShipCountry As String, ByVal Original_OrderID As Integer, ByVal Original_CustomerID As String, ByVal Original_EmployeeID As Global.System.Nullable(Of Integer), ByVal Original_OrderDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_RequiredDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_ShippedDate As Global.System.Nullable(Of Global.System.DateTime), ByVal Original_ShipVia As Global.System.Nullable(Of Integer), ByVal Original_Freight As Global.System.Nullable(Of Decimal), ByVal Original_ShipName As String, ByVal Original_ShipAddress As String, ByVal Original_ShipCity As String, ByVal Original_ShipRegion As String, ByVal Original_ShipPostalCode As String, ByVal Original_ShipCountry As String) As Integer
			If (CustomerID Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CStr(CustomerID))
			End If
			If (EmployeeID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CInt(Fix(EmployeeID.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			If (OrderDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CDate(OrderDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (RequiredDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CDate(RequiredDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			End If
			If (ShippedDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CDate(ShippedDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (ShipVia.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CInt(Fix(ShipVia.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Freight.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CDec(Freight.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (ShipName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CStr(ShipName))
			End If
			If (ShipAddress Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CStr(ShipAddress))
			End If
			If (ShipCity Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(ShipCity))
			End If
			If (ShipRegion Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(ShipRegion))
			End If
			If (ShipPostalCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CStr(ShipPostalCode))
			End If
			If (ShipCountry Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CStr(ShipCountry))
			End If
			Me.Adapter.UpdateCommand.Parameters(13).Value = (CInt(Fix(Original_OrderID)))
			If (Original_CustomerID Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CStr(Original_CustomerID))
			End If
			If (Original_EmployeeID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CInt(Fix(Original_EmployeeID.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
			End If
			If (Original_OrderDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CDate(Original_OrderDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
			End If
			If (Original_RequiredDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CDate(Original_RequiredDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
			End If
			If (Original_ShippedDate.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CDate(Original_ShippedDate.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
			End If
			If (Original_ShipVia.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CInt(Fix(Original_ShipVia.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
			End If
			If (Original_Freight.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CDec(Original_Freight.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
			End If
			If (Original_ShipName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CStr(Original_ShipName))
			End If
			If (Original_ShipAddress Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(31).Value = (CStr(Original_ShipAddress))
			End If
			If (Original_ShipCity Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(32).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(32).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(33).Value = (CStr(Original_ShipCity))
			End If
			If (Original_ShipRegion Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(34).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(34).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(35).Value = (CStr(Original_ShipRegion))
			End If
			If (Original_ShipPostalCode Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(36).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(36).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(37).Value = (CStr(Original_ShipPostalCode))
			End If
			If (Original_ShipCountry Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(38).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(38).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(39).Value = (CStr(Original_ShipCountry))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Public Partial Class QueriesTableAdapter
		Inherits Global.System.ComponentModel.Component

		Private _commandCollection As Global.System.Data.IDbCommand()

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.IDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			CType(Me._commandCollection(0), Global.System.Data.OleDb.OleDbCommand).Connection = New Global.System.Data.OleDb.OleDbConnection(My.Settings.Default.NwindConnectionString)
			CType(Me._commandCollection(0), Global.System.Data.OleDb.OleDbCommand).CommandText = "SELECT DISTINCT " & ControlChars.CrLf & "                         Employees.FirstName, Employees.LastName, Employees.Title, Employees.City, Employees.Country, Orders.ShipName, [Order Details].UnitPrice, " & ControlChars.CrLf & "                         [Order Details].Quantity" & ControlChars.CrLf & "FROM            ((Employees INNER JOIN" & ControlChars.CrLf & "                         Orders ON Employees.EmployeeID = Orders.EmployeeID) INNER JOIN" & ControlChars.CrLf & "                         [Order Details] ON Orders.OrderID = [Order Details].OrderID)"
			CType(Me._commandCollection(0), Global.System.Data.OleDb.OleDbCommand).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function AggregateSampleTable() As String
			Dim command As Global.System.Data.OleDb.OleDbCommand = (CType(Me.CommandCollection(0), Global.System.Data.OleDb.OleDbCommand))
			Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
			If ((command.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				command.Connection.Open()
			End If
			Dim returnValue As Object
			Try
				returnValue = command.ExecuteScalar()
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					command.Connection.Close()
				End If
			End Try
			If ((returnValue Is Nothing) OrElse (returnValue.GetType() Is GetType(Global.System.DBNull))) Then
				Return Nothing
			Else
				Return (CStr(returnValue))
			End If
		End Function
	End Class
End Namespace
