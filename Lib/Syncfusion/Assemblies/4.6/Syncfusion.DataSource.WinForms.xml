<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.DataSource.WinForms</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.DataSource.ISortDirection">
            <summary>
            Defines property to get the sort direction.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.ISortDirection.SortDirection">
            <summary>
            Gets or sets the sort direction.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Comparer">
            <summary>
            Compares the values of the objects.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Comparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.Comparer"/> class.
            </summary>
            <param name="culture">Represents the current culture info.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Comparer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Syncfusion.DataSource.Comparer"/> class from being created.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Comparer.Compare(System.Object,System.Object)">
            <summary>
            Comparison between the objects.
            </summary>
            <param name="a">Represents object a.</param>
            <param name="b">Represents object b.</param>
            <returns>Returns the integer value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.GroupResultComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.GroupResultComparer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupResultComparer.Compare(Syncfusion.DataSource.Extensions.GroupResult,Syncfusion.DataSource.Extensions.GroupResult)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.DataSource.GroupResultComparer.SortDirection">
            <summary>
            Gets or sets the direction for sorting.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.SortingComparer.#ctor(System.Collections.ObjectModel.ObservableCollection{Syncfusion.DataSource.SortDescriptor},System.Globalization.CultureInfo,System.Collections.Generic.IComparer{System.Object},System.Func{System.Object,System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.SortingComparer"/> class.
            </summary>
            <param name="sortFields">Represents the sorting fields.</param>
            <param name="culture">Represents the current culture info.</param>
            <param name="dataSourceComparer">Represents the dataSource comparer.</param>
            <param name="propertyInfoFunc">Represents the property info function.</param>
        </member>
        <member name="M:Syncfusion.DataSource.SortingComparer.Compare(System.Object,System.Object)">
            <summary>
            Provides comparison between the objects.
            </summary>
            <param name="x">Represents the first object.</param>
            <param name="y">Represents the second object.</param>
            <returns>Returns the integer value for further operations.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.SortingComparer.SortPropertyInfo">
            <summary>
            Determines the properties needed for sorting.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.ListOrdinalComparer.#ctor(System.Collections.Generic.IList{System.Object},System.Collections.Generic.IComparer{System.Object},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.ListOrdinalComparer"/> class.
            </summary>
            <param name="list">Represents the list of objects.</param>
            <param name="comparer">Represents the comparer.</param>
            <param name="removeAtIndex">Represents the index to remove the item.</param>
        </member>
        <member name="M:Syncfusion.DataSource.ListOrdinalComparer.Compare(System.Object,System.Object)">
            <summary>
            Provides comparison between the objects.
            </summary>
            <param name="x">Represents the first object.</param>
            <param name="y">Represents the second object.</param>
            <returns>Returns the integer value for further operations.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.DisplayItems">
            <summary>
            Virtual collection which hold the list of items to be displayed
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.#ctor(Syncfusion.DataSource.GroupList,System.Collections.Generic.IList{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.DisplayItems"/> class.
            </summary>
            <param name="groupList"> The <see cref="T:Syncfusion.DataSource.GroupList"/>.</param>
            <param name="source"> List of objects</param>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.IndexOf(System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="item">Represents the item.</param>
            <returns>Returns the integer value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Insert(System.Int32,System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="index">Represents the item index.</param>
            <param name="item">Represents the item.</param>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.RemoveAt(System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="index">Represents the item index.</param>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Add(System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="item">Represents the item.</param>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Clear">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Contains(System.Object)">
             <summary>
             Not implemented
             </summary>
             <param name="item">Represents the item.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.CopyTo(System.Object[],System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="array">Represents an array of the object.</param>
            <param name="arrayIndex">Represents the array index of the object.</param>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Remove(System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="item">Represents the item.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.GetEnumerator">
            <summary>
            Return the IEnumerator of <see cref="T:Syncfusion.DataSource.DisplayItems"/> 
            </summary>
            <returns>Returns the IEnumerator object.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Dispose">
            <summary>
            Perform final clean up before it is released from memory.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Dispose(System.Boolean)">
            <summary>
            Dispose the instances, if parameter is true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects.</param>
        </member>
        <member name="E:Syncfusion.DataSource.DisplayItems.PropertyChanged">
            <summary>
            Occurs when the property is changed for the data objects on the collection. 
            </summary>
        </member>
        <member name="E:Syncfusion.DataSource.DisplayItems.CollectionChanged">
            <summary>
            Occurs when an item is added or removed.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DisplayItems.Count">
            <summary>
            Gets the total number of display items
            </summary>
            <returns>Returns the integer value.</returns>
        </member>
        <member name="P:Syncfusion.DataSource.DisplayItems.IsReadOnly">
            <summary>
            Gets a value indicating whether <see cref="T:Syncfusion.DataSource.DisplayItems"/> is read only or not
            </summary>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="P:Syncfusion.DataSource.DisplayItems.Item(System.Int32)">
            <summary>
            Return the display item in the index
            </summary>
            <param name="index">Index of the display item</param>
            <returns>display item</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItemsEnumerator.#ctor(Syncfusion.DataSource.GroupList,System.Collections.Generic.IList{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.DisplayItemsEnumerator"/> class.
            </summary>
            <param name="groupList">Represents the group list.</param>
            <param name="source">Represents the list of objects.</param>
        </member>
        <member name="P:Syncfusion.DataSource.DisplayItemsEnumerator.Current">
            <summary>
            Gets the current object.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.DynamicHelper">
            <summary>
            Helper class to reflect dynamic objects and also maintains cache for faster reflection.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DynamicHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.Extensions.DynamicHelper"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DynamicHelper.CheckIsDynamicObject(System.Type)">
            <summary>
            Determines whether the specified type contains dynamic object.
            </summary>
            <param name="type">Represents the specified type.</param>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DynamicHelper.ValidateProperty(System.Dynamic.IDynamicMetaObjectProvider,System.String)">
            <summary>
            Determines whether the meta data contains the specified property name.
            </summary>
            <param name="dynamicMetaObjectProvider">Represents the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> object.</param>
            <param name="propName">Represents the property name.</param>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DynamicHelper.GetValue(System.Object,System.String)">
            <summary>
            Helper method to get the value from the specified property name.
            </summary>
            <param name="dynamicMetaObject">Represents the dynamic meta object.</param>
            <param name="propName">Represents the property name.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DynamicHelper.Dispose">
            <summary>
            Disposes all the allocated resource.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DynamicHelper.Dispose(System.Boolean)">
            <summary>
            Dispose the instances, if parameter is true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects.</param>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.EnumerableExtensions">
            <summary>
            Class which contains fields, properties, methods to perform basic operations such as sum, average, max, min and sorting.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int16}})">
            <summary>
            Determines the average of values.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the function expression.</param>
            <returns>Returns the double value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Determines the average of values.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the function expression.</param>
            <returns>Returns the double value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Average(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Determines the average of values.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <returns>Returns the double value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int16}}})">
            <summary>
            Determines the average of values.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the function expression.</param>
            <returns>Returns the double value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Determines the average of values.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the function expression.</param>
            <returns>Returns the double value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int16}})">
            <summary>
            Determines the average of values.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <returns>Returns the double value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int16}})">
            <summary>
            Determines the sum of values.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the sum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Determines the sum of values.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the sum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Determines the sum of values.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <returns>Returns the sum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int16}}})">
            <summary>
            Determines the sum of values.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the sum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Determines the sum of values.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the sum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int16}})">
            <summary>
            Determines the sum of values.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <returns>Returns the sum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Max``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int16}})">
            <summary>
            Gets the maximum value.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the maximum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Gets the maximum value.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the maximum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Max(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Gets the maximum value.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <returns>Returns the maximum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Max``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int16}}})">
            <summary>
            Gets the maximum value.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the maximum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Gets the maximum value.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the maximum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int16}})">
            <summary>
            Gets the maximum value.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <returns>Returns the maximum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Min``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int16}})">
            <summary>
            Gets the minimum value.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the minimum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Gets the minimum value.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the minimum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Min(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Gets the minimum value.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <returns>Returns the minimum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Min``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int16}}})">
            <summary>
            Gets the minimum value.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the minimum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Gets the minimum value.
            </summary>
            <typeparam name="TSource">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="selector">Represents the expression function.</param>
            <returns>Returns the minimum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int16}})">
            <summary>
            Gets the minimum value.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <returns>Returns the minimum value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{System.String,System.Object,System.Object})">
            <summary>
            Gets the sorting order.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="entities">Represents the collection entity.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="getFunc">Represents the function.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{System.String,System.Object,System.Object})">
            <summary>
            Gets the sorting order as descending.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="entities">Represents the collection entity.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="getFunc">Represents the function.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},System.String,System.Func{System.String,System.Object,System.Object})">
            <summary>
            Gets the sorting order.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="entities">Represents the collection entity.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="getFunc">Represents the function.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.ThenByDescending``1(System.Linq.IOrderedEnumerable{``0},System.String,System.Func{System.String,System.Object,System.Object})">
            <summary>
            Gets the sorting order.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="entities">Represents the collection entity.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="getFunc">Represents the function.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{System.String,System.Object,System.Object},System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Gets the sorting order.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="entities">Represents the collection entity.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="getFunc">Represents the function.</param>
            <param name="comparer">Represents the comparer.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{System.String,System.Object,System.Object},System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Sorts the items in descending order.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="entities">Represents the collection entity.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="getFunc">Represents the function.</param>
            <param name="comparer">Represents the comparer.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},System.String,System.Func{System.String,System.Object,System.Object},System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Gets the sorting order.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="entities">Represents the collection entity.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="getFunc">Represents the function.</param>
            <param name="comparer">Represents the comparer.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.ThenByDescending``1(System.Linq.IOrderedEnumerable{``0},System.String,System.Func{System.String,System.Object,System.Object},System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Gets the sorting order.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="entities">Represents the collection entity.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="getFunc">Represents the function.</param>
            <param name="comparer">Represents the comparer.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.GetElementType(System.Collections.IEnumerable)">
            <summary>
            Gets the element type.
            </summary>
            <param name="source">Represents the enumerable source.</param>
            <returns>Returns the source type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.EnumerableExtensions.GetItemPropertyInfo(System.Collections.IEnumerable)">
            <summary>
            Gets the property info.
            </summary>
            <param name="list">Represents the enumerable list.</param>
            <returns>Returns the property info.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.FunctionalExtensions">
            <summary>
            Functional method extensions
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.CreateNew``1(System.Type)">
            <summary>
            Creates the new instance constructor.
            </summary>
            <typeparam name="T">Represents the generic type.</typeparam>
            <param name="type">The type.</param>
            <returns>Returns the created instance.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.CreateNew(System.Type)">
            <summary>
            Creates the new instance constructor.
            </summary>
            <param name="type">Represents the type.</param>
            <returns>Returns the created instance.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Iterates over an IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates over a generic IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.ToList``1(System.Collections.IEnumerable)">
            <summary>
            Represents the enumerable collection to a list.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="items">Represents the enumerable items.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.IterateIndex``1(``0[],System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.IterateIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.IterateIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0},System.Int32)">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="items">Represents the items.</param>
            <param name="action">Represents the action.</param>
            <param name="index">Represents the item index.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Zips the parameters.
            </summary>
            <typeparam name="TFirst">Represents the first generic type parameter.</typeparam>
            <typeparam name="TSecond">Represents the second generic type parameter.</typeparam>
            <typeparam name="TResult">Represents the resultant generic type parameter.</typeparam>
            <param name="first">Represents the first parameter.</param>
            <param name="second">Represents the second parameter.</param>
            <param name="resultSelector">Represents the resultant function.</param>
            <returns>Returns the iterated value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.True``1">
            <summary>
            Trues this instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <returns>Returns the boolean value of the instance.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.False``1">
            <summary>
            False this instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <returns>Returns generic boolean value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Or the specified expression1.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="expression1">The expression1.</param>
            <param name="expression2">The expression2.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified expression1.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="expression1">The expression1.</param>
            <param name="expression2">The expression2.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.Fold``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the specified list.
            </summary>
            <typeparam name="T">The first generic type parameter.</typeparam>
            <typeparam name="U">The second generic type parameter.</typeparam>
            <param name="list">The list.</param>
            <param name="function">The function.</param>
            <param name="type">The type of the parameter.</param>
            <returns>Returns the specified type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.FoldLeft``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the left.
            </summary>
            <typeparam name="T">The first generic type parameter.</typeparam>
            <typeparam name="U">The second generic type parameter.</typeparam>
            <param name="list">The list.</param>
            <param name="function">The function.</param>
            <param name="type">The type of the parameter.</param>
            <returns>Returns the function.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.FoldRight``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the right.
            </summary>
            <typeparam name="T">The first generic type parameter.</typeparam>
            <typeparam name="U">The second generic type parameter.</typeparam>
            <param name="list">The list.</param>
            <param name="func">The function.</param>
            <param name="type">The type of the parameter.</param>
            <returns>Returns the type of the parameter.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.MoveTo(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Moves to.
            </summary>
            <param name="list">The list.</param>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts into ObservableCollection.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="items">Represents the enumerable items.</param>
            <returns>Returns the collection.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.FilterType">
            <summary>
            Specifies the FilterType to be used in LINQ methods.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.LessThan">
            <summary>
            Performs LessThan operation.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.LessThanOrEqual">
            <summary>
            Performs LessThan Or Equal operation.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.Equals">
            <summary>
            Checks Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.NotEquals">
            <summary>
            Checks for Not Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.GreaterThanOrEqual">
            <summary>
            Checks for Greater Than or Equal on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.GreaterThan">
            <summary>
            Checks for Greater Than on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.StartsWith">
            <summary>
            Checks for StartsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.EndsWith">
            <summary>
            Checks for EndsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.Contains">
            <summary>
            Checks for Contains on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.Undefined">
            <summary>
            Returns invalid type
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.Between">
            <summary>
            Checks for Between two date on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.FilterBehavior">
            <summary>
            Specifies the Filter Behavior for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterBehavior.StronglyTyped">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterBehavior.StringTyped">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.ColumnFilter">
            <summary>
            Specifies the Filter Behavior for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.ColumnFilter.Value">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.ColumnFilter.DisplayText">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.SortColumn">
            <summary>
            Representing the class that contains the columns that represents sorting, which contains 
            the column name that is sorted and sort direction.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.SortColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.SortColumn"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.SortColumn.ColumnName">
            <summary>
            Gets or sets the column name.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.SortColumn.SortDirection">
            <summary>
            Gets or sets the sorting direction.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.GroupContext">
            <summary>
            Class that contains the information of the group like child groups, items count, key, details of the group, etc.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.GroupContext"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.GroupContext.ChildGroups">
            <summary>
            Gets or sets the child groups.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.GroupContext.Count">
            <summary>
            Gets or sets the item count.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.GroupContext.Details">
            <summary>
            Gets or sets the enumerable collection.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.GroupContext.Key">
            <summary>
            Gets the key value.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.DynamicClass">
            <summary>
            Defines the dynamic class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DynamicClass.ToString">
            <summary>
            Returns the string that contains the properties and their values in the class.
            </summary>
            <returns>The string that contains the properties and their values in the class.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.DynamicProperty">
            <summary>
            Class that creates the dynamic property for the given name and type.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.DynamicProperty"/> class.
            </summary>
            <param name="name">Represents the property name.</param>
            <param name="type">Represents the type of the property.</param>
        </member>
        <member name="P:Syncfusion.DataSource.DynamicProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DynamicProperty.Type">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Signature.#ctor(System.Collections.Generic.IEnumerable{Syncfusion.DataSource.DynamicProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.Signature"/> class.
            </summary>
            <param name="properties">Represents the enumerable properties.</param>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.NullableHelperInternal.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Syncfusion.DataSource.Extensions.NullableHelperInternal"/> class from being created.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value">Represents the value.</param>
            <param name="type">Represents the type.</param>
            <returns>Returns the value</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value">Represents the value.</param>
            <param name="type">Represents the type of the object.</param>
            <param name="provider">Represents the format provider.</param>
            <returns>Returns the value</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.NullableHelperInternal.IsNullableType(System.Type)">
            <summary>
            Indicates whether the specified type is nullable type.
            </summary>
            <param name="nullableType">Represents the specified type.</param>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.NullableHelperInternal.GetNullableType(System.Type)">
            <summary>
            Gets the nullable type from the specified type.
            </summary>
            <param name="type">Represents the specified type.</param>
            <returns>Returns the nullable type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.NullableHelperInternal.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value">Represents the value for an object.</param>
            <param name="type">Represents the type of the object.</param>
            <returns>Returns the value</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type">Represents the type of the object.</param>
            <returns>Returns the type.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.NullableHelperInternal.TypeConverterHelper">
            <summary>
            Helper class to covert type of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.NullableHelperInternal.TypeConverterHelper.ChangeType(System.Object,System.Type)">
            <summary>
            Helper method to change the specified type.
            </summary>
            <param name="value">Represents the object.</param>
            <param name="type">Represents the specified type.</param>
            <returns>Returns the changed value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.NullableHelperInternal.TypeConverterHelper.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Helper method to change the specified type.
            </summary>
            <param name="value">Represents the object.</param>
            <param name="type">Represents the specified type.</param>
            <param name="provider">Represents the format provider.</param>
            <returns>Returns the changed value.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.DataSource.Extensions.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Syncfusion.DataSource.Extensions.ValueConvert"/> class from being created.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNullIfNotValid">Indicates whether exceptions should be avoided or cached and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNullIfNotValid">Indicates whether exceptions should be avoided or cached and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="stringValue">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable round tripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="stringValue">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable round tripping for formatted dates.
            </param>
            <param name="returnDbNullIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="stringValue">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable round tripping for formatted dates.
            </param>
            <param name="returnDbNullIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="numberFormatInfo">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString">Represents the string value.</param>
            <param name="returnValue">Represents the return value.</param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value">Represents the string value.</param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns>Returns the string value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in microsoft corporation library, the assembly name is appended.
            </summary>
            <param name="type">Represents the type.</param>
            <returns>Returns the assembly type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName">Represents the type name.</param>
            <returns>Returns the assembly name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="stringValue">Represents the string value.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString">Represents the string value.</param>
            <param name="retVal">Represents the return value.</param>
            <returns>Returns the parsed value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value">Represents the value for an object.</param>
            <returns>Returns the formatted string value.</returns>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Gets or sets a value indicating whether <see cref="M:Syncfusion.DataSource.Extensions.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.PropertyInfoExtensions">
            <summary>
            Class that provides the extension methods for the property info.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.PropertyInfoExtensions.GetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value for the given property info and the record.
            </summary>
            <param name="propertyInfo">The property info whose value is to be determined.</param>
            <param name="record">The object whose corresponding value for the given property is to be obtained.</param>
            <returns>The value for the given property info and the record.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.PropertyInfoExtensions.GetPropertyInfo(Syncfusion.DataSource.Extensions.PropertyInfoCollection,System.String)">
            <summary>
            Gets the property info from the given property info collection and the column name.
            </summary>
            <param name="propertyInfoCollection">The property info collection.</param>
            <param name="columnName">The column name whose property info is to be obtained.</param>
            <returns>The property info of the given property info collection and the column name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.PropertyInfoExtensions.SetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Sets the value for the corresponding object available in the PropertyInfo.
            </summary>
            <param name="propertyInfo">Represents the property info.</param>
            <param name="record">Represents the record.</param>
            <param name="value">Represents the value.</param>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.PropertyInfoCollection">
            <summary>
            Determines the set of properties and their information.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.PropertyInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.Extensions.PropertyInfoCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.PropertyInfoCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.Extensions.PropertyInfoCollection"/> class.
            </summary>
            <param name="type">Represents the type of the property.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.PropertyInfoCollection.Find(System.String,System.Boolean)">
            <summary>
            Finds the property info of the given column name in the property info collection.
            </summary>
            <param name="columnName">The column name for which the property info is to be obtained.</param>
            <param name="matchCase">A boolean value indicating whether to consider the casing or not.</param>
            <returns>The property info of the given column name.</returns>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.PropertyInfoCollection.Empty">
            <summary>
            Gets the empty collection.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.PropertyInfoCollection.Type">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.QueryableExtensions">
            <summary>
            Provides extension methods for Queryable source. 
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable(); </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as, </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OfQueryable(System.Collections.IEnumerable)">
            <summary>
            Determines the queryable which iterates over the given collection of items.
            </summary>
            <param name="items">Represents the enumerable collection of items.</param>
            <returns>Returns the queryable which iterates over the given collection of items.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OfQueryable(System.Collections.IEnumerable,System.Type)">
            <summary>
            Determines the queryable which iterates over the given collection of items
            </summary>
            <param name="items">Represents the enumerable collection of items.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable which iterates over the given collection of items.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.AndPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an AND binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expression1">Represents the expression1.</param>
            <param name="expression2">Represents the expression2.</param>
            <returns>Returns the binary expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.AndAlsoPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an ANDAlso binary expression for the given expressions.
            </summary>
            <param name="expression1">The expression 1.</param>
            <param name="expression2">The expression 2.</param>
            <returns>An ANDAlso binary expression for the given expressions.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrElsePredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OrElse binary expression for the given expressions.
            </summary>
            <param name="expression1">The expression 1.</param>
            <param name="expression2">The expression 2.</param>
            <returns>An OrElse binary expression for the given expressions.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Count(System.Linq.IQueryable)">
            <summary>
            Gets the execution times count of the given queryable source.
            </summary>
            <param name="source">The source which is to be queried.</param>
            <returns>The count of the execution times of the given queryable source.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ElementAt(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Gets the element at the given index and the source.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="index">The index at which the element is to be obtained.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The element at the given index and the source.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ElementAt(System.Linq.IQueryable,System.Int32)">
            <summary>
            Gets the element at the given index and the source.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="index">The index at which the element is to be obtained.</param>
            <returns>The element at the given index and the source.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ElementAtOrDefault(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Gets the element at or default of the given index and the source.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="index">The index at which the element is to be obtained.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The element at or default of the given index and the type of source.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ElementAtOrDefault(System.Linq.IQueryable,System.Int32)">
            <summary>
            Gets the element at or default of the given index and the source.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="index">The index at which the element is to be obtained.</param>
            <returns>The element at the given index and the source.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Syncfusion.DataSource.SortColumn},System.Type)">
            <summary>
            Gets the GroupBy query expression for the given source and enumerable collection of the sort columns.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="groupByNames">The enumerable collection of the sort columns group by names.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The GroupBy query expression for the given source and enumerable collection of the sort columns.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Syncfusion.DataSource.SortColumn})">
            <summary>
            Gets the GroupBy query expression for the given source and enumerable collection of the sort columns.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="groupByNames">The enumerable collection of the sort columns group by names.</param>
            <returns>The GroupBy query expression for the given source and enumerable collection of the sort columns.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Type)">
            <summary>
            Generates the GroupBy Expression
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="groupByName">Represents the group name.</param>
            <param name="sortAction">Represents the sort action.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String)">
            <summary>
            Gets the GroupBy query expression for the given source, group name and sort action.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="groupByName">The group by name which is the property name.</param>
            <param name="sortAction">The sort action.</param>
            <returns>The GroupBy query expression for the given source, group name and sort action.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OfType(System.Linq.IQueryable,System.Type)">
            <summary>
            Gets the queryable expression OfType for the given source and its type.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The queryable expression OfType for the given source and its type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OfType``2(System.Collections.ObjectModel.ObservableCollection{``1})">
            <summary>
            Gets the collection of the type parameter <typeparamref name="T"/> for the given collection of 
            type parameter <typeparamref name="K"/>.
            </summary>
            <typeparam name="T">The target type parameter.</typeparam>
            <typeparam name="K">The given type parameter.</typeparam>
            <param name="items">The collection of items.</param>
            <returns>The collection of the type parameter <typeparamref name="T"/> for the given collection of 
            type parameter <typeparamref name="K"/>.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderBy(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String)">
            <summary>
             Generates a OrderBy query for the Queryable source.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <returns>Returns the queryable source.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
             Generates a OrderBy query for the Queryable source.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="expressionFunc">Represents the function expression.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
             Generates a OrderBy query for the Queryable source.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="comparer">Represents the comparer object.</param>
            <param name="expressionFunc">Represents the expression function.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
             Generates a OrderBy query for the Queryable source.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="parameterExpression">Represents the parameter expression.</param>
            <param name="expression">Represents the expression.</param>
            <returns>Represents the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">The queryable source</param>
            <param name="comparer">The comparer</param>
            <param name="sourceType">The queryable source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0})">
            <summary>
             Generates a OrderBy query for the Queryable source and Comparer.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="comparer">Represents the comparer objects.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined and queryable source.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="comparer">Represents the comparer.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable source.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">Represents the queryable source</param>
            <param name="comparer">Represents the comparer.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Type)">
            <summary>
            Generates an OrderByDescending query for the IComparer and queryable source defined.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="comparer">Represents the comparer objects.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0})">
            <summary>
            Generates an OrderByDescending query for the IComparer and queryable source defined.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="comparer">Represents the comparer objects.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderByDescending(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source">Represents the queryable source</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GetExpression(System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression for the given property and the parameter expression.
            </summary>
            <param name="parameterExpression">The parameter expression based on which the expression is 
            generated.</param>
            <param name="propertyName">The property name for which the expression is to be generated.</param>
            <returns>The expression for the given property and the parameter expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GetValueExpression(System.Linq.Expressions.ParameterExpression,System.String,System.Type)">
            <summary>
            Generate expression from simple and complex property
            </summary>
            <param name="parameterExpression">Represents the parameter expression.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String)">
            <summary>
            Generates the OrderByDescending query for the given source and the property.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is to be generated.</param>
            <returns>The OrderByDescending query for the given source and the property.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates the OrderByDescending query for the given source, property, expression function and the comparer defined.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is to be generated.</param>
            <param name="comparer">The comparer defined for the query.</param>
            <param name="expressionFunction">The expression function based on which the query is to be generated.</param>
            <returns>Returns the queryable object.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates the OrderByDescending query for the given source, property and the expression function.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is to be generated.</param>
            <param name="expressionFunc">The expression function based on which the query is to be generated.</param>
            <returns>The OrderByDescending query for the given source, property and the expression function.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Generates the OrderByDescending query for the given source and expressions.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression which are the objects to populate to the 
            parameter collection of the lambda expression.</param>
            <param name="expression">The expression to set the lambda expression body property equals to.</param>
            <returns>The OrderByDescending query for the given source and expressions.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OR binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expression1">Represents the expression1.</param>
            <param name="expression2">Represents the expression2.</param>
            <returns>Returns the binary expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Parameter(System.Linq.IQueryable)">
            <summary>
            Creates a ParameterExpression that is required when building a series of
            predicates for the WHERE filter.
            <para></para>
            <code lang="C#">        DataClasses1DataContext db = new
            DataClasses1DataContext();
                    var orders = db.Orders.Skip(0).Take(100).ToList();
                    var queryable = orders.AsQueryable();
                    var parameter =
            queryable.Parameter();</code>
            <para></para>
            <para></para>Use this same parameter passed to generate different predicates and
            finally to generate the Lambda.
            </summary>
            <remarks>
            If we specify a parameter for every predicate, then the Lambda expression scope
            will be out of the WHERE query that gets generated.
            </remarks>
            <param name="source">Represents the queryable source.</param>
            <returns>Returns the parameter expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Parameter(System.Type)">
            <summary>
            Generates the parameter expression for the given source type.
            </summary>
            <param name="sourceType">The source type.</param>
            <returns>The parameter expression for the given source type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Equal(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates the equal expression for the given parameter expression, property and value.
            </summary>
            <param name="parameterExpression">The parameter expression based on which the expression 
            is generated.</param>
            <param name="propertyName">The property name for which the expression is to be generated.</param>
            <param name="value">The object.</param>
            <returns>The equal expression for the given parameter expression, property and value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Equal(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates an equal binary expression for the given expression and the property name.
            </summary>
            <param name="parameterExpression">The parameter expression for generating the binary expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>An equal binary expression for the given expression and the property name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Equal(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates an equal expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name for which the expression is generated.</param>
            <param name="value">The object.</param>
            <param name="elementType">The type of the element.</param>
            <param name="expressionFunction">The expression function.</param>
            <returns>An equal expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.NotEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a NotEqual expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name for which the expression is generated.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunction">The expression function.</param>
            <returns>A NotEqual expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.NotEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a NotEqual binary expression for the given parameter expression, property and the value.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name for which the expression is to be generated.</param>
            <param name="value">The object.</param>
            <returns>A NotEqual binary expression for the given parameter expression, property and the value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.NotEqual(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates an NotEqual binary expression for the given expression and property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>An NotEqual binary expression for the given expression and property.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GreaterThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a GreaterThanOrEqual binary expression for the given expression, property and the value.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <returns>A GreaterThanOrEqual binary expression for the given expression, property and the value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GreaterThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates a GreaterThanOrEqual binary expression for the given expressions and the property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>A GreaterThanOrEqual binary expression for the given expressions and the property.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GreaterThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a GreaterThanOrEqual binary expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunc">The expression function.</param>
            <returns>A GreaterThanOrEqual binary expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GreaterThan(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a GreaterThan binary expression for the given parameter expression, property and the value.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <returns>A GreaterThan binary expression for the given parameter expression, property and the value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GreaterThan(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates a GreaterThan binary expression for the given expression and the property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>A GreaterThan binary expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GreaterThan(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a GreaterThan expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunction">The expression function.</param>
            <returns>A GreaterThan expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.LessThan(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a LessThan binary expression for the given expression, property and the values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <returns>A LessThan binary expression for the given expression, property and the values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.LessThan(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates a LessThan binary expression for the given expression and the property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>A LessThan binary expression for the given expression and the property.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.LessThan(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a LessThan expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunction">The expression function.</param>
            <returns>A LessThan expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.LessThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a LessThanOrEqual binary expression for the given expression, property and the value.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <returns>A LessThanOrEqual binary expression for the given expression, property and the value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.LessThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates a LessThanOrEqual binary expression for the given expression and property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>A LessThanOrEqual binary expression for the given expression and property.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.LessThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a LessThanOrEqual expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunction">The expression function.</param>
            <returns>A LessThanOrEqual expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.DataSource.FilterType,Syncfusion.DataSource.FilterBehavior,System.Boolean,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression. 
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source">Represents the queryable source.</param>
            <param name="parameterExpression">Represents the parameter expression.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="constantValue">Represents the constant value.</param>
            <param name="filterType">Represents the filter value.</param>
            <param name="filterBehavior">Represents the filter behavior.</param>
            <param name="isCaseSensitive">Determines whether is in case sensitive.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.DataSource.FilterType,Syncfusion.DataSource.FilterBehavior,System.Boolean,System.Type,System.String)">
            <summary>
            Generates a predicate expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="constantValue">The object.</param>
            <param name="filterType">The filter type.</param>
            <param name="filterBehavior">The filter behavior.</param>
            <param name="isCaseSensitive">A boolean values indicating whether to consider the expression with case sensitive.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="format">Represents the current format.</param>
            <returns>A predicate expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.DataSource.FilterType,Syncfusion.DataSource.FilterBehavior,System.Boolean,System.Type,System.Delegate)">
            <summary>
            Generates a predicate expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="constantValue">The object.</param>
            <param name="filterType">The filter type.</param>
            <param name="filterBehavior">The filter behavior.</param>
            <param name="isCaseSensitive">A boolean values indicating whether to consider the expression with case sensitive.</param>
            <param name="sourceType">The type of the source</param>
            <param name="expressionFunction">The expression function.</param>
            <returns>A predicate binary expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,Syncfusion.DataSource.FilterType,Syncfusion.DataSource.FilterBehavior,System.Boolean,System.Type,System.Delegate)">
            <summary>
            Generates a predicate expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="constantValue">The object.</param>
            <param name="memberType">The member type.</param>
            <param name="filterType">The filter type.</param>
            <param name="filterBehavior">The filter behavior.</param>
            <param name="isCaseSensitive">A boolean values indicating whether to consider the expression with case sensitive.</param>
            <param name="sourceType">The type of the source</param>
            <param name="expressionFunction">The expression function.</param>
            <returns>A predicate binary expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single property value.
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String)">
            <summary>
            Generates a Select query for the given source and property.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is generated.</param>
            <returns>A Select query for the given source and property.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String[])">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new string[]{
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="properties">Represents the properties.</param>
            <returns>Returns queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new List&lt;string&gt;() {
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            <para></para>
            <para>It returns a dynamic class generated thru ReflectionEmit, Use reflection
            to identify the properties and values.</para>
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="properties">Represents the properties.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a Select query based on the given source and the properties passed.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="properties">The enumerable collection of properties.</param>
            <returns>A Select query based on the given source and the properties passed.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a SKIP expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The constant value.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Generates a SKIP expression for the given IQueryable source and the constant value.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="constValue">The constant value.</param>
            <returns>A SKIP expression for the given IQueryable source and the constant value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a TAKE expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The constant value.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Generates a TAKE expression for the given IQueryable source and the constant value.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="constValue">The constant value.</param>
            <returns>A TAKE expression for the given IQueryable source and the constant value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenBy query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenBy(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String)">
            <summary>
            Generates a ThenBy query expression for the given queryable source and property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>A ThenBy query expression for the queryable source and property name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a ThenBy query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">The comparer.</param>
            <param name="expressionFunc">The expression function.</param>
            <returns>A ThenBy query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a ThenBy query expression for the given source, property and the expression function.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression function.</param>
            <returns>A ThenBy query expression for the given source, property and the expression function.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Generates a ThenBy query expression for the given source and the expressions.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="expression">The expression.</param>
            <returns>A ThenBy query expression for the given source and the expressions.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">Represents the queryable source.</param>
            <param name="comparer">Represents the comparer.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Type)">
            <summary>
            Generates an ThenBy query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name. </param>
            <param name="comparer">The comparer.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>An ThenBy query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0})">
            <summary>
            Generates an ThenBy query expression for the given source and the comparer for the given type.
            </summary>
            <typeparam name="T">The type parameter.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer.</param>
            <returns>An ThenBy query expression for the given source and the comparer for the given type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">Represents the source.</param>
            <param name="comparer">Represents the comparer.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Type)">
            <summary>
            Generates an ThenByDescending query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name. </param>
            <param name="comparer">The comparer.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>An ThenByDescending query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0})">
            <summary>
            Generates an ThenByDescending query expression for the given source and the comparer for the given type.
            </summary>
            <typeparam name="T">The type parameter.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer.</param>
            <returns>An ThenByDescending query expression for the given source and the comparer for the given type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a ThenByDescending query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">The comparer.</param>
            <param name="expressionFunc">The expression function.</param>
            <returns>A ThenByDescending query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a ThenByDescending query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression function.</param>
            <returns>A ThenByDescending query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Generates a ThenByDescending query expression for the given source and the expressions.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="expression">The expression.</param>
            <returns>A ThenByDescending query expression for the given source and the expressions.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenByDescending query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenByDescending(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String)">
            <summary>
            Generates a ThenByDescending query for the given source and the property.
            </summary>
            <param name="source">The IQueryable source</param>
            <param name="propertyName">The property name.</param>
            <returns>A ThenByDescending query for the given source and the property.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.DataSource.FilterType,System.Boolean,System.Type)">
            <summary>
            Generates the where expression.
            <para></para>
            <code lang="C#">            var nw = new Northwind(@&quot;Data Source =
            Northwind.sdf&quot;);
                        IQueryable queryable = nw.Orders.AsQueryable();
                        var filters = queryable.Where(&quot;ShipCountry&quot;,
            &quot;z&quot;, FilterType.Contains);
                        foreach (Orders item in filters)
                        {
                            Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID,
            item.ShipCountry);
                        }</code>
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">Represents the value.</param>
            <param name="filterType">Represents the filter value.</param>
            <param name="isCaseSensitive">Determines whether is in case sensitive.</param>
            <param name="sourceType">Represents the type of source.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.DataSource.FilterType,System.Boolean)">
            <summary>
            Generates the where expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The object.</param>
            <param name="filterType">The filter type.</param>
            <param name="isCaseSensitive">A boolean value indicating whether the expression should be considered as case sensitive or not.</param>
            <returns>The where expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Page(System.Linq.IQueryable,System.Int32,System.Int32)">
            <summary>
            Generates the page expression for the given source, page index and page size.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="pageIndex">The index of the page.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>The page expression for the given source, page index and page size.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Use this function to generate WHERE expression based on Predicates. The
            AndPredicate and OrPredicate should be used in combination to build the
            predicate expression which is finally passed on to this function for creating a
            Lambda. 
            <para></para>
            <para></para>
            <para></para>DataClasses1DataContext database = new DataClasses1DataContext();
            <para></para>            var orders = database.Orders.Skip(0).Take(100).ToList();
            <para></para>            var queryable = orders.AsQueryable();
            <para></para>            var parameter =
            queryable.Parameter(&quot;ShipCountry&quot;);
            <para></para>            var binaryExpression = queryable.Predicate(parameter,
            <para></para>&quot;ShipCountry&quot;, &quot;USA&quot;, true);
            <para></para>            var filteredOrders = queryable.Where(parameter,
            binaryExpression);
            <para></para>            foreach (var order in filteredOrders)
            <para></para>            {
            <para></para>                Console.WriteLine(order);
            <para></para>            }
            <para></para>
            <para></para>
            <para></para>Build Predicates for Contains / StartsWith / EndsWith,
            <para></para>
            <para></para>            IQueryable queryable = model.Orders.AsQueryable();
            <para></para>            var parameter = queryable.Parameter();
            <para></para>            var expression1 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;h&quot;, FilterType.Contains);
            <para></para>            var expression2 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;a&quot;, FilterType.StartsWith);
            <para></para>            var andExpression = expression2.OrPredicate(expression1);
            <para></para>            var filters = queryable.Where(parameter, andExpression);
            <para></para>            foreach (Orders item in filters)
            <para></para>            {
            <para></para>                Console.WriteLine(&quot;{0}/{1}&quot;,
            item.OrderID, item.ShipCountry);
            <para></para>            }
            <para></para>
            </summary>
            <param name="source">Represents the source.</param>
            <param name="parameterExpression">Represents the parameter expression.</param>
            <param name="predicateExpression">Represents the predicate expression.</param>
            <returns>Returns the queryable objects.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.IEnumerable,System.Type,System.Collections.Generic.List{System.Func{``0,System.Object}})">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type parameter.</typeparam>
            <param name="source">The enumerable collection of the elements.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="groupKeySelectors">The function for the group selectors.</param>
            <returns>Returns the enumerable collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.DataSource.SortDescriptor},System.Collections.Generic.IEnumerable{System.Func{``0,System.Object}})">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type of the elements.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="groupSelectors">The enumerable collection of the function for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.DataSource.SortDescriptor},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IComparer{System.Object}},System.String[],System.Collections.Generic.IEnumerable{System.Func{``0,System.Object}})">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type of the elements.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="sortComparers">The sort comparers collection.</param>
            <param name="properties">The array of properties.</param>
            <param name="groupSelectors">The enumerable collection of the function for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.DataSource.SortDescriptor},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IComparer{System.Object}},System.Collections.Generic.List{System.String},System.Func{``0,System.Object}[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type parameter.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="sortComparers">The sort comparers collection.</param>
            <param name="properties">The array of properties.</param>
            <param name="groupSelectors">The function for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.DataSource.SortDescriptor},System.Func{``0,System.Object}[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type of the elements.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="groupSelectors">The function for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type of the elements.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="groupSelectors">The function for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Func{``0,System.Object}})">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type parameter.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="groupSelectors">The enumerable collection of function for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates the GroupResult enumerable collection based on the given source and the properties passed.
            </summary>
            <param name="source">The IQueryable source</param>
            <param name="properties">The enumerable collection of properties.</param>
            <returns>The GroupResult enumerable collection based on the given source and the properties passed.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Type,System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given source and the properties.
            </summary>
            <param name="source">The IQueryable source</param>
            <param name="sourceType">The type of the source.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given source and the properties.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Collections.Generic.Dictionary{System.String,System.String},System.Type,System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="formatCollection">The dictionary of format collection.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Type,System.Collections.Generic.List{Syncfusion.DataSource.SortDescriptor},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Collections.IEnumerable,System.Type,System.Func{System.String,System.Linq.Expressions.Expression},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="getExpressionFunc">The expression function.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Collections.IEnumerable,System.Type,System.Collections.Generic.List{Syncfusion.DataSource.SortDescriptor},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IComparer{System.Object}},System.Func{System.String,System.Linq.Expressions.Expression},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IEnumerable source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="sortComparers">The dictionary of sort comparers.</param>
            <param name="getExpressionFunc">The expression function.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Collections.IEnumerable,System.Type,System.Collections.Generic.List{Syncfusion.DataSource.SortDescriptor},System.Func{System.String,System.Linq.Expressions.Expression},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IEnumerable source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="getExpressionFunc">The expression function.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.String[])">
            <summary>
            Generates the GroupResult enumerable collection for the given source and the properties passed.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection for the given source and the properties passed.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="formatCollection">The dictionary of format collection.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection for the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupByMany(System.Data.DataView,System.Type,System.Func{System.String,System.Linq.Expressions.Expression},System.String[])">
            <summary>
            Generates the groups for the DataTable.
            </summary>
            <param name="source">The DataView source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="getExpressionFunc">The expression function.</param>
            <param name="properties">The array of properties.</param>
            <returns>The groups for the DataTable.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GetObjectType(System.Linq.IQueryable)">
            <summary>
            Gets the type of the given source.
            </summary>
            <param name="source">The source, whose type is to be obtained.</param>
            <returns>The type of the given object.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Sum(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Calculates the result by executing the expression obtained from the queryable sum method based on the given source type and property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The result by executing the expression obtained from the queryable sum method based on the given source type and property name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Sum(System.Linq.IQueryable,System.String)">
            <summary>
            Calculates the result by executing the expression obtained from the queryable sum method based on the given source and property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>The result by executing the expression obtained from the queryable sum method based on the given source and property name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Sum(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Calculates the result by executing the expression obtained from the queryable sum method based on the given source, property and the expression function.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression function.</param>
            <returns>The result by executing the expression obtained from the queryable sum method based on the given source, property and the expression function.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Average(System.Linq.IQueryable,System.String)">
            <summary>
            Calculates the average by executing the expression obtained from the queryable average method based on the given source and the property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>The average by executing the expression obtained from the queryable average method based on the given source and the property name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Average(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Calculates the average by executing the expression obtained from the queryable average method based on the given source and the property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The source type.</param>
            <returns>The average by executing the expression obtained from the queryable average method based on the given source and the property name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Average(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Calculates the average by executing the expression obtained from the queryable average method based on the given source, property name and the expression function.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression function.</param>
            <returns>The average by executing the expression obtained from the queryable average method based on the given source, property name and the expression function.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Max(System.Linq.IQueryable,System.String)">
            <summary>
            Calculates the max object by executing the expression obtained from the queryable max method based on the given source and the property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>The max object by executing the expression obtained from the queryable max method based on the given source and the property name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Max(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Calculates the max object by executing the expression obtained from the queryable max method based on the given source and the property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The source type.</param>
            <returns>The max object by executing the expression obtained from the queryable max method based on the given source and the property name.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Max(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Calculates the max object by executing the expression obtained from the queryable max method based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression function.</param>
            <returns>The max object by executing the expression obtained from the queryable max method based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Min(System.Linq.IQueryable,System.String)">
            <summary>
            Calculates the min object by executing the expression obtained from the queryable min method based on the given source and the property.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>The min object by executing the expression obtained from the queryable min method based on the given source and the property.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Min(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Calculates the min object by executing the expression obtained from the queryable min method based on the given source and the property.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The source type.</param>
            <returns>The min object by executing the expression obtained from the queryable min method based on the given source and the property.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Min(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Calculates the min object by executing the expression obtained from the queryable min method based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression function.</param>
            <returns>The min object by executing the expression obtained from the queryable min method based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GetLambdaWithComplexPropertyNullCheck(System.Collections.IEnumerable,System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates lambda expression for the complex properties
            </summary>
            <param name="source">Represents the queryable source.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="parameterExpression">Represents the parameter expression.</param>
            <param name="sourceType">Represents the source type.</param>
            <returns>Returns the lambda expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GetDelegateInvokeExpressionAggregateFunc``1(System.Linq.Expressions.ParameterExpression,System.String,System.Delegate)">
            <summary>
            Use this method with a cached delegate, this improves performance when using complex Expressions.
            </summary>
            <typeparam name="TResult">Generic type parameter.</typeparam>
            <param name="paramExp">Represents the parameter expression.</param>
            <param name="propertyName">Represents the property name.</param>
            <param name="expressionFunc">Represents the expression function.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.GroupResult">
            <summary>
            Class that holds the information of the group like key, count, items and etc.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.GroupResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.GroupResult.ToString">
            <summary>
            Returns the result of the group, which contains the key and the items count in the group.
            </summary>
            <returns>The result of the group, which contains the key and the items count in the group.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.GroupResult.Expand">
            <summary>
            Expands the group. 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.GroupResult.Collapse">
            <summary>
            Collapses the group.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.GroupResult.GetChangedItems(Syncfusion.DataSource.Extensions.GroupResult,System.Boolean,System.Collections.Generic.List{System.Object})">
            <summary>
            Adds list of group and records in changesItems, that are coming into the view when expanding or that are going out of the view when collapsing. 
            Based on changed Items count the rows will be added or removed in ListView. 
            </summary>
            <param name="group">Denotes the group.</param>
            <param name="canAddSubItems">Indicates whether sub group or items can be added in changedItems. Will be passed as true if group in expanded state. </param>
            <param name="changedItems">Indicates the list of changed items.</param>
            <returns>Returns the list of changed items.</returns>
        </member>
        <member name="E:Syncfusion.DataSource.Extensions.GroupResult.PropertyChanged">
            <summary>
            Occurs when the property is changed for the data objects on the collection. 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.Key">
            <summary>
            Gets or sets the Key of the group.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.Count">
            <summary>
            Gets the number of items in this group.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.Items">
            <summary>
            Gets the collection of items in this group.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.SubGroups">
            <summary>
            Gets the collection of sub groups within this group.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.IsExpand">
            <summary>
            Gets a value indicating whether group is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.Level">
             <summary>
            Gets the level of grouping.
             </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.NamespaceDoc">
            <summary>
            Provides classes that simplify programming by providing ready-made solution to process the IEnumerable and IQueryable operations. 
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.ReflectionExtensions">
            <summary>
            Class which contains properties, methods which helps to reflect the internal methods or fields and also to acquire their values.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.GetProperties(System.Type)">
            <summary>
            Reflection helper method to get the properties from the mentioned type.
            </summary>
            <param name="type">Represents the type from which the properties has to be obtained.</param>
            <returns>Returns the properties</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Reflection method to determine whether the source type can be assigned to destination type.
            </summary>
            <param name="type">Represents the source type.</param>
            <param name="typeInfo">Represents the destination type.</param>
            <returns>Returns the boolean value whether the source type can to assigned to destination type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.BaseType(System.Type)">
            <summary>
            Reflection method to get the base type.
            </summary>
            <param name="type">Represents the base type.</param>
            <returns>Returns the base type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.IsPrimitive(System.Type)">
            <summary>
            Reflection method to check whether the obtained type is primitive type.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <returns>Returns the boolean value regarding the obtained type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.IsGenericType(System.Type)">
            <summary>
            Reflection method to check whether the obtained type is generic type. Can be a generic type definition, an open constructed type, or a closed constructed type.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <returns>Returns the boolean value regarding the obtained type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.IsInterface(System.Type)">
            <summary>
            Reflection method to check whether the obtained type is an interface.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <returns>Returns the boolean value regarding the obtained type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.IsAbstract(System.Type)">
            <summary>
            Reflection method to check whether the obtained type is abstract.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <returns>Returns the boolean value regarding the obtained type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.IsValueType(System.Type)">
            <summary>
            Reflection method to check whether the obtained type is value type. 
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <returns>Returns the boolean value regarding the obtained type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.IsEnum(System.Type)">
            <summary>
            Reflection method to check whether the obtained type is enumerated type. 
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <returns>Returns the boolean value regarding the obtained type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.IsGenericTypeDefinition(System.Type)">
            <summary>
            Reflection method to check whether the obtained type is generic type. A constructed type is created by calling the MakeGenericType method
             on a Type object that represents a generic type definition and specifying an array of type arguments.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <returns>Returns the boolean value regarding the obtained type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.GetCulture(System.Globalization.CultureInfo)">
            <summary>
            Reflection method to obtain the current culture.
            </summary>
            <param name="info">Represents the culture info.</param>
            <returns>Returns the string value of determining the culture info.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.GetMethods(System.Type)">
            <summary>
            Helper method to get the methods from the specified base type.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <returns>Returns the enumerable collection of method names.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.GetMember(System.Type,System.String)">
            <summary>
            Helper method to get the members from the specified base type.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <param name="name">Represents the name of the member function which is to be determined.</param>
            <returns>Returns the enumerable collection of member functions from the specified type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Helper method to get a particular method from the specified type.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <param name="name">Represents the name of the method which is to be determined.</param>
            <param name="types">Represents the types from which the method is to be obtained.</param>
            <returns>Returns the obtained method info.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.GetProperty(System.Type,System.String)">
            <summary>
            Helper method to get a particular property from the specified type.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <param name="name">Represents the name of the property which is to be determined.</param>
            <returns>Returns the obtained property info.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.ReflectionExtensions.GetGenericArguments(System.Type)">
            <summary>
            Helper method to get generic arguments from the specified type.
            </summary>
            <param name="type">Represents the type which is to be determined.</param>
            <returns>Returns the generic type arguments.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.GroupList">
            <summary>
            Collection of <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/> 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.#ctor(Syncfusion.DataSource.DataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.GroupList"/> class.
            </summary>
            <param name="dataSource">Represents the DataSource.</param>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.AddItemInGroup(System.Object,System.Int32)">
            <summary>
            Adds item to the <see cref="T:Syncfusion.DataSource.GroupList"/> 
            </summary>
            <param name="item">object to be added in <see cref="T:Syncfusion.DataSource.GroupList"/> </param>
            <param name="index">index of the object </param>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.RemoveItemInGroup(System.Object)">
            <summary>
            Removes item from the  <see cref="T:Syncfusion.DataSource.GroupList"/> 
            </summary>
            <param name="item">object to be removed from the <see cref="T:Syncfusion.DataSource.GroupList"/> </param>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.RefreshSortingOrderForGroups(System.Collections.Generic.List{Syncfusion.DataSource.Extensions.GroupResult},Syncfusion.DataSource.SortDescriptor,System.Collections.Generic.IComparer{Syncfusion.DataSource.Extensions.GroupResult})">
            <summary>
            Compare and sort the groups.
            </summary>
            <param name="group">Indicates the list of groups</param>
            <param name="sortKey">Indicates the <see cref="T:Syncfusion.DataSource.SortDescriptor"/> </param>
            <param name="groupComparer">Indicates the group comparer.</param>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.RemoveItemInGroup(System.Collections.Generic.List{Syncfusion.DataSource.Extensions.GroupResult},System.Object,System.Int32@,System.Collections.Generic.List{System.Object}@,System.Int32)">
            <summary>
            Removes items from the groups and its sub-groups if available. Updates the Groups and GroupList collection accordingly.
            </summary>
            <param name="groupResultList">Represents the list of groups.</param>
            <param name="item">Represents the item which is to be deleted.</param>
            <param name="startIndex">References the index from which the collection has been changed.</param>
            <param name="changedItems">References the list of changed items.</param>
            <param name="topLevel">Represents the parent group level.</param>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.GetChangedItems(Syncfusion.DataSource.Extensions.GroupResult,System.Collections.Generic.List{System.Object},System.Object)">
            <summary>
            Adds the groups and items to changed items list. Based on this list, the rows will be removed in ListView.
            </summary>
            <param name="parentGroup">Represents the <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/>.</param>
            <param name="changedItems">Represents the list of changed items which is to be removed.</param>
            <param name="item">Represents the item which is to be removed.</param>
            <returns>Returns the list of items to be removed from the collection.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.DataSourceHelper">
            <summary>
            Helper class to which contains exceptional properties and methods to obtain most commonly used values. 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSourceHelper.GetGroupLastItem(Syncfusion.DataSource.Extensions.GroupResult)">
            <summary>
            Returns the last item of the group
            </summary>
            <param name="group"> <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/>.</param>
            <returns> The object</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSourceHelper.GetGroupLastItem(System.Collections.Generic.List{Syncfusion.DataSource.Extensions.GroupResult})">
            <summary>
            Returns the last item from the list of groups
            </summary>
            <param name="groupList"> The list of groups</param>
            <returns>The object</returns>
        </member>
        <member name="T:Syncfusion.DataSource.CollectionViewFlags">
            <summary>
            Defines the options to refresh the source in the <see cref="T:Syncfusion.DataSource.DataSource"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.CollectionViewFlags.NeedToRefresh">
            <summary>
            Checks whether the content needs to be refreshed.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.LiveDataUpdateMode">
            <summary>
            Defines the options to refresh the collection when modify data at runtime.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.LiveDataUpdateMode.Default">
            <summary>
            Does not update the collection at run-time.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.LiveDataUpdateMode.AllowDataShaping">
            <summary>
            Allows updating the collection at run-time.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.ListSortDirection">
            <summary>
            Defines the sort directions for <see cref="T:Syncfusion.DataSource.SortDescriptor"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.ListSortDirection.Ascending">
            <summary>
            Sorts the list items in ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.ListSortDirection.Descending">
            <summary>
            Sorts the list items in descending order.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.PredicateType">
            <summary>
            Predicate type defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.PredicateType.And">
            <summary>
            Does an AND operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.PredicateType.Or">
            <summary>
            Does an OR operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.FilterOperatorType">
            <summary>
            Default Filter Operator is defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterOperatorType.Equals">
            <summary>
            Does an Equals operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterOperatorType.StartsWith">
            <summary>
            Does an StartsWith operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterOperatorType.Contains">
            <summary>
            Does an Contains operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.IFilterDefinition">
            <summary>
            Interface that holds the information of the Filtering like Mapping Name, filter predicate, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.IFilterDefinition.MappingName">
            <summary>
            Gets or sets the name of the mapping.
            </summary>
            <value>The name of the mapping.</value>
        </member>
        <member name="P:Syncfusion.DataSource.IFilterDefinition.FilterPredicates">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Syncfusion.DataSource.IFilterDefinition.FilterBehavior">
            <summary>
            Gets or sets the Filter behavior for the column.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.DataSource.FilterDefinition">
            <summary>
            Class to inherit the interface values that holds the information of the Filtering like Mapping Name, filter predicate, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.FilterDefinition.FilterBehavior">
            <summary>
            Gets or sets the filter behavior for the specified filter filter predicates.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.FilterDefinition.FilterPredicates">
            <summary>
            Gets the filter predicates values for filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.FilterDefinition.MappingName">
            <summary>
            Gets or sets the mapping name for filter.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.FilterPredicate">
            <summary>
            Holds values for Filtering.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.FilterPredicate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.FilterPredicate"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.FilterType">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.FilterValue">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.PredicateType">
            <summary>
            Gets or sets the type of the predicate.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.FilterBehavior">
            <summary>
            Gets or sets the type of the filter behavior.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether this instance is case sensitive.
            </summary>
            <value>
            <b>true</b> if this instance is case sensitive; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Syncfusion.DataSource.QueryableCollectionViewExtensions">
            <summary>
            Represents the class that maintains the collection view of type queryable collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.QueryableCollectionViewExtensions.GetPredicateExpressionExt(Syncfusion.DataSource.DataSource,System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            Gets the predicate expression for the given source and parameter expression.
            </summary>
            <param name="dataSource">The DataSource.</param>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <returns>The predicate expression for the given source and parameter expression.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.QueryableCollectionViewExtensions.GetPredicateExpressionExt(Syncfusion.DataSource.DataSource,System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression@,System.String,System.Boolean)">
            <summary>
            Gets the predicate expression for the given source and parameter expression.
            </summary>
            <param name="dataSource">The DataSource.</param>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="columnName">The column name.</param>
            <param name="returnExpression">A boolean value indicating whether to return the column 
            expression.</param>
            <returns>The predicate expression for the given values.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.GroupDescriptor">
            <summary>
            Represents a struct that contains the grouping information like property name to be grouped  
            and key selector based on which grouping for a property is processed. 
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.GroupDescription">
            <summary>
            Represents a class that defines the basic methods and properties for grouping the data in the 
            collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.GroupDescription"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupDescription.ShouldSerializeGroupNames">
            <summary>
            Determines whether to serialize group names or not.
            </summary>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="E:Syncfusion.DataSource.GroupDescription.PropertyChanged">
            <summary>
            Occurs when the property is changed for the data objects on the collection. 
            </summary>
        </member>
        <member name="E:Syncfusion.DataSource.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when the property is changed for the data objects on the collection. 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.GroupDescription.GroupNames">
            <summary>
            Gets the group names. 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.GroupDescriptor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.GroupDescriptor"/> class.
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:Syncfusion.DataSource.GroupDescriptor.#ctor(System.String,System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.GroupDescriptor"/> class.
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="keySelector">Key selector</param>
        </member>
        <member name="P:Syncfusion.DataSource.GroupDescriptor.KeySelector">
            <summary>
            Gets or sets the KeySelector.Groups are created based on the key return.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.GroupDescriptor.PropertyName">
            <summary>
            Gets or sets the Property Name
            </summary>
            <value> Represents the string value.</value>
        </member>
        <member name="P:Syncfusion.DataSource.GroupDescriptor.Comparer">
            <summary>
            Gets or sets the Comparer.
            </summary>
            <value>IComparer of GroupResult.</value>
        </member>
        <member name="T:Syncfusion.DataSource.PropertyChangingEventHandler">
            <summary>
            Represents the method that will handle the INotifyPropertyChanging.PropertyChanging
            event of an INotifyPropertyChanging interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.Data.Portable.PropertyChangingEventArgs">PropertyChangingEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.DataSource.INotifyPropertyChanging">
            <summary>
            Interface to help notify the property changed events.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.PropertyChangingEventArgs">
            <summary>
            Class which inherits from the <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.PropertyChangingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.PropertyChangingEventArgs"/> class.
            </summary>
            <param name="propertyName">Represents the property name.</param>
        </member>
        <member name="P:Syncfusion.DataSource.PropertyChangingEventArgs.PropertyName">
            <summary>
            Gets the name of the property whose value is changing.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Nullable`1">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.Nullable`1"/> structure.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.Nullable`1"/> struct.
            </summary>
            <param name="value">Represents the generic value.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable`1.op_Implicit(`0)~Syncfusion.DataSource.Nullable{`0}">
            <summary>
            Determines the generic value implicitly.
            </summary>
            <param name="value">Represents the generic parameter value.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable`1.op_Explicit(Syncfusion.DataSource.Nullable{`0})~`0">
            <summary>
            Determines the generic value explicitly.
            </summary>
            <param name="value">Represents the generic parameter value.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable`1.GetValueOrDefault">
            <summary>
            Get the default value.
            </summary>
            <returns>Returns the internal value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable`1.GetValueOrDefault(`0)">
            <summary>
            Helper method to get the internal or default value.
            </summary>
            <param name="defaultValue">Represents the generic type parameter.</param>
            <returns>Returns the parameter value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable`1.Equals(System.Object)">
            <summary>
            Override method to check whether the internal value is equal to obtained value.
            </summary>
            <param name="other">Represents the obtained object.</param>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable`1.GetHashCode">
            <summary>
            Override method to get the HashCode.
            </summary>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable`1.ToString">
            <summary>
            Override method to convert the specified value into string value.
            </summary>
            <returns>Returns the string value accordingly.</returns>
        </member>
        <member name="P:Syncfusion.DataSource.Nullable`1.HasValue">
            <summary>
            Gets a value indicating whether object has a value. 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Nullable`1.Value">
            <summary>
            Gets the generic type value.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Nullable">
            <summary>
            Class which represents the generic type nullable values.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable.Compare``1(Syncfusion.DataSource.Nullable{``0},Syncfusion.DataSource.Nullable{``0})">
            <summary>
            Helper method to compare the nullable objects.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="nullable1">Represents the first nullable object.</param>
            <param name="nullable2">Represents the second nullable object.</param>
            <returns>Returns the integer value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable.Equals``1(Syncfusion.DataSource.Nullable{``0},Syncfusion.DataSource.Nullable{``0})">
            <summary>
            Helper method to check whether the obtained nullable values are equal or not.
            </summary>
            <typeparam name="T">Represents the generic type parameter.</typeparam>
            <param name="nullable1">Represents the first nullable object.</param>
            <param name="nullable2">Represents the second nullable object.</param>
            <returns>Returns the boolean value accordingly.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Nullable.GetUnderlyingType(System.Type)">
            <summary>
            Helper method to get the underlying type of the nullable.
            </summary>
            <param name="nullableType">Represents the specified type.</param>
            <returns>f the type provided is not a Nullable Type, return null.
            Otherwise, returns the underlying type of the Nullable type</returns>
        </member>
        <member name="T:Syncfusion.DataSource.SortDescriptor">
            <summary>
            Represents a struct that contains the sorting information like property name to be sorted and sort direction based on which sorting for a property is processed.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.SortDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.SortDescriptor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.SortDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.SortDescriptor"/> class.
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:Syncfusion.DataSource.SortDescriptor.#ctor(System.String,Syncfusion.DataSource.ListSortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.SortDescriptor"/> class.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="direction">The sort direction</param>
        </member>
        <member name="E:Syncfusion.DataSource.SortDescriptor.PropertyChanged">
            <summary>
            Occurs when the property is changed for the data objects on the collection. 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.SortDescriptor.Direction">
            <summary>
            Gets or sets the Sorting Direction
            </summary>
            <value>The List Sort Direction.</value>
        </member>
        <member name="P:Syncfusion.DataSource.SortDescriptor.PropertyName">
            <summary>
            Gets or sets the Property Name
            </summary>
            <value>Represents the string value.</value>
        </member>
        <member name="P:Syncfusion.DataSource.SortDescriptor.Comparer">
            <summary>
            Gets or sets the Comparer.
            </summary>
            <value>IComparer of object.</value>
        </member>
        <member name="T:Syncfusion.DataSource.DataSource">
            <summary>
            DataSource is a non UI component that consumes raw data and processes data operations such as sorting, filtering and grouping. This can be applied to any data bound control to perform the data processing and data operations which saving developers time and effort in building the functionality themselves.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.DataSource.isInEndeferal">
            <summary>
            Notify to wire and unwire the property changed event whenever the underlying collection changed.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.DataSource.editItem">
            <summary>
            Store the object for editing and commit the value to underlying source after editing completed. 
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.DataSource.isInCommitEdit">
            <summary>
            Commits the edited object to the underlying source
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.DataSource.currentAddItem">
            <summary>
            Returns currently added object
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.DataSource"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.RefreshFilter">
            <summary>
            Refresh the <see cref="T:Syncfusion.DataSource.DataSource"/>. Raises the <see cref="!:Syncfusion.Data.DataSource.SfDataSource.FilterChanged"/> Event 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.Refresh">
            <summary>
            Refreshes the <see cref="T:Syncfusion.DataSource.DataSource"/>
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.DeferRefresh">
            <summary>
            Refresh the <see cref="T:Syncfusion.DataSource.DataSource"/> and halt 
            </summary>
            <returns>Represents the IDispose.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.CancelEdit">
            <summary>
            Cancel the the editing
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.GetItemAt(System.Int32)">
            <summary>
            Returns the item in the index
            </summary>
            <param name="index">The index of the item</param>
            <returns>Returns the item in the index.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.EndEdit">
            <summary>
            End the editing of object
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.CommitEdit">
            <summary>
            Commit the editing of object.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.EditItem(System.Object)">
            <summary>
            Initiates the editing of an item
            </summary>
            <param name="item">Item to edit</param>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.AddNew">
            <summary>
            Adds the new object of source type to source
            </summary>
            <returns>The object added object</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.CancelNew">
            <summary>
            Removes the added item
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.CommitNew">
            <summary>
            Commits the newly added object to source
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.Dispose">
            <summary>
            Disposes all available resources.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.BeginInit">
            <summary>
            Suspend the events and initiate changes
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.EndInit">
            <summary>
            End Suspending events and changes and deferRefresh the <see cref="T:Syncfusion.DataSource.DataSource"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.GetDataTableValue(System.Object,System.String)">
            <summary>
            Gets the value of property from the given object.
            </summary>
            <param name="item">The object</param>
            <param name="propertyName">Property name</param>
            <returns>The value</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.IsFilterChangedWired">
            <summary>
            Checks whether the <see cref="E:Syncfusion.DataSource.DataSource.FilterChanged"/> event is wired or not.
            </summary>
            <returns>Returns true it the <see cref="E:Syncfusion.DataSource.DataSource.FilterChanged"/> wired, otherwise returns false.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.SetActiveComparer">
            <summary>
            Helper method to initialize the comparer object.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.GetActiveComparer">
            <summary>
            Helper method to get the active comparer object.
            </summary>
            <returns>Returns the comparer object.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.Dispose(System.Boolean)">
            <summary>
            Dispose the instances, if parameter is true.
            </summary>
            <param name="disposing">Represents the boolean value for disposing objects</param>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.NotifyPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the source property change
            </summary>
            <param name="sender"> The object.</param>
            <param name="e">Represents the <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.GetValue(System.Object,System.String)">
            <summary>
            Gets the value of property from the given object
            </summary>
            <param name="item">The object</param>
            <param name="propertyName">Property name</param>
            <returns>The value</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.GetSourceListCollection">
            <summary>
            Returns the IList of source.
            </summary>
            <returns>Returns the IList.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.GetRemovedItems">
            <summary>
            Helper method to get removed items from source by comparing with items collection.Where when using Realm DB, e.OldItem became null, so use this helper to find deleted items and update Groups
            </summary>
            <returns>Returns the list of removed items from source collection that exist in items collection</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.SourceListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handles the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event.
            </summary>
            <param name="sender">The original sender of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.DataSource.DataSource.SourcePropertyChanged">
            <summary>
            Occurs when source property Changed
            </summary>
        </member>
        <member name="E:Syncfusion.DataSource.DataSource.SourceCollectionChanged">
            <summary>
            Occurs when source collection changed
            </summary>
        </member>
        <member name="E:Syncfusion.DataSource.DataSource.FilterChanged">
            <summary>
            Occurs when filter changed
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.CanRemove">
            <summary>
            Gets a value indicating whether object can be removed from source
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.CanAddNew">
            <summary>
            Gets a value indicating whether new object can be added or not
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.IsEditingItem">
            <summary>
            Gets a value indicating whether is in editing or not 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.CurrentEditItem">
            <summary>
            Gets current editing item 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.CanCancelEdit">
            <summary>
            Gets a value indicating whether editing can be cancelled or not 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.CurrentAddItem">
            <summary>
            Gets or sets the currently added item.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.IsAddingNew">
            <summary>
            Gets a value indicating whether adding new object or not
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.IsDynamicBound">
            <summary>
            Gets or sets a value indicating whether this instance is dynamic bound.
            </summary>
            <value>
            <b>true</b> if this instance is dynamic bound; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.FilterPredicates">
            <summary>
            Gets or sets the filter predicates.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.AutoExpandGroups">
            <summary>
            Gets or sets a value indicating whether groups has to expand automatically or not.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.DisplayItems">
            <summary>
            Gets the list of items to be displayed 
            </summary>
            <value>The display items.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.Filter">
            <summary>
            Gets or sets the filter for the underlying collection
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.GroupDescriptors">
            <summary>
            Gets the collection of group descriptors.
            </summary>
            <value>The group descriptor.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.Groups">
            <summary>
            Gets the list of groups 
            </summary>
            <value>The Group List.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.Source">
            <summary>
            Gets or sets the Source of the <see cref="T:Syncfusion.DataSource.DataSource"/>.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.Items">
            <summary>
            Gets the list of items. Contains filtered data 
            </summary>
            <value>The List of items.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.LiveDataUpdateMode">
            <summary>
            Gets or sets the live data update mode of the <see cref="T:Syncfusion.DataSource.DataSource"/>.
            </summary>
            <value>The live data update mode.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.SortDescriptors">
            <summary>
            Gets the collection of sort descriptors. 
            </summary>
            <value>The collection of sort descriptor.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.SortComparer">
            <summary>
            Gets or sets the SortComparer.This will be considered when comparer in <see cref="T:Syncfusion.DataSource.SortDescriptor"/> is null.
            </summary>
            <value>IComparer of object.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.SourceType">
            <summary>
            Gets or sets the source type of the underlying source
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.GroupComparer">
            <summary>
            Gets or sets the GroupComparer.This will be considered when  comparer in <see cref="T:Syncfusion.DataSource.GroupDescriptor"/> is null.
            </summary>
            <value>IComparer of GroupResult.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.IsGrouping">
            <summary>
            Gets a value indicating whether the source have grouped.
            </summary>
            <value>A boolean value that indicates whether the source have grouped.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.IsInSuspend">
            <summary>
            Gets or sets a value indicating whether the view is suspended from updates. 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.IsLegacyDataTable">
            <summary>
            Gets a value indicating whether the underlying data object is <see cref="T:System.Data.DataTable"/>.
            </summary>
            <value>
            <b>True</b> if the underlying data object is DataTable, otherwise <b>false</b>.
            </value>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.DeferHelper.#ctor(Syncfusion.DataSource.DataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.DataSource.DeferHelper"/> class.
            </summary>
            <param name="dataSource">Represents the <see cref="T:Syncfusion.DataSource.DataSource"/>.</param>
        </member>
        <member name="T:Syncfusion.DataSource.NamespaceDoc">
            <summary>
            Provides classes, enumerators and interfaces to processes the data operations such as sorting, filtering, and grouping, saving developers time and effort in building the functionality themselves.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.DataTableDataSource">
            <summary>
            DataTableDataSource is a non UI component that consumes DataTable type data and processes data operations such as sorting, filtering and grouping. 
            This can be applied to any data bound control to perform the data processing and data operations which saving developers time 
            and effort in building the functionality themselves.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.DataTableDataSource"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.RefreshFilter">
            <summary>
            Refreshes the view when the filtering is applied using the FilterPredicates.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.AddNew">
            <summary>
            Adds a new item to the collection.
            </summary>
            <returns>The new item that is added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.CancelNew">
            <summary>
            Ends the add transaction and discards the pending new item.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.CommitNew">
            <summary>
            Ends the add transaction and saves the pending new item.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.GetDataTableValue(System.Object,System.String)">
            <summary>
            Gets the value of property from the given object.
            </summary>
            <param name="item">The object</param>
            <param name="propertyName">Property name</param>
            <returns>The value</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.GetFilterString(System.String,System.Boolean)">
            <summary>
            Gets the filter string from the given view.
            </summary>
            <param name="columnName">The column name.</param>
            <param name="returnColumnExpression">A boolean value indicating whether to return the column
             expression.</param>
            <returns>The filter string from the given view.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.InitializeItems">
            <summary>
            Initialize the items to the <see cref="T:Syncfusion.DataSource.DataTableDataSource"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.FilterRecord(System.Object)">
            <summary>
            Filters the record for the specified record condition.
            </summary>
            <param name="record">The record to filter the data.</param>
            <returns>
            By default return true, since DataTable not support the filter record support.
            </returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.RefreshSort">
            <summary>
            Refreshes the sorting.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.GetGroupResult">
            <summary>
            Gets the IEnumerable collection of group result for the array of group-by.
            </summary>
            <returns>The IEnumerable collection of group result for the array of group-by.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.GetGroupExpressionFunc(System.String)">
            <summary>
            Returns the expression function for corresponding property name, data operation and reflection mode.
            </summary>
            <param name="propertyName">The property name.</param>        
            <returns>The expression function for corresponding property name, data operation and reflection mode.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.GetGroupFunc(System.String)">
            <summary>
            Get the Group function for CustomGrouping.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>Returns the group function.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.GetValue(System.Object,System.String)">
            <summary>
            Gets the value of property from the given object.
            </summary>
            <param name="item">The object</param>
            <param name="propertyName">Property name</param>
            <returns>The value</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataTableDataSource.GetSortString">
            <summary>
            Gets the sort string based on the property and sorting direction.
            </summary>
            <returns>Returns the sort string.</returns>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.DataSetExtensions">
            <summary>
            Extension class that helps for sorting, grouping and filter operations of the data table.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.Extensions.DataSetExtensions.pattern">
            <summary>
            The string pattern.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.EscapeSpecialChars(System.String)">
            <summary>
            Method to skip special characters from given string.
            </summary>
            <param name="value">The string value.</param>
            <returns>Returns the string without special characters.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.Predicate(System.String,System.String,System.Object,Syncfusion.DataSource.FilterType)">
            <summary>
            Creates the filter predicate based on the property, value and filter type.
            </summary>
            <param name="thisString">The string value.</param>
            <param name="property">The property name.</param>
            <param name="value">The value which is used to create the filter predicate.</param>
            <param name="filterType">The filter type.</param>
            <returns>Returns the predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.AndPredicate(System.String)">
            <summary>
            Creates the And filter predicate.
            </summary>
            <param name="thisString">The string value.</param>
            <returns>Returns the predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.OrderBy(System.String,System.String)">
            <summary>
            Creates the ascending sorting string based on the property name.
            </summary>
            <param name="thisString">The string value.</param>
            <param name="propertyName">The property name.</param>
            <returns>Returns the ascending sorting string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.OrderByDescending(System.String,System.String)">
            <summary>
            Creates the descending sorting string based on the property name.
            </summary>
            <param name="thisString">The string value.</param>
            <param name="propertyName">The property name.</param>
            <returns>Returns the descending sorting string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.ThenBy(System.String,System.String)">
            <summary>
            Format the ascending order string based on the property name.
            </summary>
            <param name="thisString">The string value.</param>
            <param name="propertyName">The property name.</param>
            <returns>Returns the ascending order string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.ThenByDescending(System.String,System.String)">
            <summary>
            Creates the descending order string based on the property name.
            </summary>
            <param name="thisString">The string value.</param>
            <param name="propertyName">The property name.</param>
            <returns>Returns the descending order string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.OrPredicate(System.String)">
            <summary>
            Creates the OR filter predicate string.
            </summary>
            <param name="thisString">The string value.</param>
            <returns>Returns the OR predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.Equals(System.String,System.Object)">
            <summary>
            Creates the predicate string for equal operator.
            </summary>
            <param name="property">The property name.</param>
            <param name="value">The value to compare.</param>
            <returns>Returns the equal operator predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.NotEquals(System.String,System.Object)">
            <summary>
            Creates the predicate string for not equal operator.
            </summary>
            <param name="property">The property name.</param>
            <param name="value">The value to compare.</param>
            <returns>Returns the not equal operator predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.GreaterThan(System.String,System.Object)">
            <summary>
            Creates the predicate string for greater than operator.
            </summary>
            <param name="property">The property name.</param>
            <param name="value">The value to compare.</param>
            <returns>Returns the greater than operator predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.LessThan(System.String,System.Object)">
            <summary>
            Creates the predicate string for less than operator.
            </summary>
            <param name="property">The property name.</param>
            <param name="value">The value to compare.</param>
            <returns>Returns the less than operator predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.GreaterThanOrEquals(System.String,System.Object)">
            <summary>
            Creates the predicate string for greater than or equal operator.
            </summary>
            <param name="property">The property name.</param>
            <param name="value">The value to compare.</param>
            <returns>Returns the greater than or equal operator predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.LessThanOrEquals(System.String,System.Object)">
            <summary>
            Creates the predicate string for less than or equal operator.
            </summary>
            <param name="property">The property name.</param>
            <param name="value">The value to compare.</param>
            <returns>Returns the less than or equal operator predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.StartsWith(System.String,System.Object)">
            <summary>
            Creates the predicate string for starts with operator.
            </summary>
            <param name="property">The property name.</param>
            <param name="value">The value to compare.</param>
            <returns>Returns the starts with operator predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.EndsWith(System.String,System.Object)">
            <summary>
            Creates the predicate string for ends with operator.
            </summary>
            <param name="property">The property name.</param>
            <param name="value">The value to compare.</param>
            <returns>Returns the ends with operator predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.Contains(System.String,System.Object)">
            <summary>
            Creates the predicate string for contains operator.
            </summary>
            <param name="property">The property name.</param>
            <param name="value">The value to compare.</param>
            <returns>Returns the contains operator predicate string.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.DataSetExtensions.EscapeLikeValue(System.String)">
            <summary>
            Insert [ wildcard ] in LIKE Queries.
            </summary>
            <param name="property">The property name.</param>
            <returns>Returns the string.</returns>
        </member>
    </members>
</doc>
