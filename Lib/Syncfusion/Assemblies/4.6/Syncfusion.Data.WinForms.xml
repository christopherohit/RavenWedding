<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Data.WinForms</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Data.ColumnGroupDescription">
            <summary>
            The ColumnGroupDescription class introduced to set the comparer value in the GrupColumnDesription. 
            While we can add the comparer into the view through the ColumnGroupDescription. Describes the 
            Grouping of Items using the ColumnName, Comparer and Converter as Criteria.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ColumnGroupDescription.#ctor(System.String,System.Func{System.String,System.Object,System.Object})">
            <summary>
            Initializes a new instance of the ColumnGroupDescription class.
            </summary>
            <param name="propertyName">The property name which is to be grouped.</param>
            <param name="keySelector">The keySelector for custom grouping.</param>
        </member>
        <member name="P:Syncfusion.Data.ColumnGroupDescription.SortGroupRecords">
            <summary>
            Gets or sets the value that indicates whether to sort the inner records of group while using custom grouping. 
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>        
            By default, grouped columns records are not sorted as the values of all the records in one group will be same. So, only groups will be sorted based on group key. 
            In custom grouping cases, grouped columns records value may differ. So in this case, you can sort the records of group by setting SortGroupRecords property to true. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Data.ColumnGroupDescription.KeySelector">
            <summary>
            Get or set the KeySeletor for custom grouping.
            </summary>
            <value>The KeySeletor for custom grouping.</value>
        </member>
        <member name="T:Syncfusion.Data.CollectionViewAdv">
            <summary>
            The class that maintains the collection view of the SfDataGrid and provides functionalities of current record management, custom sorting, filtering, and grouping.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.ICollectionViewAdv">
            <summary>
            Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.ISupportInitialize">
            <summary>
            Defines methods that support initialization in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ISupportInitialize.BeginInit(System.Boolean)">
            <summary>
            Signals the object that initialization is starting and so suspends all the data operations in view. 
            </summary>
            <param name="isProgrammatic">The flag IsProgrammatic helps to resume the UI update while IsInDeferRefresh is true.</param>
        </member>
        <member name="M:Syncfusion.Data.ISupportInitialize.EndInit">
            <summary>
            Signals the object that initialization is complete and hence resumes the data operations and reinitialize the view.   
            </summary>
        </member>
        <member name="T:Syncfusion.Data.IPropertyChangedEventHandler">
            <summary>
            Defines the method that handles the property change.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IPropertyChangedEventHandler.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event.
            </summary>
            <param name="sender">The original sender.</param>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Data.IEditableCollectionView">
            <summary>
            Defines methods and properties that a System.Windows.Data.CollectionView implements to provide editing capabilities to a collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IEditableCollectionView.AddNew">
            <summary>
            Adds a new item to the collection.
            </summary>
            <returns>The new item that is added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.IEditableCollectionView.CancelEdit">
            <summary>
            Ends the edit transaction and, if possible, restores the original value to the item.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IEditableCollectionView.CancelNew">
            <summary>
            Ends the add transaction and discards the pending new item.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IEditableCollectionView.CommitEdit">
            <summary>
            Ends the edit transaction and saves the pending changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IEditableCollectionView.CommitNew">
            <summary>
            Ends the add transaction and saves the pending new item.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IEditableCollectionView.EditItem(System.Object)">
            <summary>
            Begins an edit transaction of the specified item.
            </summary>
            <param name="item">The item to edit.</param>
        </member>
        <member name="M:Syncfusion.Data.IEditableCollectionView.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position from the collection.
            </summary>
            <param name="index">The position of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or greater than the number of items in the collection view.</exception>
        </member>
        <member name="P:Syncfusion.Data.IEditableCollectionView.CanAddNew">
            <summary>
            Gets a value that indicates whether a new item can be added to the collection.
            </summary>
            <value><b>True</b> if a new item can be added to the collection, otherwise<b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.Data.IEditableCollectionView.CanCancelEdit">
            <summary>
            Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.
            </summary>
            <retruns><b>True</b> if the collection view can discard pending changes and restore the original values of an edited object; otherwise, <b>false</b>.</retruns>
        </member>
        <member name="P:Syncfusion.Data.IEditableCollectionView.CanRemove">
            <summary>
            Gets a value that indicates whether an item can be removed from the collection.
            </summary>
            <value><b>True</b> if an item can be removed from the collection, otherwise <b>false</b>.</value>   
        </member>
        <member name="P:Syncfusion.Data.IEditableCollectionView.CurrentAddItem">
            <summary>
            Gets the item that is being added during the current add transaction.
            </summary>
            <value> The item that is being added if <see cref="P:Syncfusion.Data.IEditableCollectionView.IsAddingNew"/> is true, otherwise null.</value>
        </member>
        <member name="P:Syncfusion.Data.IEditableCollectionView.CurrentEditItem">
            <summary>
            Gets the item in the collection that is being edited.
            </summary>
            <value>The item in the collection that is being edited if <see cref="P:Syncfusion.Data.IEditableCollectionView.IsEditingItem"/> is true, otherwise null.</value>
        </member>
        <member name="P:Syncfusion.Data.IEditableCollectionView.IsAddingNew">
            <summary>
            Gets a value that indicates whether an add transaction is in progress.
            </summary>
            <value><b>True</b> if an add transaction is in progress, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.Data.IEditableCollectionView.IsEditingItem">
            <summary>
            Gets a value that indicates whether an edit transaction is in progress.
            </summary>
            <value><b>True</b> if an edit transaction is in progress, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.Data.IEditableCollectionView.NewItemPlaceholderPosition">
            <summary>
            Gets or sets the position of the new item placeholder in the collection view.
            </summary>
            <value>One of the enumeration values of <see cref="T:Syncfusion.Data.NewItemPlaceholderPosition"/> that specifies the position of the new item placeholder in the collection view.</value>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.CreateRecordEntry(System.Object)">
            <summary>
            Creates the <see cref="T:Syncfusion.Data.RecordEntry"/> for associated data object.
            </summary>
            <param name="data">The data object to create <see cref="T:Syncfusion.Data.RecordEntry"/>.</param>
            <returns>
            The <see cref="T:Syncfusion.Data.RecordEntry"/> for the specified data object.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.GetPropertyAccessProvider">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.ItemPropertiesProvider"/> which handles the reflection for <see cref="T:Syncfusion.Data.CollectionViewAdv"/>.
            </summary>
            <returns>
            Returns the <see cref="T:Syncfusion.Data.ItemPropertiesProvider"/> which handles the reflection for <see cref="T:Syncfusion.Data.CollectionViewAdv"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.GetItemProperties">
            <summary>
            Gets the collection of item properties, that contains the property and its information.
            </summary>
            <returns>The collection of item properties, that contains the property and its information.</returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.FilterRecord(System.Object)">
            <summary>
            Filters the record in the collection for the specified record condition.
            </summary>
            <param name="record">The record to be filtered in the collection.</param>
            <returns>
            <b>True</b> if the filter condition is satisfied, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.RefreshFilter(System.Boolean)">
            <summary>
            Refreshes the view when the filtering is applied through <see cref="M:Syncfusion.Data.ICollectionViewAdv.FilterRecord(System.Object)"/> delegate.
            </summary>
            <param name="isProgrammatic">A boolean value indicating whether filtering is done programmatically.</param>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.GetRecordAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.RecordEntry"/> at the specified index.
            </summary>
            <param name="index">The index to get the record.</param>
            <returns>
            Returns the <see cref="T:Syncfusion.Data.RecordEntry"/> for the specified index.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the <see cref="E:Syncfusion.Data.CollectionViewAdv.CollectionChanged"/> event with the provided arguments.
            </summary>
            <param name="args">
            A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.GetSelectedRecords">
            <summary>
            Gets the selected records to calculate the summaries.
            </summary>
            <returns>Returns the selected records</returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.DeferRefresh">
            <summary>
            Get a disposable DeferHelper to suspends the all data operations in View. 
            </summary>
            <returns>Returns disposable DeferHelper to do the bulk changes</returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.Refresh">
            <summary>
            Refreshes the view.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.IsDynamicBound">
            <summary>
            Gets or sets the value that indicates whether the data object is <see cref="N:System.Dynamic"> dynamic</see>. 
            </summary>
            <value>
            <b>True</b> if the data object is dynamic, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.Records">
            <summary>
            Gets the records collection of the collection view, which includes the records displayed 
            in the view.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.IRecordsList"/> of records which includes the records displayed 
            in the view.
            </value>
            <remarks>
            When the <see cref="!:Syncfusion.UI.Xaml.Grid.GroupColumnDescription"/> are added, the groups are maintained in <see cref="P:Syncfusion.Data.TopLevelGroup.DisplayElements"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.TopLevelGroup">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.TopLevelGroup"/> of the collection view, which maintains the group information 
            when the <see cref="!:UI.Xaml.Grid.GroupColumnDescription"/> is added into <see cref="!:UI.Xaml.Grid.SfDataGrid.GroupColumnDescriptions"/> collection. 
            Top-level group will be the first-level group. All groups will have the root group which is the 
            top-level group.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.TopLevelGroup"/> which maintains the group information of the collection view, which maintains the group information 
            when the <see cref="!:UI.Xaml.Grid.GroupColumnDescription"/> is added into <see cref="!:UI.Xaml.Grid.SfDataGrid.GroupColumnDescriptions"/> collection. 
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.CaptionSummaryRow">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the group caption summary information of the collection view.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the group caption summary information of the collection view.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.SummaryRows">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the summary rows information of the collection view.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the summary rows information of the collection view.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.TableSummaryRows">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the table summary rows information.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains table summary rows information.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.SortComparers">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.SortComparers">SortComparers</see> to sort the data using custom logic.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.SortComparers">SortComparers</see> which contains the custom logic for sorting.
            </value>
        </member>
        <member name="E:Syncfusion.Data.ICollectionViewAdv.RecordPropertyChanged">
            <summary>
            Occurs when the property is changed for the data objects on the collection. 
            </summary>
            <remarks>
            The data object should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </remarks>
        </member>
        <member name="E:Syncfusion.Data.ICollectionViewAdv.SourceCollectionChanged">
            <summary>
            Occurs when the underlying source collection is changed.
            </summary>
            <remarks>
            The data object should implement the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.
            </remarks>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.IsLegacyDataTable">
            <summary>
            Gets a value that indicates whether the underlying data object is <see cref="T:System.Data.DataTable"/>.
            </summary>
            <value>
            <b>True</b> if the underlying data object is DataTable, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.FilterPredicates">
            <summary>
            Gets or sets the collection of <see cref="T:Syncfusion.Data.IFilterDefinition"/> to maintain the filtering information.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Data.IFilterDefinition"/> to maintain the filtering information.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.LiveDataUpdateMode">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Data.LiveDataUpdateMode"/> to control data manipulation operations during data updates.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Data.LiveDataUpdateMode"/> that indicates how data manipulation operations are handled during data updates. 
            The default value is <see cref="!:LiveDataUpdateMode.Default"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.SummaryCalculationMode">
            <summary>
            Gets or sets a value that denotes the mode of calculation for caption and group summaries for improved performance. 
            </summary>
            <value>
            One of the CalculationMode that indicates when to perform the summary calculation.
            The default value is <see cref="F:Syncfusion.Data.CalculationMode.Default"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.SummaryCalculationUnit">
            <summary>
            Gets or sets the value that specifies the mode for calculating summaries.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Data.SummaryCalculationUnit"/> that indicates which rows summaries are to be calculated.
            The default value is <see cref="F:Syncfusion.Data.SummaryCalculationUnit.AllRows"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.GroupDescriptions">
            <summary>
            Gets the collection of group descriptions, that contains the columns that represent 
            grouping in the collection view.
            </summary>
            <value>The collection of group descriptions, that contains the columns that represent 
            grouping in the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.SortDescriptions">
            <summary>
            Gets the collection of sort descriptions, that contains the columns that represent sorting 
            in the collection view.
            </summary>
            <value>The collection of sort descriptions, that contains the columns that represent sorting 
            in the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.SourceCollection">
            <summary>
            Gets the IEnumerable source collection of the collection view.
            </summary>
            <value>The IEnumerable source collection of the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.Culture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo"/> of the collection view.
            </summary>
            <value>The <see cref="T:System.Globalization.CultureInfo"/> of the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.Filter">
            <summary>
            Gets or sets the predicate to apply custom filter on source.
            </summary>
            <value>The predicate to apply custom filter on source.</value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.CanFilter">
            <summary>
            Gets sets a boolean value indicating whether filtering can be performed.
            </summary>
            <value>A boolean value indicating whether to filtering can be performed.</value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.AutoExpandGroups">
            <summary>
            Gets or sets a value that indicates whether the group caption is expanded automatically during grouping.
            </summary>
            <value>
            <b>True</b> if the group caption is expanded automatically, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.IsInDeferRefresh">
            <summary>
            Gets a value that indicates whether the <see cref="M:Syncfusion.Data.CollectionViewAdv.DeferRefresh"/> in action.
            </summary>
            <value>
            <b>True</b> if the <see cref="M:Syncfusion.Data.CollectionViewAdv.DeferRefresh"/> in action, otherwise <b>false</b>.
            </value>
        </member>
        <member name="T:Syncfusion.Data.IUnboundExpressionFunc">
            <summary>
            Interface that defines the methods for getting the func for the Unbound column.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IUnboundExpressionFunc.GetFunc(System.String,Syncfusion.Data.DataOperation,Syncfusion.Data.DataReflectionMode)">
            <summary>
            Gets the custom function to enable runtime customized objects over default operations other than LINQ queries.
            </summary>
            <param name="propertyName"></param>
            <returns>The custom function to enable runtime customized objects over default operations other than LINQ queries.</returns>
        </member>
        <member name="M:Syncfusion.Data.IUnboundExpressionFunc.GetExpressionFunc(System.String,Syncfusion.Data.DataOperation,Syncfusion.Data.DataReflectionMode)">
            <summary>
            Get the custom expression function to enable runtime customized objects into LINQ queries.
            </summary>
            <param name="operation">The data operation.</param>
            <param name="propertyName">The property name.</param>
            <param name="reflectionMode">The reflection mode.</param>
            <remarks>The custom expression function to enable runtime customized objects into LINQ queries.</remarks>
        </member>
        <member name="T:Syncfusion.Data.IGridViewNotifier">
            <summary>
            Interface that handles the methods relating to the grid view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGridViewNotifier.DetachGridView">
            <summary>
            Detach the grid instance present in the view while disposing the view and reusing.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGridViewNotifier.AttachGridView(System.Object)">
            <summary>
            Sets grid in the view.
            </summary>
            <param name="dataGrid">The reference of the SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.IGridViewNotifier.GetDataGrid">
            <summary>
            Gets the dataGrid present in the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.dataTable">
            <summary>
            Backing field that contains the old data table for runtime source collection changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.currentItem">
            <summary>
            Gets the current item of the collection view.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.currentPosition">
            <summary>
            Gets the position of the current item in the collection vew.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.IsInSuspend">
            <summary>
            Gets the value indicating whether view is suspended from updates. 
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.IsInEndDeferral">
            <summary>
            Gets the value indicating whether the collection view is in end deferal, which denotes whether 
            the refreshing in the collection view is end.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.IsInPropertyChange">
            <summary>
            Gets a value indicating whether the property change is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.IsInGroup">
            <summary>
            Gets a value indicating whether the data in the underlying collection view is grouped.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the CollectionViewAdv class.
            </summary>
            <param name="_source">The IEnumerable source of the collection view.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.#ctor(System.Collections.IEnumerable,System.Type)">
            <summary>
            Initializes a new instance of the CollectionViewAdv class.
            </summary>
            <param name="_source">The IEnumerable source of the collection view.</param>
            <param name="sourceType">The source type.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetFirstItem">
            <summary>
            Returns first item from SourceCollection by enumeration.
            </summary>
            <returns>Returns first item from SourceCollection by enumeration.</returns>
            <remarks>If the source is IQueryable returns the first item by querying the SourceCollection.</remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CreateRecordEntry(System.Object)">
            <summary>
            Creates the <see cref="T:Syncfusion.Data.RecordEntry"/> for associated data object.
            </summary>
            <param name="data">The data object to create <see cref="T:Syncfusion.Data.RecordEntry"/>.</param>
            <returns>
            The <see cref="T:Syncfusion.Data.RecordEntry"/> for the specified data object.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SetSourceType(System.Type)">
            <summary>
            Sets the source type from bound control. 
            </summary>
            <param name="sourceType">The sourceType.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetItemProperties">
            <summary>
            Gets the collection of item properties, that contains the property and its information.
            </summary>
            <returns>The collection of item properties, that contains the property and its information.</returns>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.propertyAccessProvider">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.ItemPropertiesProvider"/> which handles the reflection for <see cref="T:Syncfusion.Data.CollectionViewAdv"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetPropertyAccessProvider">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.ItemPropertiesProvider"/> which handles the reflection for <see cref="T:Syncfusion.Data.CollectionViewAdv"/>.
            </summary>
            <returns>
            Returns the <see cref="T:Syncfusion.Data.ItemPropertiesProvider"/> which handles the reflection for <see cref="T:Syncfusion.Data.CollectionViewAdv"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CreateItemPropertiesProvider">
            <summary>
            Creates the ItemPropertiesProvider, to get or set value on the underlying object of the collection view.
            </summary>
            <returns>Returns the newly created ItemPropertiesProvider.</returns>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.ItemPropertiesSet">
            <summary>
            Gets a boolean value indicating whether item properties is set.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.IsItemPropertiesTypeSet">
            <summary>
            Gets a boolean value indicating whether type of item properties is set.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SetItemProperties(System.Collections.IEnumerable)">
            <summary>
            Sets ItemProperties from specified dataSource.
            </summary>
            <param name="dataSource">The bound dataSource.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetInternalSource">
            <summary>
            Gets the list which internally stores the data in on-demand.
            </summary>
            <returns>Returns the list of records in view.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetSource">
            <summary>
            Returns the underlying collection from the <c>SfDataGrid.ItemsSource</c>.
            </summary>
            <returns>The underlying collection from the <c>SfDataGrid.ItemsSource</c>.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetSourceListCollection">
            <summary>
            Returns the SourceCollection as IList to handle the CRUD operations.
            </summary>
            <returns>Returns the SourceCollection as list to handle the CRUD operations.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferRefresh">
            <summary>
            Gets a disposable defer helper to suspends the all data operations in view. 
            </summary>
            <returns>Returns disposable defer helper to do the bulk changes.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferRefresh(System.Boolean)">
            <summary>
            Gets a disposable defer helper to suspends the all data operations in view. 
            </summary>
            <param name="isProgrammatic">True to handle the UI update when do data operation programmtically.</param>
            <returns>Returns disposable defer helper to do the bulk changes.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Refresh">
            <summary>
            Refreshes the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Refresh(System.Boolean)">
            <summary>
            Refreshes the view.
            </summary>
            <param name="isProgrammatic">True to handle the UI update when do data operation programmtically.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains the given item.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <b>True</b> if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method fires when the underlying collection is changed.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> containing the 
            data for the event.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RefreshView(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Refreshes the view when the underlying collection is changed.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains the 
            event data.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RaiseExceptionThrownEvent(System.Exception)">
            <summary>
            Raises the exception thrown event.
            </summary>
            <param name="exception">The data for the event which contains the exception details.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RaiseCollectionChangedEvent(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Data.CollectionViewAdv.CollectionChanged"/> event of the collection view.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> data for the event</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RaiseSourceCollectionChangedEvent(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the source collection changed event.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.summaryCalculationUnit">
            <summary>
            The value that specifies the mode for calculating the summaries.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.IsInCommitNew">
            <summary>
            Indicates whether the new item is committed in the collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.MoveCurrentTo(System.Object)">
            <summary>
            Move <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> to the given item.
            </summary>
            <param name="item">Move CurrentItem to this item.</param>
            <returns><b>True</b> if <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.MoveCurrentToFirst">
            <summary>
            Move <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> to the first item.
            </summary>
            <returns><b>True</b> if <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.MoveCurrentToLast">
            <summary>
            Move <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> to the last item.
            </summary>
            <returns><b>True</b> if <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.MoveCurrentToNext">
            <summary>
            Move <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> to the next item.
            </summary>
            <returns><b>True</b> if <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.MoveCurrentToPosition(System.Int32)">
            <summary>
            Move <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> to the item at the given index.
            </summary>
            <param name="index">Move CurrentItem to this index</param>
            <returns><b>True</b> if <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SetCurrent(System.Object,System.Int32)">
            <summary>
            Sets the given item at the given index.
            </summary>
            <param name="newItem">The item to be added at the given position.</param>
            <param name="newPosition">The index at which the item is to be added.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SetCurrent(System.Object,System.Int32,System.Int32)">
            <summary>
            Sets the given item at the given index.
            </summary>
            <param name="newItem">The item to be added at the given position.</param>
            <param name="newPosition">The index at which the item is to be added.</param>
            <param name="count">The number of records count in the view.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RaiseCurrentChangedEvent">
            <summary>
            Raises the <see cref="E:Syncfusion.Data.CollectionViewAdv.CurrentChanged"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.MoveCurrentToPrevious">
            <summary>
            Move <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> to the previous item.
            </summary>
            <returns><b>True</b> if <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> points to an item within the view.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.IndexOf(System.Object)">
            <summary>
            Gets the index of the given item.
            </summary>
            <param name="item">The item whose index is to be obtained.</param>
            <returns>The index of the given item.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the given item at the given index.
            </summary>
            <param name="index">The index at which the item is to be added.</param>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position from the collection.
            </summary>
            <param name="index">The position of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or greater than the number of items in the collection view.</exception>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetItemAt(System.Int32)">
            <summary>
            Returns the item at specified index.
            </summary>
            <param name="index">The index to get the object.</param>
            <returns>Returns the item from records or display elements at specified index</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Add(System.Object)">
            <summary>
            Adds the given item to the records.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Clear">
            <summary>
            Clears all the items in the record.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the record to the array from the given index.
            </summary>
            <param name="array">The array to which the record is to be copied.</param>
            <param name="arrayIndex">The index of the array from which the item is to be copied.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Remove(System.Object)">
            <summary>
            Removes the given item from the collection.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetEnumerator">
            <summary>
            Gets the enumerator for the collection of objects in the record.
            </summary>
            <returns>The enumerator for the collection of objects in the record.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.BeginInit(System.Boolean)">
            <summary>
            Signals the object that initialization is starting and so suspends all the data operations in view. 
            </summary>
            <param name="IsProgrammatic">The flag IsProgrammatic helps to resume the UI update while IsInDeferRefresh is true.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.EndInit">
            <summary>
            Signals the object that initialization is complete and hence resumes the data operations and reinitialize the view.   
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.EnsureView">
            <summary>
            Ensures sorting, grouping and filtering by refreshing the view with updated collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CreateRecords">
            <summary>
            Creates the records for the items in the source of the collection view.
            </summary>
            <returns>The list of records created for the items in the source of the 
            collection view.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.EnsureInitialized">
            <summary>
            Represents a method which creates record entry for <see cref="P:Syncfusion.Data.CollectionViewAdv.Records"/> and dispose old records.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.AddNotifyListener(System.Object)">
            <summary>
            Adds the notify listener to the given record.
            </summary>
            <param name="record">The record for which the notifier is to be added.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RemoveNotifyListener(System.Object)">
            <summary>
            Removes the notify listener from the record.
            </summary>
            <param name="record">The record for which the notifier is to be removed.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.InitiateCollectionViewAdv">
            <summary>
            Initializes the collection view, which initializes the sort descriptions, 
            summary rows, table summary rows and filter predicates of the collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SetSource(System.Collections.IEnumerable)">
            <summary>
            Sets the source of the collection view.
            </summary>
            <param name="_source">The source to be set.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.EnsureSourceList">
            <summary>
            Ensures the source list of the collection view. Call this method in the derived 
            CollectionView once the constructor is called.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SetFlag(Syncfusion.Data.CollectionViewAdv.CollectionViewFlags,System.Boolean)">
            <summary>
            Sets the flag to the collection view.
            </summary>
            <param name="flags">The <see cref="T:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags"/> indicating the flag to be set.</param>
            <param name="value">The value indicating whether the flag can be set.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UnWireEvents">
            <summary>
            Unwires all the events in the collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.OnSortDescriptionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method fires when the sort description is changed.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.IsInSourceCollectionChange">
            <summary>
            Gets or sets a boolean value indicating whether the collection change is currently in progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SourceListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handles the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event.
            </summary>
            <param name="sender">The original sender of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.OnRecordCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method fires when the record collection is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains the 
            event data.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateCollectionView(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method handles the source collection changed event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains the 
            event data.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetAdjustedIndexWithSourceCollection(System.Object,System.Int32)">
            <summary>
            This method handle the adjusted index for source collection.
            </summary>
            <param name="item">The item to be added at the given position.</param>
            <param name="newIndex">The index at which the item is to be added.</param>
            <returns>Returns Records index for the given item.</returns>
            <remarks>This method handle the adjusted index for source collection when view.filter applied the records</remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CreateTopLevelGroup">
            <summary>
            Creates a top-level group.
            </summary>
            <returns>The top-level group created.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetGroupResult(System.String[])">
            <summary>
            Gets the IEnumerable collection of group result for the array of group-by.
            </summary>
            <param name="groupBy">The array of groups</param>
            <returns>The IEnumerable collection of group result for the array of group-by.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.OnTopLevelGroupPopulated(Syncfusion.Data.TopLevelGroup)">
            <summary>
            This method fires when the top-level group is populated.
            </summary>
            <param name="topLevelGroup">The instance of top-level group.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RefreshTopLevelGroup">
            <summary>
            Refreshes the top-level group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RaiseGroupCollectionChanged(Syncfusion.Data.NotifyGroupsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Data.CollectionViewAdv.TopLevelGroupCollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Data.NotifyGroupsChangedEventArgs"/> representing the data for the event.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.OnTopLevelGroupCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method fires when the top-level group collection is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.FilterRecord(System.Object)">
            <summary>
            Filters the record for the specified record condition.
            </summary>
            <param name="record">The record to filter the data.</param>
            <returns>
            <b>True</b> if the filter condition is satisfied, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RefreshFilter(System.Boolean)">
            <summary>
            Refreshes the view when the filtering is applied through <see cref="M:Syncfusion.Data.CollectionViewAdv.FilterRecord(System.Object)"/> delegate.
            </summary>
            <param name="isProgrammatic">A boolean value indicating whether filtering is done programmatically.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This method fires when the property is changed.
            </summary>
            <param name="sender">The original sender of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> representing the data for the event.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.NotifyPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This method fires when the property is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event for the data.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Data.CollectionViewAdv.CanUpdateSummary(Syncfusion.Data.ISummaryRow,System.String)" -->
        <member name="M:Syncfusion.Data.CollectionViewAdv.OnRecordPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This method fires when the record property is changed.
            </summary>
            <param name="sender">The original sender of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RemoveRecord(System.Object)">
            <summary>
            Removes the given record from the record collection.
            </summary>
            <param name="record">The record to be removed.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SetActiveComparer">
            <summary>
            Sets the active sort comparer of the collection view based on the sort descriptions, sort comparers and the culture of the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetActiveComparer">
            <summary>
            Gets the active sort comparer of the collection view.
            </summary>
            <returns>The active sort comparer of the collection view.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RefreshSort">
            <summary>
            Refreshes the sorting in the collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetComparerIndex(System.Object,System.Int32)">
            <summary>
            Compares the given index and the index corresponding to the given record.
            <para/>
            Call this method when you need to find the compared index of item based on sorting
            </summary>
            <param name="record">The record whose index is to be compared with the given index.</param>
            <param name="index">The index which is to be compared</param>
            <returns>Gets the comparer index based on the given index and the index corresponding to the given record.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.AdjustBeforeAdd(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="record"></param>
            <param name="index"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateTableSummary(System.Object,System.String)">
            <summary>
            Update Table Summary for property changed cases.
            </summary>
            <param name="record"></param>
            <param name="propertyName"></param>        
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetSelectedRecords">
            <summary>
            Gets the selected records to calculate the summaries.
            </summary>
            <returns>Returns the selected records</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateTableSummary(System.Object,System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Update Table summary for Add / Remove cases.
            </summary>
            <param name="record"></param>
            <param name="RecordAction"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateSummaries(Syncfusion.Data.Group,System.Object,System.String)">
            <summary>
            Update group summaries for replace case
            </summary>
            <param name="group"></param>
            <param name="record"></param>
            <param name="propertyName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateCaptionSummaries(Syncfusion.Data.Group,System.Object,System.String)">
            <summary>
            Update Caption summary for replace case
            </summary>
            <param name="group"></param>
            <param name="record"></param>
            <param name="propertyName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateSummaries(Syncfusion.Data.Group,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Update Group Summaries for Add / Remove case.
            </summary>
            <param name="group"></param>
            <param name="record"></param>
            <param name="RecordAction"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetSelectedRecordsInGroup(Syncfusion.Data.Group,System.Collections.Generic.List{System.Object},System.Collections.IList)">
            <summary>
            Gets the selected records from the group.
            </summary>
            <param name="group">The group.</param>
            <param name="selectedRecordsInGroup">Maintains the selected records in group.</param>
            <param name="groupRecords">Maintains the group records.</param>
            <returns>Returns the selected records from the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateCaptionSummaries(Syncfusion.Data.Group,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Update caption summary for Add / Remove case.
            </summary>
            <param name="group"></param>
            <param name="record"></param>
            <param name="RecordAction"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateSummaryAdjustableForGroup(Syncfusion.Data.Group,Syncfusion.Data.ISummaryAdjustable,Syncfusion.Data.SummaryValue,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update Summary for Group by Adjustable aggregate.
            </summary>
            <param name="group"></param>
            <param name="adjustible"></param>
            <param name="summaryValue"></param>
            <param name="RecordAction"></param>
            <param name="propertyName"></param>
            <param name="record"></param>
            <param name="_changedSummaryInfoDictionary"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateTableSummaryAdjustable(Syncfusion.Data.ISummaryAdjustable,Syncfusion.Data.SummaryValue,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update Table Summary for Adjustable aggregate.
            </summary>
            <param name="adjustible"></param>
            <param name="summaryValue"></param>
            <param name="RecordAction"></param>
            <param name="propertyName"></param>
            <param name="record"></param>
            <param name="_changedSummaryInfoDictionary"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetRecordsCount(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Returns Records count for the given group.
            </summary>
            <param name="group">The Group that has Records.Count</param>
            <param name="count">The count has the value of total record in group.</param>
            <returns>Returns the records count in a specified group.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CalculateTableSummary(System.Collections.IEnumerable,Syncfusion.Data.SummaryRecordEntry,Syncfusion.Data.ISummaryColumn,System.Data.DataTable)">
            <summary>
            Calculate and aggregate summary value for given summary record entry.
            </summary>
            <param name="summaryRecordEntry"></param>
            <param name="summaryColumn"></param>
            <param name="summaryCalculationTable"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateTableSummary(Syncfusion.Data.ISummaryRow,Syncfusion.Data.SummaryRecordEntry,Syncfusion.Data.SummaryCalculationUnit)">
            <summary>
            Calculate the table summaries based on SummaryCalculationUnit.
            </summary>
            <param name="summaryRow">The <see cref="T:Syncfusion.Data.ISummaryRow"/> which summary value need to be calculate.</param>
            <param name="summaryRecordEntry">The <see cref="T:Syncfusion.Data.SummaryRecordEntry"/> which contains the summary values of summary row.</param>
            <param name="mode">The SummaruCalculationUnit</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetFunc(System.String,Syncfusion.Data.DataOperation,Syncfusion.Data.DataReflectionMode)">
            <summary>
            Returns The func for corresponding property name, data operation and the reflection mode.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="operation">The data operation.</param>
            <param name="reflectionMode">The data reflection mode.</param>
            <returns>The func for corresponding property name, data operation and the reflection mode.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetExpressionFunc(System.String,Syncfusion.Data.DataOperation,Syncfusion.Data.DataReflectionMode)">
            <summary>
            Returns the expression func for corresponding property name, data operation and reflection mode.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="operation">The data operation.</param>
            <param name="reflectionMode">The data reflection mode.</param>
            <returns>The expression func for corresponding property name, data operation and reflection mode.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.CollectionViewAdv"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Dispose(System.Boolean)">
            <summary>
            Disposes the unmanaged and optionally disposes the managed resources used by the <see cref="T:Syncfusion.Data.CollectionViewAdv"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DetachGridView">
            <summary>
            Need to detach the grid instance present in the view while disposing the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.AttachGridView(System.Object)">
            <summary>
            Sets grid in the view.
            </summary>
            <param name="dataGrid">The reference of the SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetDataGrid">
            <summary>
            Gets the dataGrid present in the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.editItem">
            <summary>
            Gets the current edit item of the collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CancelEdit">
            <summary>
            Ends the edit transaction and, if possible, restores the original value to the item.
            </summary>
            <exception cref="T:System.InvalidOperationException">EditItem is null to CancelEdit</exception>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetRecordAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.RecordEntry"/> at the specified index.
            </summary>
            <param name="index">The index to get the record.</param>
            <returns>
            Returns the <see cref="T:Syncfusion.Data.RecordEntry"/> for the specified index.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.EndEdit">
            <summary>
            Ends editing in the current item.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CommitEdit">
            <summary>
            Ends the edit transaction and saves the pending changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.EditItem(System.Object)">
            <summary>
            Begins an edit transaction of the specified item.
            </summary>
            <param name="item">The item to edit.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.AddNew">
            <summary>
            Adds a new item to the collection.
            </summary>
            <returns>The new item that is added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CancelNew">
            <summary>
            Ends the add transaction and discards the pending new item.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CommitNew">
            <summary>
            Ends the add transaction and saves the pending new item.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.FetchSize">
            <summary>
            Gets or sets the value that indicates the number of records to be fetched.
            </summary>        
            <value>The value that indicates the number of records to be fetched.The default value is 50.</value>
            <remarks>        
            In CustomDataVirtualization, creates records based on default fetchsize value when source list is set as null
            </remarks>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsDynamicBound">
            <summary>
            Gets or sets the value that indicates whether the data object is <see cref="N:System.Dynamic"> dynamic</see>. 
            </summary>
            <value>
            <b>True</b> if the data object is dynamic, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.Records">
            <summary>
            Gets the records collection of the collection view, which includes the records displayed 
            in the view.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.IRecordsList"/> of records which includes the records displayed 
            in the view.
            </value>
            <remarks>
            When the <see cref="!:Syncfusion.UI.Xaml.Grid.GroupColumnDescription"/> are added, the groups are maintained in <see cref="P:Syncfusion.Data.TopLevelGroup.DisplayElements"/>.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Data.CollectionViewAdv.EnableSummaryOptimization" -->
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsInDeferRefresh">
            <summary>
            Gets a value that indicates whether the <see cref="M:Syncfusion.Data.CollectionViewAdv.DeferRefresh"/> in action.
            </summary>
            <value>
            <b>True</b> if the <see cref="M:Syncfusion.Data.CollectionViewAdv.DeferRefresh"/> in action, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsGrouping">
            <summary>
            Gets a boolean value that indicates whether the source have grouped.
            </summary>
            <value>A boolean value that indicates whether the source have grouped.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.GroupList">
            <summary>
            Gets the TopLevelGroup as IGroupList to handle the add/remove operations.
            </summary>
            <value>The TopLevelGroup as IGroupList to handle the add/remove operations.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.TopLevelGroup">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.TopLevelGroup"/> of the collection view, which maintains the group information 
            when the <see cref="!:UI.Xaml.Grid.GroupColumnDescription"/> is added into <see cref="!:UI.Xaml.Grid.SfDataGrid.GroupColumnDescriptions"/> collection. 
            Top-level group will be the first-level group. All groups will have the root group which is the 
            top-level group.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.TopLevelGroup"/> which maintains the group information of the collection view, which maintains the group information 
            when the <see cref="!:UI.Xaml.Grid.GroupColumnDescription"/> is added into <see cref="!:UI.Xaml.Grid.SfDataGrid.GroupColumnDescriptions"/> collection. 
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CaptionSummaryRow">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the group caption summary information of the collection view.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the group caption summary information of the collection view.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SummaryRows">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the summary rows information of the collection view.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the summary rows information of the collection view.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.TableSummaryRows">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the table summary rows information.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains table summary rows information.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SortComparers">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.SortComparers">SortComparers</see> to sort the data using custom logic.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.SortComparers">SortComparers</see> which contains the custom logic for sorting.
            </value>
        </member>
        <member name="E:Syncfusion.Data.CollectionViewAdv.RecordPropertyChanged">
            <summary>
            Occurs when the record property changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SourceType">
            <summary>
            Gets the value that indicates the source type of bound source.
            </summary>
            <value>The value that indicates the source type of bound source.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsLegacyDataTable">
            <summary>
            Gets a value that indicates whether the underlying data object is <see cref="T:System.Data.DataTable"/>.
            </summary>
            <value>
            <b>True</b> if the underlying data object is DataTable, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.ItemProperties">
            <summary>
            Gets the collection of item properties, that contains the property and its information.
            </summary>
            <returns>The collection of item properties, that contains the property and its information.</returns>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.Culture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo"/> of the collection view.
            </summary>
            <value>The <see cref="T:System.Globalization.CultureInfo"/> of the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.Filter">
            <summary>
            Gets or sets the predicate to apply custom filter on source.
            </summary>
            <value>The predicate to apply custom filter on source.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.FilterPredicates">
            <summary>
            Gets or sets the collection of <see cref="T:Syncfusion.Data.IFilterDefinition"/> to maintain the filtering information.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Data.IFilterDefinition"/> to maintain the filtering information.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.GroupDescriptions">
            <summary>
            Gets the collection of group descriptions, that contains the columns that represent 
            grouping in the collection view.
            </summary>
            <value>The collection of group descriptions, that contains the columns that represent 
            grouping in the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SortDescriptions">
            <summary>
            Gets the collection of sort descriptions, that contains the columns that represent sorting 
            in the collection view.
            </summary>
            <value>The collection of sort descriptions, that contains the columns that represent sorting 
            in the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SourceCollection">
            <summary>
            Gets the IEnumerable source collection of the collection view.
            </summary>
            <value>The IEnumerable source collection of the collection view.</value>
        </member>
        <member name="E:Syncfusion.Data.CollectionViewAdv.CollectionChanged">
            <summary>
            Occurs when the underlying collection changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Data.CollectionViewAdv.SourceCollectionChanged">
            <summary>
            Occurs when the underlying source collection changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Data.CollectionViewAdv.TopLevelGroupCollectionChanged">
            <summary>
            Occurs when the top level group collection changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.LiveDataUpdateMode">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Data.LiveDataUpdateMode"/> to control data manipulation operations during data updates.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Data.LiveDataUpdateMode"/> that indicates how data manipulation operations are handled during data updates. 
            The default value is <see cref="!:LiveDataUpdateMode.Default"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SummaryCalculationMode">
            <summary>
            Gets or sets a value that denotes the mode of calculation for caption and group summaries for improved performance. 
            </summary>
            <value>
            One of the CalculationMode that indicates when to perform the summary calculation.
            The default value is <see cref="F:Syncfusion.Data.CalculationMode.Default"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SummaryCalculationUnit">
            <summary>
            Gets or sets the value that specifies the mode for calculating the summaries.
            </summary>
            <value>
            The default value is <see cref="!:SummaryCalculationUnit.AllRows"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.Groups">
            <summary>
            Gets the read only observable collection of the groups.
            </summary>
            <value>The read only observable collection of the groups.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsEmpty">
            <summary>
            Gets a boolean value indicating whether the collection view is empty.
            </summary>
            <value>A boolean value indicating whether the collection view is empty.</value>
        </member>
        <member name="E:Syncfusion.Data.CollectionViewAdv.CurrentChanged">
            <summary>
            Occurs when the current item is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsCurrentAfterLast">
            <summary>
            Gets a boolean value indicating whether the <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> is beyond the end (End-Of-File).
            </summary>
            <value>Returns <b>true</b> if <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> is beyond the end (End-Of-File).</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsCurrentBeforeFirst">
            <summary>
            Gets a boolean value indicating whether the <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> is before the beginning (Beginning-Of-File).
            </summary>
            <value>Returns <b>true</b> if <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> is before the beginning (Beginning-Of-File).</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CurrentItem">
            <summary>
            Gets the current item in the view.
            </summary>
            <value>The current item in the view.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CurrentPosition">
            <summary>
            Gets the ordinal position of the <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> within the (optionally
            sorted and filtered) view.
            </summary>
            <value>The ordinal position of the <see cref="P:Syncfusion.Data.CollectionViewAdv.CurrentItem"/> within the (optionally
            sorted and filtered) view.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsCurrentInSync">
            <summary>
            Gets a boolean value indicating whether the current item is in sync.
            </summary>
            <value>A boolean value indicating whether the current item is in sync.</value>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.Item(System.Int32)">
            <summary>
            Gets the record at the given index.
            </summary>
            <param name="index">The record at the given index.</param>
            <returns>The record at the given index.</returns>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.Count">
            <summary>
            Gets the number of records in the view.
            </summary>
            <value>The number of records in the view.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsReadOnly">
            <summary>
            Gets a boolean value indicating whether the view can only be read.
            </summary>
            <value>A boolean value indicating whether the view can only be read.</value>
        </member>
        <member name="E:Syncfusion.Data.CollectionViewAdv.PropertyChanged">
            <summary>
            Occurs when the property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CanFilter">
            <summary>
            Gets a boolean value indicating whether filtering can be performed in the view.
            </summary>
            <value>A boolean value indicating whether filtering can be performed in the view.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CanGroup">
            <summary>
            Gets a boolean value indicating whether grouping can be performed in the view.
            </summary>
            <value>A boolean value indicating whether grouping can be performed in the view.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CanSort">
            <summary>
            Gets a boolean value indicating whether sorting can be performed in the view.
            </summary>
            <value>A boolean value indicating whether sorting can be performed in the view.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.NotificationSubscriptionMode">
            <summary>
            Gets or sets a value that indicate whether source collection items can listen the NotifyPropertyChanging/Changed events.
            </summary>
            <value>The <see cref="T:Syncfusion.Data.NotificationSubscriptionMode"/> representing a value that indicate whether source collection items can listen the NotifyPropertyChanging/Changed events.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.AutoExpandGroups">
            <summary>
            Gets or sets a value that indicates whether the group caption is expanded automatically during grouping.
            </summary>
            <value>
            <b>True</b> if the group caption is expanded automatically, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CanCancelEdit">
            <summary>
            Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.
            </summary>
            <retruns><b>True</b> if the collection view can discard pending changes and restore the original values of an edited object; otherwise, <b>false</b>.</retruns>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CurrentEditItem">
            <summary>
            Gets the item in the collection that is being edited.
            </summary>
            <value>The item in the collection that is being edited if <see cref="P:Syncfusion.Data.CollectionViewAdv.IsEditingItem"/> is true, otherwise null.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsEditingItem">
            <summary>
            Gets a value that indicates whether an edit transaction is in progress.
            </summary>
            <value><b>True</b> if an edit transaction is in progress, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CanAddNew">
            <summary>
            Gets a value that indicates whether a new item can be added to the collection.
            </summary>
            <value><b>True</b> if a new item can be added to the collection, otherwise<b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CanRemove">
            <summary>
            Gets a value that indicates whether an item can be removed from the collection.
            </summary>
            <value><b>True</b> if an item can be removed from the collection, otherwise <b>false</b>.</value>   
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CurrentAddItem">
            <summary>
            Gets the item that is being added during the current add transaction.
            </summary>
            <value> The item that is being added if <see cref="P:Syncfusion.Data.CollectionViewAdv.IsAddingNew"/> is true, otherwise null.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsAddingNew">
            <summary>
            Gets a value that indicates whether an add transaction is in progress.
            </summary>
            <value><b>True</b> if an add transaction is in progress, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.NewItemPlaceholderPosition">
            <summary>
            Gets or sets the position of the new item placeholder in the collection view.
            </summary>
            <value>One of the enumeration values of <see cref="T:Syncfusion.Data.NewItemPlaceholderPosition"/> that specifies the position of the new item placeholder in the collection view.</value>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferHelper.#ctor(Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Initializes a new instance of the DeferHelper class. 
            </summary>
            <param name="collectionView">The collection view.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferHelper.#ctor(Syncfusion.Data.CollectionViewAdv,System.Boolean)">
            <summary>
            Initializes a new instance of the DeferHelper class. 
            </summary>
            <param name="collectionView">The collection view.</param>
            <param name="isProgrammatic">A boolean value indicating whether programmatically accessed.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferHelper.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.CollectionViewAdv.DeferHelper"/> class.
            </summary>            
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferHelper.Dispose(System.Boolean)">
            <summary>
            Disposes the unmanaged and optionally releases the managed resources used by the <see cref="T:Syncfusion.Data.CollectionViewAdv.DeferHelper"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.ListOrdinalComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares the given two objects.
            </summary>
            <param name="obj1">The object 1.</param>
            <param name="obj2">The object 2.</param>
            <returns>The value indicating the comparison of the given two objects.</returns>
        </member>
        <member name="T:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags">
            <summary>
            Defines the constants that indicate the various operations in the collection view.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags.CachedIsEmpty">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags.IsCurrentAfterLast">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags.IsCurrentBeforeFirst">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags.IsDataInGroupOrder">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags.IsDynamic">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags.IsMultiThreadCollectionChangeAllowed">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags.NeedsRefresh">
            <summary>
            Specifies whether entries should be recreated for the records in the collection view.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags.ShouldProcessCollectionChanged">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.CollectionViewFlags.UpdatedOutsideDispatcher">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.ExpandKey.expandedGroups">
            <summary>
            Gets the groups collection that are expanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.ExpandKey.Equals(System.Object)">
            <summary>
            Checks the equality of the current instance and the given instance.
            </summary>
            <param name="obj">The other object to compare with.</param>
            <returns>Returns a boolean value indicating the equality of the current object and the given object.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.ExpandKey.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.ExpandKey.CompareTo(Syncfusion.Data.CollectionViewAdv.ExpandKey)">
            <summary>
            Compares the current instance with the given instance.
            </summary>
            <param name="other">The other instance of object to compare with.</param>
            <returns>Returns a value indicating the comparison of the current and the given instance.</returns>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.ExpandKey.Key">
            <summary>
            Get or sets the key of the groups.
            </summary>
            <value>The key of the groups.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.ExpandKey.Level">
            <summary>
            Gets or sets the level of the expand key.
            </summary>
            <value>The level of expand key.</value>
        </member>
        <member name="T:Syncfusion.Data.NotifyCollectionChangedEventArgsExt">
            <summary>
            Class that represents the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> with IsProgrammatic flag to decide the selection and UI update.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.NotifyCollectionChangedEventArgsExt.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Initializes a instance of the NotifyCollectionChangedEventArgsExt class.
            </summary>
            <param name="action">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> representing the 
            collection changed action.</param>
        </member>
        <member name="P:Syncfusion.Data.NotifyCollectionChangedEventArgsExt.IsProgrammatic">
            <summary>
            Gets or sets a boolean value that indicates whether the refresh processing internally or not.
            </summary>
            <value>A boolean value that indicates whether the refresh processing internally or not.</value>
        </member>
        <member name="T:Syncfusion.Data.IFilterExt">
            <summary>
            Defines the extension methods for getting the expression for the filter extensions.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IFilterExt.GetPredicateExpression(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            Gets the predicate expression for the given source and parameter expression.
            </summary>
            <param name="source">The IQueryable source</param>
            <param name="parameterExpression">The parameter expression.</param>
            <returns>The predicate expression for the given source and parameter expression.</returns>
        </member>
        <member name="M:Syncfusion.Data.IFilterExt.GetPredicateExpression(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression@,System.String,System.Boolean)">
            <summary>
            Gets the predicate expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="columnName">The column name.</param>
            <param name="returncolExpression">A boolean value indicating whether to return the column 
            expression.</param>
            <returns>The predicate expression for the given values.</returns>
        </member>
        <member name="T:Syncfusion.Data.DataOperation">
            <summary>
            Defines the constants for specifying different data operations performed in the collection view.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Default">
            <summary>
            Denotes the data operation other than sorting, grouping, filtering and summary calculation.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Sorting">
            <summary>
            Denotes the sorting operation is being performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Grouping">
            <summary>
            Denotes the grouping operation is being performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Filtering">
            <summary>
            Denotes the filtering operation is being performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Summary">
            <summary>
            Denotes the summary calculation operation is being performed.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.DataReflectionMode">
            <summary>
            Defines the constants for specifying different data mode performed in view.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataReflectionMode.Default">
            <summary>
            Data operations are based on Mapping Name.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataReflectionMode.Display">
            <summary>
            Data operations are based on formatted display value.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataReflectionMode.Value">
            <summary>
            Data operations are based on mapped property value.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.NotificationSubscriptionMode">
            <summary>
            Defines the constants that specify whether need to listen the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events of data object and <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> 
            event of source collection.
            </summary> 
        </member>
        <member name="F:Syncfusion.Data.NotificationSubscriptionMode.None">
            <summary>
            Denotes <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/>, <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>  and <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> events will not be listened.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.NotificationSubscriptionMode.CollectionChange">
            <summary>
            Denotes view listens the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event of SoureCollection.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.NotificationSubscriptionMode.PropertyChange">
            <summary>
            Denotes view listens the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events of data object.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.DataTableCollectionView">
            <summary>
            Represents the class that maintains the collection view of type data table collection view, 
            when the SfDataGrid is bind to the data table collection view.   
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.#ctor">
            <summary>
            Initializes a new instance of DataTableCollectionView class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of DataTableCollectionView class.
            </summary>
            <param name="source">The IEnumerable source for the collection view.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.GetSource">
            <summary>
            Gets the source of the collection view.
            </summary>
            <returns>The source of the collection view.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.SetSource(System.Collections.IEnumerable)">
            <summary>
            Sets the source for the collection view.
            </summary>
            <param name="_source">The source to be set for the collection view.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.CreateRecords">
            <summary>
            Creates the records for the items in the source of the collection view.
            </summary>
            <returns>The list of records created for the items in the source of the 
            collection view.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.OnSortDescriptionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method fires when the sort description is changed.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.FilterRecord(System.Object)">
            <summary>
            Filters the record for the specified record condition.
            </summary>
            <param name="record">The record to filter the data.</param>
            <returns>
            <b>True</b> if the filter condition is satisfied, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.RefreshSort">
            <summary>
            Refreshes the sorting.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.GetGroupResult(System.String[])">
            <summary>
            Gets the IEnumerable collection of group result for the array of group-by.
            </summary>
            <param name="groupBy">The array of groups</param>
            <returns>The IEnumerable collection of group result for the array of group-by.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.RefreshFilter(System.Boolean)">
            <summary>
            Refreshes the view when the filtering is applied through <see cref="M:Syncfusion.Data.DataTableCollectionView.FilterRecord(System.Object)"/> delegate.
            </summary>
            <param name="isProgrammatic">A boolean value indicating whether filtering is done programmatically.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.ResetFilter">
            <summary>
            Refreshes the filtering.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.RefreshSortingOrderWithFiltersForBottomLevel(System.Collections.Generic.List{Syncfusion.Data.Group},System.String,System.Int32)">
            <summary>
            Refreshes the sorting order with filters for the bottom-level groups.
            </summary>
            <param name="groups">The list of groups in the bottom level.</param>
            <param name="previousFilter">The previous filter applied.</param>
            <param name="level">The level of the group.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.UpdateCollectionView(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method fires when the collection is changed.
            </summary>
            <param name="sender">The original sender of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> which represents 
            the collection changed action.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.CommitEdit">
            <summary>
            Ends the edit transaction and saves the pending changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.AddNew">
            <summary>
            Adds a new item to the collection.
            </summary>
            <returns>The new item that is added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.CancelNew">
            <summary>
            Ends the add transaction and discards the pending new item.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.CommitNew">
            <summary>
            Ends the add transaction and saves the pending new item.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.DataTableCollectionView.ViewSource">
            <summary>
            Gets the view source of the collection view.
            </summary>
            <value>The view source of the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableCollectionView.RowFilter">
            <summary>
            Gets or sets the expression used to filter which rows are viewed in the DataView.
            </summary>
            <value>
            The expression used to filter which rows are viewed in the DataView.
            </value>
        </member>
        <member name="T:Syncfusion.Data.DataTableCollectionViewExt">
            <summary>
            Class that defines the extension methods for the data table collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionViewExt.GetFilterString(Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Gets the filter string from the given view.
            </summary>
            <param name="view">The collection view.</param>
            <returns>The filter string from the given collection view.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionViewExt.GetFilterString(Syncfusion.Data.CollectionViewAdv,System.String,System.Boolean)">
            <summary>
            Gets the filter string from the given view.
            </summary>
            <param name="view">The collection view.</param>
            <param name="columnName">The column name.</param>
            <param name="returnColumnExpression">A boolean value indicating whether to return the column
             expression.</param>
            <returns>The filter string from the given view.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionViewExt.GetClonedSource(Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Gets the cloned source from the given view.
            </summary>
            <param name="view">The collection view.</param>
            <returns>The cloned source from the given view.</returns>
        </member>
        <member name="T:Syncfusion.Data.IGroupList">
            <summary>
            Interface that exposes method to the TopLevelGroup for Add / Remove / Contains /
            IndexOf methods with the underlying bound object.
            </summary>
            <remarks>
            This interface will only interact with the underlying bound object that can be
            found in <see cref="P:Syncfusion.Data.RecordEntry.Data"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.Add(System.Object,System.Boolean)">
            <summary>
            Adds the specified record to the Top-level group.
            </summary>
            <param name="record">The record to be added.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.Insert(System.Object,System.Int32,System.Boolean)">
            <summary>
            Inserts the given record at the specified index in the Top-level group.
            </summary>
            <param name="record">The record to be inserted.</param>
            <param name="index">The index at which the record is to be inserted.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified record from the Top-level group.
            </summary>
            <param name="record">The record to be removed.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
            <returns>Returns a boolean value indicating whether the given record is removed.</returns>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.Contains(System.Object)">
            <summary>
            Determines whether the given record is found in the display elements of the TopLevelGroup.
            </summary>
            <param name="record">The record to be found.</param>
            <returns>
            <b>True</b> if the specified record is found in the Top-level group, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.IndexOf(System.Object)">
            <summary>
            Finds the index of the given record in the top-level group.
            </summary>
            <param name="record">The record whose index is to be obtained.</param>
            <returns>The index of the given record in the top-level group.</returns>
        </member>
        <member name="T:Syncfusion.Data.GroupDisplayElements">
            <summary>
            Represents a class which contains the information of the group and its records.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.#ctor(Syncfusion.Data.TopLevelGroup)">
            <summary>
            Initializes a new instance of the GroupDisplayElements class.
            </summary>
            <param name="group">The corresponding group whose display elements are initialized.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing">Indicates whether the call is from dispose method or from a finalizer.</param>        
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.GetItemAt(System.Int32)">
            <summary>
            Gets the node entry of the item at the given index.
            </summary>
            <param name="index">The index at which the node entry is to be obtained.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.IsEntryInView(Syncfusion.Data.NodeEntry)">
            <summary>
            Gets or sets a boolean value indicating whether the given node entry is in view.
            </summary>
            <param name="entry">The node entry which is to be queried in the view.</param>
            <returns>A boolean value indicating whether the given node entry is in view.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.IndexOf(Syncfusion.Data.NodeEntry)">
            <summary>
            Determines the index of a specific item in the list of items in view of the top-level group.
            </summary>
            <param name="item">The object to locate in the list of items in view of the top-level group.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.IndexOf(System.Object)">
            <summary>
            Gets the index of given item in the list of items in the top-level group.
            </summary>
            <param name="item">The item whose index is to be obtained.</param>
            <returns>Returns the index of given item in the top-level group.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.GetItem(System.Object)">
            <summary>
            Gets the corresponding node entry of the given item.
            </summary>
            <param name="item">The item whose node entry is to be obtained.</param>
            <returns>Returns the corresponding node entry of the given item.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Insert(System.Int32,Syncfusion.Data.NodeEntry)">
            <summary>
            Inserts the given item at the specified index to the list of items in the group.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.RemoveAt(System.Int32)">
            <summary>
            Removes the corresponding item at the specified index from the list of items in the group.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Add(Syncfusion.Data.NodeEntry)">
            <summary>
            Adds the given item to the list of node entry in the top-level group.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Add(Syncfusion.Data.NodeEntry,System.Boolean)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
            <exception cref="T:System.InvalidOperationException">Item has to be of type RecordEntry</exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.InsertRecord(Syncfusion.Data.NodeEntry,System.Int32,System.Boolean)">
            <summary>
            Inserts the given item at the specified index in the group.
            </summary>
            <param name="item">The item to be inserted.</param>
            <param name="index">The index at which the item is to be inserted.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.GetGroupSortedIndex(Syncfusion.Data.Group,Syncfusion.Data.Group)">
            <summary>
            Gets the sorted index of the new group.
            </summary>
            <param name="group">The base group.</param>
            <param name="newGroup">The new group.</param>
            <returns>Returns the sorted index of the new group.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Clear">
            <summary>
            Clears all the items in the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Contains(Syncfusion.Data.NodeEntry)">
            <summary>
            Determines whether the specific item is found in the list of items in the group.
            </summary>
            <param name="item">The object to locate in the list of items in the group.</param>
            <returns>
            <b>True</b> if <paramref name="item"/> is found in the list of items in the group, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.CopyTo(Syncfusion.Data.NodeEntry[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Remove(Syncfusion.Data.NodeEntry)">
            <summary>
            Removes the first occurrence of a specific object from the list of items in the group.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>
            <b>True</b> if <paramref name="item"/> was successfully removed from the list, otherwise <b>false</b>. 
            This method also returns <b>false</b> if <paramref name="item"/> is not found in the list of items.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.RemoveNode(Syncfusion.Data.NodeEntry,System.Boolean)">
            <summary>
            Removes the first occurrence of a specific object from the list of items in the group.
            </summary>
            <param name="item">The object to be removed.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
            <returns>Gets the index at which the item is removed.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.RemoveNode(Syncfusion.Data.NodeEntry,System.Boolean,System.Int32@,System.Collections.Generic.List{Syncfusion.Data.NodeEntry}@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="isInSourceCollectionChange"></param>
            <param name="startIndex"></param>
            <param name="changedItems"></param>
            <param name="canremove">Denotes whether to remove the group or not. If it is the only record/group (including non visible) then can remove is true</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of items in the group.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection of items in the group.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.GroupDisplayElements.TopLevelGroup">
            <summary>
            Gets the top-level group of the current group's display elements.
            </summary>
            <value>The top-level group of the current group's display elements.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupDisplayElements.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Data.NodeEntry"/> at the specified index.
            </summary>
            <value>The <see cref="T:Syncfusion.Data.NodeEntry"/> at the specified index.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupDisplayElements.Count">
            <summary>
            Gets the total number of display elements contained in the top-level group.
            </summary>
            <returns>
            The total number of display elements contained in the top-level group.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.GroupDisplayElements.IsReadOnly">
            <summary>
            Gets a boolean value indicating whether the list of node entry in the top-level group is read-only.
            </summary>
            <returns>
            <b>True</b> if the list of node entry in the top-level group is read-only, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="T:Syncfusion.Data.NamespaceDoc">
            <summary>
            Provides classes and interface to process the data related operation like sorting,
            grouping and filtering for different IEnumerable collections.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.Group">
            <summary>
            Class that represents the group in SfDataGrid.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.GroupEntry">
            <summary>
            GroupEntry contains the list of groups for each sub-groups populated in the 
            <see cref="T:Syncfusion.Data.TopLevelGroup"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.NodeEntry">
            <summary>
            NodeEntry is the base class for the Grouping data structure used by <see cref="T:Syncfusion.Data.ICollectionViewAdv"/> interface. It exposes some base level
            details for the derived constructs to use.
            </summary>	
        </member>
        <member name="M:Syncfusion.Data.NodeEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the NodeEntry class.
            </summary>
            <param name="node">The parent node entry for the new node entry initialized.</param>
            <param name="level">The level of the node entry initialized.</param>
        </member>
        <member name="M:Syncfusion.Data.NodeEntry.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Data.NodeEntry"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.NodeEntry.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.NodeEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><b>True</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.Data.NodeEntry.Level">
            <summary>
            Gets or sets the level of the node entry.
            </summary>
            <value>The level of the node entry.</value>
        </member>
        <member name="P:Syncfusion.Data.NodeEntry.Parent">
            <summary>
            Gets or sets the parent node of the node entry.
            </summary>
            <value>The parent node of the node entry.</value>
        </member>
        <member name="P:Syncfusion.Data.NodeEntry.IsGroups">
            <summary>
            Gets or protectedly sets a value indicating whether the current node entry is a group.
            </summary>
            <value><b>True</b> if this instance is group; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.Data.NodeEntry.IsRecords">
            <summary>
            Gets or protectedly sets a value indicating whether the current node entry is a record.
            </summary>
            <value>
            <b>True</b> if this instance is records; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Syncfusion.Data.GroupEntry.#ctor(Syncfusion.Data.GroupEntry,System.Int32)">
            <summary>
            Initializes a new instance of the GroupEntry class.
            </summary>
            <param name="parent">The parent (group) of the group.</param>
            <param name="level">The level of the group.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupEntry.ToSummaryArray">
            <summary>
            Returns an array of summary details of each sub-group in the group.
            </summary>
            <returns>An array of summary details of each sub-group in the group.</returns>
        </member>
        <member name="P:Syncfusion.Data.GroupEntry.Groups">
            <summary>
            Gets the list of sub-groups in the group.
            </summary>
            <value>The list of sub-groups in the group.</value>
        </member>
        <member name="M:Syncfusion.Data.Group.#ctor(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Initializes a new instance of the Group class.
            </summary>
            <param name="parent">The parent (group) of the new group being initialized.</param>
            <param name="level">The level of the newly initialized group.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            A boolean value indicating whether to release both managed and unmanaged resources. 
            <b>True</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.OnGroupExpanded">
            <summary>
            This method fires when the current group is expanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.OnGroupCollapsed">
            <summary>
            This method fires when the current group is collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Data.Extensions.GroupResult})">
            <summary>
            Populates the given groups to the current group in the data grid.
            </summary>
            <param name="groupsToPopulate">The enumerable collection of groups to be populated.</param>
            <returns>Returns the total number of entries in top-Level group, which contains the 
            sum of the number of records in each group added.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Data.Extensions.GroupResult},System.Collections.Generic.List{Syncfusion.Data.Group},Syncfusion.Data.Group,System.Int32)">
            <summary>
            Populates the given groups to the current group in the data grid.
            </summary>
            <param name="groupsToPopulate">The enumerable collection of groups to be populated.</param>
            <param name="groups">The list of groups in the current group.</param>
            <param name="parent">The parent (group) of the group to be added.</param>
            <param name="level">The level of the group to be added.</param>
            <returns>Returns the total number of entries in top-Level group, which contains the 
            sum of the number of records in each group added.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateNewGroup(Syncfusion.Data.Group,Syncfusion.Data.Extensions.GroupResult,System.Int32)">
            <summary>
            Creates the new group based on the given credentials.
            </summary>
            <param name="parent">The parent (group) of the newly created group.</param>
            <param name="groupResult">The group result which contains the information of the groups.</param>
            <param name="level">The level at which the group is to be added.</param>
            <returns>Returns the newly created group.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetSummaryValue(System.String)">
            <summary>
            Gets the summary value for the given column name.
            </summary>
            <param name="columnName">The column name for which the summary value is to be obtained.</param>
            <returns>The summary value for the given column name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetSummaryValue(System.String,System.String)">
            <summary>
            Gets the summary value for the given column name and its aggregate type.
            </summary>
            <param name="columnName">The column name for which the summary value is to be obtained.</param>
            <param name="aggregateKey">The aggregate type of the column which is grouped.</param>
            <returns>The summary value for the given column name and its aggregate type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateNewGroup(Syncfusion.Data.Group,System.Object,System.Int32)">
            <summary>
            Creates the new group within the given parent group, with the given key and level.
            </summary>
            <param name="parent">The group which is to be the parent of the new group.</param>
            <param name="key">The key of the group to be added.</param>
            <param name="level">The level in which the group is to be added.</param>
            <returns>Returns the newly created group.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateDetailsForRecords(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Creates the details for the records in the group at the given level in the given parent group.
            </summary>
            <param name="parent">The parent group of the records, which is the bottom-level group.</param>
            <param name="level">The level of the group for which the details is to be created.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateDetailsForRecords(Syncfusion.Data.Group,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Creates the details for the records in the group at the given level in the given parent group.
            </summary>
            <param name="parent">The parent group of the records, which is the bottom-level group.</param>
            <param name="level">The level of the group for which the details is to be created.</param>
            <param name="source">The enumerable collection of source which contains the info of the details for records.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateDetailsForGroups(System.Int32)">
            <summary>
            Creates details for the groups at the given level.
            </summary>
            <param name="level">The level of the group for which details is to be added.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.SetDirty">
            <summary>
            Sets the group as dirty. When this is set to true, the YAmountCache will be re-computed for the whole group structure. 
            By calling this method, the height of the top-level group will be computed.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.GetYAmountCache">
            <summary>
            Gets the Y amount cache of the group. Each group knows the exact height of its child nodes. 
            The YAmountCache returns the y height of each group based on its inner node levels and 
            their expanded states.
            </summary>
            <returns>The Y amount cache which contains the y height of each group based on its inner node 
            levels and their expanded states.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetSourceYAmountCache">
            <summary>
            Gets the Y amount cache of the group. Each group knows the exact height of its child nodes. 
            The YAmountCache returns the y height of each group based on its inner node levels and 
            their expanded states.
            </summary>
            <returns>The Y amount cache which contains the y height of each group based on its inner node 
            levels and their expanded states.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetParentYAmountCache">
            <summary>
            Gets the Y amount cache of the parent, which contains the sum of the y height of each sub-groups (if any) based on its 
            inner node levels and their expanded states.
            </summary>
            <returns>The Y amount cache of the parent, which contains the sum of the y height of each sub-groups (if any) based on its 
            inner node levels and their expanded states.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.ResetYAmount">
            <summary>
            Resets the Y amount cache of the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.ResetSourceYAmount">
            <summary>
            Resets the Y amount cache of the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.RecalculateYAmount">
            <summary>
            Recalculates the Y amount cache of the group. Each group knows the exact height of its child nodes. 
            The Y amount cache returns the y height of each group based on its inner node levels and 
            their expanded states.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.RecalculateSourceYAmount">
            <summary>
            Recalculates the Y amount cache of the group. Each group knows the exact height of its child nodes. 
            The Y amount cache returns the y height of each group based on its inner node levels and 
            their expanded states.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.GetRecordAt(System.Int32)">
            <summary>
            Gets the record at the given index in the group.
            </summary>
            <param name="index">The index at which the record is to be obtained.</param>
            <returns>The record at the given index in the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetRecordIndex(Syncfusion.Data.RecordEntry)">
            <summary>
            Gets the record index for the given record in the group.
            </summary>
            <param name="record">The record for which the index is to be obtained.</param>
            <returns>The record index for the given record in the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetRecordIndex(System.Object)">
            <summary>
            Gets the record index for the given record in the group.
            </summary>
            <param name="item">The record for which the index is to be obtained.</param>
            <returns>The record index for the given record in the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.AddRecord(Syncfusion.Data.RecordEntry,System.Boolean)">
            <summary>
            Adds the given record to the group.
            </summary>
            <param name="record">The record to be added to the group.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.InsertRecord(System.Int32,Syncfusion.Data.RecordEntry,System.Boolean)">
            <summary>
            Inserts the given record at the given index in the group.
            </summary>
            <param name="index">The index at which the given record is to be inserted.</param>
            <param name="record">The record to be inserted.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.AddItem(System.Object)">
            <summary>
            Adds the given record to the source of the group. The item added to the source of the group 
            will not be added in the view of the group. If the user needs to add the item to the view and 
            to the underlying collection of the group, he can achieve his requirement by using 
            <see cref="M:Syncfusion.Data.Group.AddRecord(Syncfusion.Data.RecordEntry,System.Boolean)"/>.
            </summary>
            <param name="record">The record to be added to the group.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.RemoveRecord(Syncfusion.Data.RecordEntry,System.Boolean)">
            <summary>
            Removes the given record from the group.
            </summary>
            <param name="record">The record to be removed.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
            <returns>A boolean value indicating whether the given record is removed.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.RemoveItem(System.Object)">
            <summary>
            Removes the given record from the source of the group. If the item is not in the view, but 
            it is contained in the collection of the source of the group, it can be removed by this method.
            </summary>
            <param name="record">The record to be removed.</param>
            <returns>A boolean value indicating whether the given record is removed.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetRecordCount">
            <summary>
            Gets the number of records in the group, which contains the items in the group which are in 
            view.
            </summary>
            <returns>The number of records in the group, which contains the items in the group which are in 
            view.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetSourceCount">
            <summary>
            Gets the count of the items in the group, which contains all the items in the group.
            </summary>
            <returns>The count of the items in the group, which contains all the items in the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetRelationsCount">
            <summary>
            Gets the relations count of the group, that link grid and allow navigation from parent grid to child grid.
            </summary>
            <returns>The relations count of the group, that link grid and allow navigation from parent grid to child grid.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetGroupsCount">
            <summary>
            Gets the number of groups in the group, if it contains sub-groups. 
            </summary>
            <returns>The number of groups in the group, if it contains sub-groups.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of items in the group.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection of items in the group.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.Group.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.Group.Parent">
            <summary>
            Gets the parent (group) of the current group.
            </summary>
            <value>The parent group of the current group.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.Key">
            <summary>
            Gets or sets the key of the group. Each group will have the key, the groups can be accessed 
            easily by its key.
            </summary>
            <value>The key of the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.ItemsCount">
            <summary>
            Gets the number of records in the group, if the current group is the bottom-level group. 
            and number of groups in the group, if the current group is not the bottom-level group.
            </summary>
            <value>The number of records in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.IsExpanded">
            <summary>
            Gets or sets a boolean value indicating whether the current group is expanded.
            </summary>
            <value>
            <b>True</b> if the current group is expanded, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.Group.IsBottomLevel">
            <summary>
            Gets or protectedly sets a value indicating whether the current group is bottom-level group. 
            Bottom-level group contains the list of records for the group.
            </summary>
            <value>
            <b>True</b> if the current instance is bottom-level group, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.Group.IsTopLevelGroup">
            <summary>
            Gets a value indicating whether the current group is the top-level group. 
            Top-level group will be the first-level group. All groups will have the root group which is the 
            top-level group.
            </summary>
            <value>
            <b>True</b> if the current group is the top level group, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.Group.Details">
            <summary>
            Gets or protectedly sets the details of the group which can be either sub-groups or records collection 
            of the group.
            </summary>
            <value>The details of the group which can be either sub-groups or records collection 
            of the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.Records">
            <summary>
            Gets the records of the group, if the <see cref="P:Syncfusion.Data.Group.Details"/> is the list of records.
            </summary>
            <value>The records of the group, if the <see cref="P:Syncfusion.Data.Group.Details"/> is the list of records.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.Source">
            <summary>
            Gets the source of the group which contains the list of all the items in the group.
            </summary>
            <value>The source of the group which contains the list of all the items in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.Groups">
            <summary>
            Gets the list of groups in the group, if the <see cref="P:Syncfusion.Data.Group.Details"/> is the list of groups.
            </summary>
            <value>The list of groups in the group, if the <see cref="P:Syncfusion.Data.Group.Details"/> is the list of groups.</value>
        </member>
        <member name="E:Syncfusion.Data.Group.PropertyChanged">
            <summary>
            Occurs when the property of the group is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.Group.SummaryDetails">
            <summary>
            Gets or sets the summary details of the group.
            </summary>
            <value>The summary details of the group.</value>
        </member>
        <member name="T:Syncfusion.Data.GroupComparer">
            <summary>
            Compares two groups to perform sort operation based on the keys of the groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupComparer.#ctor">
            <summary>
            Initializes a new instance of the GroupComparer class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupComparer.Compare(Syncfusion.Data.Group,Syncfusion.Data.Group)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="group1">The first object to compare.</param>
            <param name="group2">The second object to compare.</param>
            <returns>
            Returns a value <b>Less than zero</b>, if <paramref name="group1"/> is less than <paramref name="group2"/>.
            <para/>
            Returns <b>Zero</b>, if <paramref name="group1"/> equals <paramref name="group2"/>.
            <para/>
            Returns a value <b>Greater than zero</b>, <paramref name="group1"/> is greater than <paramref name="group2"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.GroupComparer.SortDirection">
            <summary>
            Gets or sets the direction of sorting.
            </summary>
            <value>The direction of sorting.</value>
        </member>
        <member name="T:Syncfusion.Data.DisplayElementEnumerator">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.#ctor(Syncfusion.Data.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.DisplayElementEnumerator"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>        
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.Data.DisplayElementEnumerator.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Syncfusion.Data.DisplayElementEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.DisplayElementEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Syncfusion.Data.TraversalHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.GroupEnumerator">
            <summary>
            Enumerates any <see cref="P:Syncfusion.Data.GroupEnumerator.Group"/> class and lists out all the elements in a one-dimensional array.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.#ctor(Syncfusion.Data.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.GroupEnumerator"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.Data.GroupEnumerator.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.GroupEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Syncfusion.Data.GroupingExtensions">
            <summary>
            Extensions for <see cref="T:Syncfusion.Data.Group"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.ExpandAllAtLevel(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Expands all groups at the specified level.
            </summary>
            <param name="group">The group.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.CollapseAllAtLevel(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Collapses all groups at the specified level.
            </summary>
            <param name="group">The group.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.ExpandAll(Syncfusion.Data.Group)">
            <summary>
            Expands all groups.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.CollapseAll(Syncfusion.Data.Group)">
            <summary>
            Collapses all groups.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.GetTopLevelGroup(Syncfusion.Data.NodeEntry)">
            <summary>
            Gets the top level group.
            </summary>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Data.GroupRecordEntry">
            <summary>
            Contains a list of records with its related summaries and unfiltered records. The <see cref="T:Syncfusion.Data.Group"/> class uses
            GroupRecordEntry if the <c>Group.IsBottomLevel = true;</c>.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the GroupRecordEntry class.
            </summary>
            <param name="parent">The parent node of the group record entry.</param>
            <param name="level">The level of the group record entry.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32,System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the GroupRecordEntry class.
            </summary>
            <param name="parent">The parent node of the group record entry.</param>
            <param name="level">The level of the group record entry.</param>
            <param name="source">The IEnumerable source of the group record entry.</param>
            <param name="filterPredicate">The filter predicate, which filters the items to be displayed 
            in view of the group from the given source.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.InitializeRecords(Syncfusion.Data.NodeEntry)">
            <summary>
            Initializes the records in the group record entry.
            </summary>
            <param name="parent">The parent node of the group record entry.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><b>True</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.PopulateRecords(System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Populates the records to the group record entry from the given source and based on the given 
            filter.
            </summary>
            <param name="source">The IEnumerable source of the items to be populated in the 
            group record entry.</param>
            <param name="filterPredicate">The filter predicate, which filters the items to be displayed 
            in view of the group from the given source.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.CreateRecord(System.Object)">
            <summary>
            Creates the new record entry for the given data.
            </summary>
            <param name="data">The data for the new record entry created.</param>
            <returns>Returns the record entry created for the given data.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.GetRecordsCount">
            <summary>
            Gets the number of items displayed in view in the group record entry.
            </summary>
            <returns>Returns the number of items displayed in view in the group record entry.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.GetRelationsCount">
            <summary>
            Gets the relations count of the group record entry, that link grid and allow navigation from 
            parent grid to child grid.
            </summary>
            <returns>The relations count of the group record entry, that link grid and allow navigation from 
            parent grid to child grid.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.ToArray">
            <summary>
            Returns the records of the group record entry as the <see cref="T:System.Array"/> of objects.
            </summary>
            <returns>Returns the records of the group record entry in the <see cref="T:System.Array"/> of objects.</returns>
        </member>
        <member name="P:Syncfusion.Data.GroupRecordEntry.UnfilteredRecords">
            <summary>
            Gets the unfiltered records, which contains all the items (both items displayed in view and 
            underlying collection) in the group record entry.
            </summary>
            <value>The unfiltered records which contains all the items (both items displayed in view and 
            underlying collection) in the group record entry.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupRecordEntry.Records">
            <summary>
            Gets or protectedly sets the records, which contains only the items displayed in view in 
            the group record entry.
            </summary>
            <value>The records, which contains only the items displayed in view in 
            the group record entry.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupRecordEntry.Summaries">
            <summary>
            Gets the list of summaries for the bottom level records in the group record entry.
            </summary>
            <value>The list of summaries for the bottom level records in the group record entry.</value>
        </member>
        <member name="T:Syncfusion.Data.RecordEntry">
            <summary>
            Contains the underlying business object bound to <see cref="T:Syncfusion.Data.ICollectionViewAdv"/> instance. 
            Nested records can be specified / controlled using the <see cref="M:Syncfusion.Data.RecordEntry.PopulateChildView(Syncfusion.Data.ICollectionViewAdv,System.Int32,System.String,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the RecordEntry class.
            </summary>
            <param name="parent">The parent node of the of the record entry.</param>
            <param name="level">The level of the record initialized.</param>
            <param name="data">The data for the record entry initialized.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><b>True</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.OnExpanded">
            <summary>
            This method fires when the current record entry is expanded.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.OnCollapsed">
            <summary>
            This method fires when the current record entry is collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.PopulateChildView(Syncfusion.Data.ICollectionViewAdv,System.Int32,System.String)">
            <summary>
            Populates the child view with the given collection view, at the given level and the given relation.
            </summary>
            <param name="collectionView">The collection view of the child of the record entry.</param>
            <param name="level">The level at which the child is to be added.</param>
            <param name="relationName">The relation name representing the relation between the child view and the 
            record entry.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.PopulateChildView(Syncfusion.Data.ICollectionViewAdv,System.Int32,System.String,System.Boolean)">
            <summary>
            Populates the child view with the given collection view, at the given level and the given relation.
            </summary>
            <param name="collectionView">The collection view of the child of the record entry.</param>
            <param name="level">The level at which the child is to be added.</param>
            <param name="relationName">The relation name representing the relation between the child view and the 
            record entry.</param>
            <param name="isNestedExpanded">A boolean value indicating whether the record entry is expanded.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the data objects in the record entry.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the data objects in the record entry.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.CompareTo(Syncfusion.Data.RecordEntry)">
            <summary>
            Compares the current instance with the given instance.
            </summary>
            <param name="other">The other instance of object to compare with.</param>
            <returns>Returns a value indicating the comparison of the current and the given instance.</returns>
        </member>
        <member name="P:Syncfusion.Data.RecordEntry.Data">
            <summary>
            Gets or sets the data of the record entry.
            </summary>
            <value>The data of the record entry.</value>
        </member>
        <member name="P:Syncfusion.Data.RecordEntry.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the current record entry is expanded.
            </summary>
            <value>
            <b>True</b> if the current record entry is expanded, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.RecordEntry.ChildViews">
            <summary>
            Gets or sets the child views of the record entry, which are the views in the details view of 
            the record entry.
            </summary>
            <value>The child views of the record entry, which are the views in the details view of 
            the record entry.</value>
        </member>
        <member name="T:Syncfusion.Data.NestedRecordEntry">
            <summary>
            Contains a list of nested records for each <see cref="T:Syncfusion.Data.RecordEntry"/> and nested <see cref="T:Syncfusion.Data.ICollectionViewAdv"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.NestedRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the NestedRecordEntry class.
            </summary>
            <param name="parent">The parent node of the nested record entry.</param>
            <param name="level">The level of the nested record entry.</param>
        </member>
        <member name="M:Syncfusion.Data.NestedRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><b>True</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.NestedLevel">
            <summary>
            Gets or sets the nested level of the nested record entry.
            </summary>
            <value>The nested level of the nested record entry.</value>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.IsNestedLevelExpanded">
            <summary>
            Gets or sets a value indicating whether the nested record entry is expanded.
            </summary>
            <value>
            <b>True</b> if the nested record entry is expanded; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.View">
            <summary>
            Gets or sets the collection view of the nested record entry.
            </summary>
            <value>The collection view of the nested record entry.</value>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.NestedRecords">
            <summary>
            Gets the nested records of the nested record entry.
            </summary>
            <value>The nested records of the nested record entry.</value>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.ExpandedLevel">
            <summary>
            Gets or sets the level up to which the nested record is expanded.
            </summary>
            <value>The level up to which the nested record is expanded.</value>
            <remarks>
            ExpandedLevel is set while calling ExpandAllDetailsView method and reset when records are expanded/collapsed individually.
            </remarks>
        </member>
        <member name="T:Syncfusion.Data.IRecordsEntryList">
            <summary>
            Interface which declares the methods to be implemented when maintaining the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.SuspendUpdates">
            <summary>
            Suspends the view updates. When the view is suspended, the change in the underlying data 
            will not be updated in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.ResumeUpdates">
            <summary>
            Resumes the view updates. When the view is resumed, the view will be refreshed by which the 
            change in the underlying data will be updated in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.IndexOfRecord(System.Object)">
            <summary>
            Returns the index of the given data in the underlying collection.
            </summary>
            <param name="data">The data whose index is to be obtained.</param>
            <returns>Returns the index of the given data in the underlying collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.GetSource">
            <summary>
            Returns the source of the record entry list.
            </summary>
            <returns>Returns the source of the record entry list.</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.GetRecordEntry(System.Int32,System.Object)">
            <summary>
            Returns the object of RecordEntry for the specified record index and data in the underlying 
            collection.
            </summary>
            <param name="data">The data whose record entry is to be obtained.</param>
            <param name="recordIndex">The index of the record whose record entry instance is to be obtained.</param>
            <returns>Returns the object of RecordEntry for the specified record index and data in the underlying 
            collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.GetRecord(System.Object)">
            <summary>
            Returns the object of RecordEntry for the specified data in the underlying collection.
            </summary>
            <param name="data">The data whose record entry is to be obtained.</param>
            <returns>Returns the RecordEntry based on data.</returns>
        </member>
        <member name="P:Syncfusion.Data.IRecordsEntryList.IsInSuspend">
            <summary>
            Gets a boolean value indicating whether the view updates is currently suspended.
            </summary>
            <value>A boolean value indicating whether the view updates is currently suspended.</value>
        </member>
        <member name="T:Syncfusion.Data.ListIndexer`1">
            <summary>
            Implements the list indexer, which maintains the objects in the list, and implements 
            methods that updates the changes in the underlying list in the view.
            </summary>
            <typeparam name="T">The type parameter indicating the type of objects in the list.</typeparam>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of ListIndexer class.
            </summary>
            <param name="list">The source of items for the ListIndexer initialized.</param>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.Dispose">
            <summary>
            Disposes all the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.Dispose(System.Boolean)">
            <summary>
            Disposes the unmanaged and optionally managed resources.
            </summary>
            <param name="isDisposing">A boolean value indicating whether to dispose both manged and 
            unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.Suspend">
            <summary>
            Suspends the view updates. When the view is suspended, the change in the underlying data 
            will not be updated in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.Resume">
            <summary>
            Resumes the view updates. When the view is resumed, the view will be refreshed by which the 
            change in the underlying data will be updated in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.Find(System.Object)">
            <summary>
            Finds the index of the given item in the collection.
            </summary>
            <param name="item">The item whose index is to be obtained.</param>
            <returns>The index of the given item in the collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.GetRecordEntry(System.Object)">
            <summary>
            Returns the object of RecordEntry for the specified data in the underlying collection.
            </summary>
            <param name="item">The data whose record entry is to be obtained.</param>
            <returns>Returns the RecordEntry based on data.</returns>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.Find(`0)">
            <summary>
            Finds the index of the given item in the collection.
            </summary>
            <param name="item">The item whose index is to be obtained.</param>
            <returns>The index of the given item in the collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.ToString">
            <summary>
            Returns the string representing the count of items in the collection.
            </summary>
            <returns>The string representing the count of items in the collection.</returns>
        </member>
        <member name="P:Syncfusion.Data.ListIndexer`1.IsInSuspend">
            <summary>
            Gets a boolean value indicating whether the view updates is suspended.
            </summary>
            <value>A boolean value indicating whether the view updates is suspended.</value>
        </member>
        <member name="T:Syncfusion.Data.IndexObject`1">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.IndexObject`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the IndexObject class.
            </summary>
            <param name="loc">The index at which the object is to be inserted.</param>
            <param name="val">The object to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Data.IndexObject`1.CompareTo(`0)">
            <summary>
            Compares the current instance with the given instance.
            </summary>
            <param name="other">The other instance of object to compare with.</param>
            <returns>Returns a value indicating the comparison of the current and the given instance.</returns>
        </member>
        <member name="P:Syncfusion.Data.IndexObject`1.Location">
            <summary>
            Gets or sets the index of the object.
            </summary>
            <value>The index of the object.</value>
        </member>
        <member name="P:Syncfusion.Data.IndexObject`1.Value">
            <summary>
            Gets or sets the value of the object.
            </summary>
            <value>The value of the object.</value>
        </member>
        <member name="T:Syncfusion.Data.IndexObject`1.IndexObjectComparer">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.IndexObject`1.IndexObjectComparer.Compare(Syncfusion.Data.IndexObject{`0},Syncfusion.Data.IndexObject{`0})">
            <summary>
            Compares the given two objects.
            </summary>
            <param name="obj1">The object 1.</param>
            <param name="obj2">The object 2.</param>
            <returns>The value indicating the comparison of the given two objects.</returns>
        </member>
        <member name="T:Syncfusion.Data.RecordsEntryList">
            <summary>
            Class that maintains the collection of RecordsEntry as the list, by implementing the RecordListBase.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.RecordsListBase">
            <summary>
            The class that maintains the collection of records as a list, by implementing the methods 
            declared in the IRecordEntryList.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.RecordsListBase.internalList">
            <summary>
            Gets the collection of records in the collection view.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.RecordsListBase.indicesList">
            <summary>
            Gets the collection of records in the collection view in the <see cref="T:Syncfusion.Data.ListIndexer`1"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.#ctor">
            <summary>
            Initializes a new instance of the RecordsListBase class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.OnInitialize">
            <summary>
            Initialize the internalList and indicesList collection.
            </summary>
            <remarks>
            The indicesList will not be initialized in VirtualRecordsList
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.GetRecord(System.Int32)">
            <summary>
            Returns the object of RecordEntry for the specified record index.
            </summary>
            <param name="index">The index of the record whose record entry instance is to be obtained.</param>
            <returns>Returns the object of RecordEntry for the specified record index.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.GetRecord(System.Object)">
            <summary>
            Returns the object of RecordEntry for the specified data in the underlying 
            collection.
            </summary>
            <param name="data">The data whose record entry is to be obtained.</param>
            <returns>Returns the object of RecordEntry for the specified data in the underlying 
            collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.SuspendUpdates">
            <summary>
            Suspends the view updates. When the view is suspended, the change in the underlying data 
            will not be updated in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.ResumeUpdates">
            <summary>
            Resumes the view updates. When the view is resumed, the view will be refreshed by which the 
            change in the underlying data will be updated in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.IndexOfRecord(System.Object)">
            <summary>
            Returns the index of the given data in the underlying collection.
            </summary>
            <param name="data">The data whose index is to be obtained.</param>
            <returns>Returns the index of the given data in the underlying collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.GetSource">
            <summary>
            Returns the source of the record entry collection.
            </summary>
            <returns>Returns the source of the record entry collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.GetRecordEntry(System.Int32,System.Object)">
            <summary>
            Returns the object of RecordEntry for the specified record index and data in the underlying 
            collection.
            </summary>
            <param name="data">The data whose record entry is to be obtained.</param>
            <param name="recordIndex">The index of the record whose record entry instance is to be obtained.</param>
            <returns>Returns the object of RecordEntry for the specified record index and data in the underlying 
            collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.IndexOf(Syncfusion.Data.RecordEntry)">
            <summary>
            Returns the index of the given record entry in the underlying collection.
            </summary>
            <param name="item">The record entry whose index is to be obtained.</param>
            <returns>Returns the index of the given record entry in the underlying collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Insert(System.Int32,Syncfusion.Data.RecordEntry)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Add(Syncfusion.Data.RecordEntry)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Add(System.Object)">
            <summary>
            Adds the specified data to the record collection.
            </summary>
            <param name="data">The data to be added to the record collection.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Clear">
            <summary>
            Clears all the items in the record collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Contains(Syncfusion.Data.RecordEntry)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains the given item.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <b>True</b> if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.CopyTo(Syncfusion.Data.RecordEntry[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Remove(Syncfusion.Data.RecordEntry)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.RecordsListBase"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged and optionally releases the managed resources used by the <see cref="T:Syncfusion.Data.RecordsListBase"/> class.
            </summary>
            <param name="isDisposing">A boolean value indicating whether to release both managed and unmanaged resources.</param>                        
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method fires when the underlying collection is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains 
            the data for the event.</param>
        </member>
        <member name="P:Syncfusion.Data.RecordsListBase.IsInSuspend">
            <summary>
            Gets a boolean value indicating whether the view updates is suspended.
            </summary>
            <value>A boolean value indicating whether the view updates is suspended.</value>
        </member>
        <member name="P:Syncfusion.Data.RecordsListBase.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.RecordsListBase.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            <b>True</b> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.RecordsListBase.Item(System.Int32)">
            <summary>
            Gets the record entry object for the data in the given index.
            </summary>
            <param name="index">The index at which the record entry is to be obtained.</param>
            <returns>The record entry object for the data in the given index.</returns>
        </member>
        <member name="E:Syncfusion.Data.RecordsListBase.CollectionChanged">
            <summary>
            Occurs when the underlying collection is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsEntryList.#ctor">
            <summary>
            Initializes a new instance of the RecordsEntryList class.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.SummaryAggregateBase">
            <summary>
            Class that contains the methods and properties for all the aggregation calculations.
            It serves as the base for all the aggregators.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.ISummaryExpressionAggregate">
            <summary>
            Defines method to calculate the summary for expression fields.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.ISummaryAggregate">
            <summary>
            Defines common functionality for a custom aggregate function implementation.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ISummaryAggregate.CalculateAggregateFunc">
            <summary>
            Calculates the custom aggregate func for the specified summary column.
            </summary>        
            <returns>The custom aggregate func for the specified summary column.</returns>
        </member>
        <member name="M:Syncfusion.Data.ISummaryExpressionAggregate.CalculateAggregateExpressionFunc">
            <summary>
            Calculates the aggregate expression func.
            </summary>
            <returns>The aggregate expression func.</returns>
        </member>
        <member name="T:Syncfusion.Data.ISummaryAdjustable">
            <summary>
            Defines method to calculate the summary in optimized way during data updates.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ISummaryAdjustable.AdjustSummaryCalculation(System.Object,System.Object,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Int32)">
            <summary>
            Adjusts the summary calculation based on the given values.
            </summary>
            <param name="currentValue">The current summary value.</param>
            <param name="oldValue">The old summary value.</param>
            <param name="newValue">The new summary value.</param>
            <param name="recordAction">The collection changed action.</param>
            <param name="propertyName">The name of the property that is changed.</param>
            <param name="recordCount">The count of the records in the group.</param>
            <returns>Returns the modified value of the summary calculation based on the given values.</returns>
        </member>
        <member name="T:Syncfusion.Data.ISummaryAggregateForGroup">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.ISummaryAggregateForGroup.CalculateAggregateFuncForGroup">
            <summary>
            Calculates the aggregate func.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Data.ISummaryParallelizable">
            <summary>
            Implement this interface to know if the Summary expressions can use PLINQ
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.SummaryAggregateBase.AdjustSummaryCalculation(System.Object,System.Object,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Int32)">
            <summary>
            Adjusts the summary calculation based on the given values.
            </summary>
            <param name="currentValue">The current summary value.</param>
            <param name="oldValue">The old summary value.</param>
            <param name="newValue">The new summary value.</param>
            <param name="recordAction">The collection changed action.</param>
            <param name="propertyName">The name of the property that is changed.</param>
            <param name="recordCount">The count of the records in the group.</param>
            <returns>Returns the modified value of the summary calculation based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.SummaryAggregateBase.CalculateAggregateFunc">
            <summary>
            Calculates the custom aggregate for the specified summary column.
            </summary>        
            <returns>The custom aggregate for the specified summary column.</returns>
        </member>
        <member name="M:Syncfusion.Data.SummaryAggregateBase.CalculateAggregateFuncForGroup">
            <summary>
            Calculates the aggregate func for the group.
            </summary>
            <returns>The aggregate func for the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.SummaryAggregateBase.CalculateAggregateExpressionFunc">
            <summary>
            Calculates the aggregate expression func for the group.
            </summary>
            <returns>The aggregate expression func for the group.</returns>
        </member>
        <member name="P:Syncfusion.Data.SummaryAggregateBase.CanParallelize">
            <summary>
            Gets or sets a boolean value indicating whether to allow parallelize or not.
            </summary>
            <value>A boolean value indicating whether to allow parallelize or not.</value>
        </member>
        <member name="T:Syncfusion.Data.CountAggregate">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.CountAggregate.CalculateAggregateFunc">
            <summary>
            Calculates the aggregate for the specified summary column.
            </summary>        
            <returns>The aggregate for the specified summary column.</returns>
        </member>
        <member name="M:Syncfusion.Data.CountAggregate.CalculateAggregateFuncForGroup">
            <summary>
            Calculates the aggregate func for the group.
            </summary>
            <returns>The aggregate func for the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.CountAggregate.AdjustSummaryCalculation(System.Object,System.Object,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Int32)">
            <summary>
            Adjusts the summary calculation based on the given values.
            </summary>
            <param name="currentValue">The current summary value.</param>
            <param name="oldValue">The old summary value.</param>
            <param name="newValue">The new summary value.</param>
            <param name="recordAction">The collection changed action.</param>
            <param name="propertyName">The name of the property that is changed.</param>
            <param name="recordCount">The count of the records in the group.</param>
            <returns>Returns the modified value of the summary calculation based on the given values.</returns>
        </member>
        <member name="P:Syncfusion.Data.CountAggregate.Count">
            <summary>
            Gets or sets the number of the items in the group.
            </summary>
            <value>The number of the items in the group.</value>
        </member>
        <member name="T:Syncfusion.Data.Int32Aggregate">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.Int32Aggregate.AdjustSummaryCalculation(System.Object,System.Object,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Int32)">
            <summary>
            Adjusts the summary calculation based on the given values.
            </summary>
            <param name="currentValue">The current summary value.</param>
            <param name="oldValue">The old summary value.</param>
            <param name="newValue">The new summary value.</param>
            <param name="recordAction">The collection changed action.</param>
            <param name="propertyName">The name of the property that is changed.</param>
            <param name="recordCount">The count of the records in the group.</param>
            <returns>Returns the modified value of the summary calculation based on the given values.</returns>
        </member>
        <member name="P:Syncfusion.Data.Int32Aggregate.Count">
            <summary>
            Gets or sets the number of items in the group.
            </summary>
            <value>The number of items in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Int32Aggregate.Max">
            <summary>
            Gets or sets the maximum value of the grouped column in the group.
            </summary>
            <value>The maximum value of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Int32Aggregate.Min">
            <summary>
            Gets or sets the minimum value of the grouped column in the group.
            </summary>
            <value>The minimum value of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Int32Aggregate.Average">
            <summary>
            Gets or sets the average of the values in the grouped column in the group.
            </summary>
            <value>The average of the values in the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Int32Aggregate.Sum">
            <summary>
            Gets or sets the sum of the values in the grouped column in the group.
            </summary>
            <value>The sum of the values in the grouped column in the group.</value>
        </member>
        <member name="T:Syncfusion.Data.DoubleAggregate">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.DoubleAggregate.AdjustSummaryCalculation(System.Object,System.Object,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Int32)">
            <summary>
            Adjusts the summary calculation based on the given values.
            </summary>
            <param name="currentValue">The current summary value.</param>
            <param name="oldValue">The old summary value.</param>
            <param name="newValue">The new summary value.</param>
            <param name="recordAction">The collection changed action.</param>
            <param name="propertyName">The name of the property that is changed.</param>
            <param name="recordCount">The count of the records in the group.</param>
            <returns>Returns the modified value of the summary calculation based on the given values.</returns>
        </member>
        <member name="P:Syncfusion.Data.DoubleAggregate.Count">
            <summary>
            Gets or sets the number of items in the group.
            </summary>
            <value>The number of items in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DoubleAggregate.Max">
            <summary>
            Gets or sets the maximum value of the grouped column in the group.
            </summary>
            <value>The maximum value of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DoubleAggregate.Min">
            <summary>
            Gets or sets the minimum value of the grouped column in the group.
            </summary>
            <value>The minimum value of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DoubleAggregate.Average">
            <summary>
            Gets or sets the average of the values in the grouped column in the group.
            </summary>
            <value>The average of the values in the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DoubleAggregate.Sum">
            <summary>
            Gets or sets the sum of the values in the grouped column in the group.
            </summary>
            <value>The sum of the values in the grouped column in the group.</value>
        </member>
        <member name="T:Syncfusion.Data.DataTableAggregator">
             <summary>
             The class that contains the aggregation calculations of the group when the items source 
             of the datagrid is DataTable.
             </summary>
             <code lang="C#"><![CDATA[
             internal class GridDataTableCountAggregate : GridDataTableAggregator, ISummaryAggregate
                 {
                     public GridDataTableCountAggregate(DataTable table)
                         : base(table)
                     {
                     }
             
             
                     public int Count 
             
                     { 
             
                         get; 
             
                         set; 
             
                     } 
             
                     #region IGridDataSummaryAggregate Members
                     
                     public Action&lt;IEnumerable, string, PropertyDescriptor&gt; 
                     
                     CalculateAggregateFunc() 
                     { 
                         return (items, property, pd) = &gt; 
                         { 
                             var table = this.GetClonedTable(items); 
                             if (pd.Name == &quot;Count&quot;) 
                                 this.Count = (int)table.Compute(string.Format(&quot;Count({0})&quot;, property), string.Empty); 
             
                             } 
             
                         }; 
             
                     } 
             
                     #endregion 
             
                 }
            ]]></code>
        </member>
        <member name="M:Syncfusion.Data.DataTableAggregator.#ctor">
            <summary>
            Initializes a new instance of the DataTableAggregator class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableAggregator.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the DataTableAggregator class.
            </summary>
            <param name="table">The reference of the data table which is bind as the items source 
            of SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableAggregator.GetClonedTable(System.Collections.IEnumerable,System.Data.DataTable)">
            <summary>
            Create DataTable by cloning the given data table and populating it with the given 
            IEnumerable items. 
            </summary>
            <param name="items">The IEnumerable items to be populated in the data table created.</param>
            <param name="dataTable">The data table from which the new data table is to be cloned.</param>
            <returns>The DataTable created by cloning the given data table and populating it with the given 
            IEnumerable items.</returns>
        </member>
        <member name="P:Syncfusion.Data.DataTableAggregator.Table">
            <summary>
            Gets the reference of the data table in the datagrid.
            </summary>
            <value>The reference of the data table in the datagrid.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableAggregator.ClonedDataTable">
            <summary>
            To maintain cloned DataTable for summary calculation
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableCountAggregate.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the DataTableCountAggregate class.
            </summary>
            <param name="table">The reference of the data table which is bind as the items source 
            of SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableCountAggregate.CalculateAggregateFunc">
            <summary>
            Calculates the custom aggregate for the specified summary column.
            </summary>        
            <returns>The custom aggregate for the specified summary column.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableCountAggregate.CalculateAggregateFuncForGroup">
            <summary>
            Calculates the aggregate func for the group.
            </summary>
            <returns>The aggregate func for the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableCountAggregate.AdjustSummaryCalculation(System.Object,System.Object,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Int32)">
            <summary>
            Adjusts the summary calculation based on the given values.
            </summary>
            <param name="currentValue">The current summary value.</param>
            <param name="oldValue">The old summary value.</param>
            <param name="newValue">The new summary value.</param>
            <param name="recordAction">The collection changed action.</param>
            <param name="propertyName">The name of the property that is changed.</param>
            <param name="recordCount">The count of the records in the group.</param>
            <returns>Returns the modified value of the summary calculation based on the given values.</returns>
        </member>
        <member name="P:Syncfusion.Data.DataTableCountAggregate.Count">
            <summary>
            Gets or sets the number of items in the group.
            </summary>
            <value>The number of items in the group.</value>
        </member>
        <member name="M:Syncfusion.Data.DataTableInt32Aggregate.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the DataTableInt32Aggregate class.
            </summary>
            <param name="table">The reference of the data table which is bind as the items source 
            of SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableInt32Aggregate.CalculateAggregateFunc">
            <summary>
            Calculates the custom aggregate for the specified summary column.
            </summary>        
            <returns>The custom aggregate for the specified summary column.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableInt32Aggregate.CalculateAggregateFuncForGroup">
            <summary>
            Calculates the aggregate func for the group.
            </summary>
            <returns>The aggregate func for the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableInt32Aggregate.AdjustSummaryCalculation(System.Object,System.Object,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Int32)">
            <summary>
            Adjusts the summary calculation based on the given values.
            </summary>
            <param name="currentValue">The current summary value.</param>
            <param name="oldValue">The old summary value.</param>
            <param name="newValue">The new summary value.</param>
            <param name="recordAction">The collection changed action.</param>
            <param name="propertyName">The name of the property that is changed.</param>
            <param name="recordCount">The count of the records in the group.</param>
            <returns>Returns the modified value of the summary calculation based on the given values.</returns>
        </member>
        <member name="P:Syncfusion.Data.DataTableInt32Aggregate.Count">
            <summary>
            Gets or sets the number of items in the group.
            </summary>
            <value>The number of items in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableInt32Aggregate.Max">
            <summary>
            Gets or sets the maximum value of the grouped column in the group.
            </summary>
            <value>The maximum value of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableInt32Aggregate.Min">
            <summary>
            Gets or sets the minimum value of the grouped column in the group.
            </summary>
            <value>The minimum value of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableInt32Aggregate.Average">
            <summary>
            Gets or sets the average of the values in the grouped column in the group.
            </summary>
            <value>The average of the values in the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableInt32Aggregate.Sum">
            <summary>
            Gets or sets the sum of the values in the grouped column in the group.
            </summary>
            <value>The sum of the values in the grouped column in the group.</value>
        </member>
        <member name="M:Syncfusion.Data.DataTableDoubleAggregate.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the DataTableDoubleAggregate class.
            </summary>
            <param name="table">The reference of the data table which is bind as the items source 
            of SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.DataTableDoubleAggregate.CalculateAggregateFunc">
            <summary>
            Calculates the custom aggregate for the specified summary column.
            </summary>        
            <returns>The custom aggregate for the specified summary column.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableDoubleAggregate.CalculateAggregateFuncForGroup">
            <summary>
            Calculates the aggregate func for the group.
            </summary>
            <returns>The aggregate func for the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.DataTableDoubleAggregate.AdjustSummaryCalculation(System.Object,System.Object,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Int32)">
            <summary>
            Adjusts the summary calculation based on the given values.
            </summary>
            <param name="currentValue">The current summary value.</param>
            <param name="oldValue">The old summary value.</param>
            <param name="newValue">The new summary value.</param>
            <param name="recordAction">The collection changed action.</param>
            <param name="propertyName">The name of the property that is changed.</param>
            <param name="recordCount">The count of the records in the group.</param>
            <returns>Returns the modified value of the summary calculation based on the given values.</returns>
        </member>
        <member name="P:Syncfusion.Data.DataTableDoubleAggregate.Count">
            <summary>
            Gets or sets the number of items in the group.
            </summary>
            <value>The number of items in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableDoubleAggregate.Max">
            <summary>
            Gets or sets the maximum value of the grouped column in the group.
            </summary>
            <value>The maximum value of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableDoubleAggregate.Min">
            <summary>
            Gets or sets the minimum value of the grouped column in the group.
            </summary>
            <value>The minimum value of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableDoubleAggregate.Average">
            <summary>
            Gets or sets the average of the values in the grouped column in the group.
            </summary>
            <value>The average of the values in the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.DataTableDoubleAggregate.Sum">
            <summary>
            Gets or sets the sum of the values in the grouped column in the group.
            </summary>
            <value>The sum of the values in the grouped column in the group.</value>
        </member>
        <member name="T:Syncfusion.Data.SummaryCreator">
            <summary>
            Class that creates the summary for the grouped column in the SfDataGrid.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.SummaryCreator.GetSummaryDisplayTextForRow(Syncfusion.Data.SummaryRecordEntry,Syncfusion.Data.ICollectionViewAdv,System.String)">
            <summary>
            Gets the summary display text for the summary row based on the given values.
            </summary>
            <param name="summaryEntry">The summary record entry which contains the information of the 
            summary values of the group.</param>
            <param name="collectionView">The underlying collection view of the group.</param>
            <param name="columnHeaderName">The column header name of the grouped column.</param>
            <returns>The summary display text for the summary row based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.SummaryCreator.GetSummaryDisplayText(Syncfusion.Data.SummaryRecordEntry,System.String,Syncfusion.Data.ICollectionViewAdv)">
            <summary>
            Gets the summary display text based on the given values.
            </summary>
            <param name="summaryEntry">The summary record entry which contains the information of the 
            summary values of the group.</param>
            <param name="columnName">The column header name of the grouped column.</param>
            <param name="collectionView">The underlying collection view of the group.</param>
            <returns>The summary display text based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.SummaryCreator.GetSummaryDisplayText(Syncfusion.Data.SummaryRecordEntry,System.String,Syncfusion.Data.ICollectionViewAdv,Syncfusion.Data.Group)">
            <summary>
            Gets the summary display text based on the given values.
            </summary>
            <param name="summaryEntry">The summary record entry which contains the information of the 
            summary values of the group.</param>
            <param name="columnName">The column header name of the grouped column.</param>
            <param name="collectionView">The underlying collection view of the group.</param>
            <param name="group">The group for which the summary is to be obtained.</param>
            <returns>The summary display text based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.SummaryCreator.GetSummaryDisplayValue(Syncfusion.Data.SummaryRecordEntry,System.String,System.String)">
            <summary>
            Gets the summary display value based on the given values.
            </summary>
            <param name="summaryEntry">The summary record entry which contains the information of the 
            summary values of the group.</param>
            <param name="columnName">The column header name of the grouped column.</param>
            <param name="aggregateKey">The aggregate key based on which the summary is 
            to be calculated.</param>
            <returns>The summary display value based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.SummaryCreator.RaiseQuerySummaryAggregate(System.Collections.IEnumerable,Syncfusion.Data.ISummaryColumn,System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Data.ICollectionViewAdv,System.Data.DataTable)">
            <summary>
            Queries the summary aggregate based on the given values and gets the formatted 
            summary of the summary column.
            </summary>
            <param name="items">The IEnumerable items of the group.</param>
            <param name="summaryColumn">The summary column of the summary row.</param>
            <param name="summaries">The summaries which contains the summary values of the 
            group.</param>
            <param name="collectionView">The collection view of the group.</param>
            <param name="summaryCalculationTable">The dataTable for Table summary calculation.</param>
            <returns>The formatted summary calculated for the summary column based on the 
            queried summary aggregate and given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.SummaryCreator.GetSummaryAggregate(Syncfusion.Data.ISummaryColumn,Syncfusion.Data.ICollectionViewAdv,System.Data.DataTable)">
            <summary>
            Gets the summary aggregate for the given summary column and the underlying collection 
            of the group.
            </summary>
            <param name="summaryColumn">The summary column for which the summary aggregate is 
            to be obtained.</param>
            <param name="collectionView">The underlying collection view of the group.</param>
            <param name="summaryCalculationTable">The dataTable for TableSummary calculation</param>
            <returns>The summary aggregate for the given summary column and the underlying collection 
            of the group.</returns>
        </member>
        <member name="T:Syncfusion.Data.SummaryRecordEntry">
            <summary>
            Contains the list of summary aggregates computed using <see cref="T:Syncfusion.Data.ISummaryRow"/> instance in this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SummaryRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the SummaryRecordEntry class.
            </summary>
            <param name="parent">The parent node of the summary record entry.</param>
            <param name="level">The level of the summary record entry being initialized.</param>
        </member>
        <member name="M:Syncfusion.Data.SummaryRecordEntry.Reset">
            <summary>
            Release The Unmanaged Calculated Summary Values on the on demand Condition
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SummaryRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>True</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="F:Syncfusion.Data.SummaryRecordEntry.NeedToCalculate">
            <summary>
            Initialize the field for the OnDemandMode calculation operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SummaryRecordEntry.SummaryValues">
            <summary>
            Gets the summary values of the summary record entry.
            </summary>
            <value>The summary values of the summary record entry.</value>
        </member>
        <member name="P:Syncfusion.Data.SummaryRecordEntry.SummaryRow">
            <summary>
            Gets or sets the summary row of the summary record entry.
            </summary>
            <value>The summary row of the summary record entry.</value>
        </member>
        <member name="T:Syncfusion.Data.SummaryValue">
            <summary>
            Instance to cache the summary aggregate values into the <see cref="T:Syncfusion.Data.SummaryRecordEntry"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SummaryValue.#ctor">
            <summary>
            Initializes a new instance of the SummaryValue class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SummaryValue.Name">
            <summary>
            Gets or sets the name of the summary column for which the summary value is calculated.
            </summary>
            <value>The name of the summary column for which the summary value is calculated.</value>
        </member>
        <member name="P:Syncfusion.Data.SummaryValue.AggregateValues">
            <summary>
            Gets the aggregate values of the summary column for the given aggregate type.
            </summary>
            <value>The aggregate values of the summary column for the given aggregate type.</value>
        </member>
        <member name="T:Syncfusion.Data.ISummaryRow">
            <summary>
            Defines common functionality for a GridSummaryRow for displaying the summary value.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.Name">
            <summary>
            Gets or sets the name of the summary row.
            </summary>
            <value>The name of the summary row.</value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.ShowSummaryInRow">
            <summary>
            Gets or sets a boolean value indicating whether to show summary in row.
            </summary>
            <value><b>True</b> if summary is shown in row, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.CalculationUnit">
             <summary>
            Gets or sets the value that specifies the mode for calculating summaries.
             </summary>
            <value>The unit of the summary calculation default value is <see cref="F:Syncfusion.Data.SummaryCalculationUnit.AllRows"/>.</value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.SummaryColumns">
            <summary>
            Gets the collection of summary columns in the summary row.
            </summary>
            <value>The collection of summary columns in the summary row.</value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.Title">
            <summary>
            Gets or sets the title of the summary row, which contains the summary to be displayed 
            in the summary row, if the <see cref="P:Syncfusion.Data.ISummaryRow.ShowSummaryInRow"/> is true.
            </summary>
            <value>The title of the summary row, which contains the summary to be displayed 
            in the summary row, if the <see cref="P:Syncfusion.Data.ISummaryRow.ShowSummaryInRow"/> is true.</value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.TitleColumnCount">
            <summary>
            Gets or sets the value that maintains the column span of the summary title. 
            </summary>
            <value>The value that specifies the column span of the summary title. The default value is 0.</value>
        </member>
        <member name="T:Syncfusion.Data.ISummaryColumn">
            <summary>
            Defines common functionality for GridSummaryColumn for calculating and displaying the summary value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Data.ISummaryColumn.CustomAggregate" -->
        <member name="P:Syncfusion.Data.ISummaryColumn.Format">
            <summary>
            Gets or sets the string that indicates how the summary value is formatted in display.
            </summary>
            <value>
            A string that specifies the format of summary value.The default value is <c>string.Empty</c>.
            </value>
            <example>
            <code lang="C#"><![CDATA[        
             this.dataGrid.TableSummaryRows.Add(new GridSummaryRow()
             {
                Name="Total Products",
                ShowSummaryInRow = true,
                Title = "Total Products Count: {ProductCount}",
                SummaryColumns = new ObservableCollection<ISummaryColumn>()
                {
                    new GridSummaryColumn()
                    {
                        Name="ProductCount",
                        MappingName="ProductName",
                        SummaryType=SummaryType.CountAggregate,
                        Format="{Count:d}"
                    },
                }
            });
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Data.ISummaryColumn.MappingName">
            <summary>
            Gets or sets the corresponding MappingName of the column based on which the aggregate 
            values of the summary column is to be calculated.
            </summary>
            <value>
            A string that specifies the corresponding MappingName of the column based on which the aggregate 
            values of the summary column is to be calculated. The default value is <c>string.Empty</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryColumn.Name">
            <summary>
            Gets or sets the name of summary column.
            </summary>
            <value>
            A string that specifies the name of the summary column. The default value is <c>string.Empty</c>.
            </value>
            <remarks>
            The name of the summary column and <see cref="P:Syncfusion.Data.ISummaryRow.Title"/> should be same for displaying summary value in the 
            summary row, when the <see cref="P:Syncfusion.Data.ISummaryRow.ShowSummaryInRow"/> is true.
            </remarks>
            <example>
            <code lang="C#"><![CDATA[       
            	//Here, the Title and Name have the same ProductCount string.
                this.dataGrid.TableSummaryRows.Add(new GridSummaryRow()
                {
                    Name="Total Products",
                    ShowSummaryInRow = true,
                    Title = "Total Products Count: {ProductCount}",
                    SummaryColumns = new ObservableCollection<ISummaryColumn>()
                    {
                        new GridSummaryColumn()
                        {
                            Name="ProductCount",
                            MappingName="ProductName",
                            SummaryType=SummaryType.CountAggregate,
                            Format="{Count:d}"
                        },
                    }
                });    
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Data.ISummaryColumn.SummaryType">
            <summary>
            Gets or sets the aggregate type for summary calculation.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Data.SummaryType"/> enumeration to specifies aggregate type for summary calculation. 
            The default value is <see cref="F:Syncfusion.Data.SummaryType.CountAggregate"/>.
            </value>
        </member>
        <member name="T:Syncfusion.Data.SummaryType">
            <summary>
            Defines the constants that specify the types of summary aggregate supported in SfDataGrid.
            </summary>   
        </member>
        <member name="F:Syncfusion.Data.SummaryType.CountAggregate">
            <summary>
            Specify the count aggregate for the summary column.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.SummaryType.DoubleAggregate">
            <summary>
            Specify the double value aggregate for the summary column.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.SummaryType.Int32Aggregate">
            <summary>
            Specify integer value aggregate for the summary column.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.SummaryType.Custom">
            <summary>
            Specify custom aggregate for the summary column which implement <see cref="T:Syncfusion.Data.ISummaryAggregate"/> or <see cref="T:Syncfusion.Data.ISummaryExpressionAggregate"/> interface to delegate the summary computation.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.SummaryWrapperModel">
            <summary>
            Summary wrapper model class contains the logic for computing the summary values of the 
            SfDataGrid in a optimized way.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SummaryWrapperModel.Count">
            <summary>
            Gets or sets the number of items in the group.
            </summary>
            <value>The number of items in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.SummaryWrapperModel.Sum">
            <summary>
            Gets or sets the sum of the values of the grouped column in the group.
            </summary>
            <value>The sum of the values of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.SummaryWrapperModel.Average">
            <summary>
            Gets or sets the average of the values in the grouped column in the group.
            </summary>
            <value>The average of the values in the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.SummaryWrapperModel.Max">
            <summary>
            Gets or sets the maximum value of the grouped column in the group.
            </summary>
            <value>The maximum value of the grouped column in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.SummaryWrapperModel.Min">
            <summary>
            Gets or sets the minimum value of the grouped column in the group.
            </summary>
            <value>The minimum value of the grouped column in the group.</value>
        </member>
        <member name="T:Syncfusion.Data.TopLevelGroup">
            <summary>
            TopLevelGroup is the first-level of the Groups present in <see cref="T:Syncfusion.Data.ICollectionViewAdv"/>. It maintains the data structure for Grouping with <see cref="T:Syncfusion.Data.ICollectionViewAdv"/>. Iterate the DisplayElements property to get one-to-one mapping of the index with the TopLevelGroup items. Access all the Bottom-level and other nested level groups with the Groups property.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.IGroupRefresh">
            <summary>
            Implement this interface to control refresh done with the <see cref="T:Syncfusion.Data.TopLevelGroup"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGroupRefresh.RefreshSortingOrder">
            <summary>
            Refreshes the sorting order of the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGroupRefresh.RefreshFilters">
            <summary>
            Refreshes the filtering in the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGroupRefresh.DeferRefresh">
            <summary>
            Gets a disposable defer helper to suspends the all data operations in view. 
            </summary>
            <returns>Returns disposable defer helper to do the bulk changes.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.#ctor(Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Initializes a new instance of the TopLevelGroup class.
            </summary>
            <param name="collectionView">The underlying collection view of the group.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>True</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Invalidate(System.Int32,System.Int32)">
            <summary>
            Invalidates the group of the given index.
            </summary>
            <param name="index">The index of the group to be invalidated.</param>
            <param name="count">The count of the groups to be invalidated from the given index.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Syncfusion#Data#IGroupRefresh#RefreshSortingOrder">
            <summary>
            Refreshes the sorting order.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.RefreshSortingOrder">
            <summary>
            Refreshes the sorting order of the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Syncfusion#Data#IGroupRefresh#RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.RefreshFilters">
            <summary>
            Refreshes the filter of the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.SuspendEvents">
            <summary>
            Suspends the events in the group, which suspends the view updates in the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.ResumeEvents">
            <summary>
            Resumes the events in the group, which resumes the view updates in the group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Syncfusion#Data#IGroupRefresh#DeferRefresh">
            <summary>
            Gets a disposable defer helper to suspends the all data operations in view. 
            </summary>
            <returns>Returns disposable defer helper to do the bulk changes.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.DeferRefresh">
            <summary>
            Gets a disposable defer helper to suspends the all data operations in view. 
            </summary>
            <returns>Returns disposable defer helper to do the bulk changes.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Add(System.Object,System.Boolean)">
            <summary>
            Adds the given record to the group.
            </summary>
            <param name="record">The record to be added to the group.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Insert(System.Object,System.Int32,System.Boolean)">
            <summary>
            Inserts the given record at the given index in the group.
            </summary>
            <param name="index">The index at which the given record is to be inserted.</param>
            <param name="record">The record to be inserted.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the given record from the group.
            </summary>
            <param name="record">The record to be removed.</param>
            <param name="isInSourceCollectionChange">A boolean value indicating whether the source collection 
            change is currently in progress.</param>
            <returns>A boolean value indicating whether the given record is removed.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Contains(System.Object)">
            <summary>
            Determines whether the given record is found in the display elements of the TopLevelGroup.
            </summary>
            <param name="record">The record to be found.</param>
            <returns>
            <b>True</b> if the specified record is found in the Top-level group, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.IndexOf(System.Object)">
            <summary>
            Finds the index of the given record in the top-level group.
            </summary>
            <param name="record">The record whose index is to be obtained.</param>
            <returns>The index of the given record in the top-level group.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.ResetDisplayElements">
            <summary>
            Resets the display elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.GetMaxLevel">
            <summary>
            Gets the maximum level of the group in the top-level group.
            </summary>
            <returns>The max level of the group in the top-level group.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.GetGroupCaptionText(Syncfusion.Data.Group,System.String,System.String)">
            <summary>
            Gets the group caption text for the specified <see cref="T:Syncfusion.Data.Group"/>.
            </summary>
            <param name="group">The group for which the caption text is to be obtained.</param>
            <param name="groupSpecifierText">The specifier text of the group whose caption text 
            is to be obtained.</param>
            <returns>The group caption text for the specified <see cref="T:Syncfusion.Data.Group"/>.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.GetGroupCaptionTextList(Syncfusion.Data.Group,System.String,System.String)">
            <summary>
            Gets the key-value pair of the group caption text list, which contains the text to be 
            displayed in the summary for the specified <see cref="T:Syncfusion.Data.Group"/>.
            </summary>
            <param name="group">The group for which the caption text is to be obtained.</param>
            <param name="groupSpecifierText">The specifier text of the group whose caption text 
            is to be obtained.</param>
            <returns>The key-value pair of the group caption text list, which contains the text to be 
            displayed in the summary for the specified <see cref="T:Syncfusion.Data.Group"/>.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.UpdateCaptionSummaries">
            <summary>
            Updates the caption summaries of the groups in the top-level group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.UpdateCaptionSummariestoTopLevelGroup(Syncfusion.Data.Group)">
            <summary>
            Update Caption summary from given group to first parent group.
            </summary>
            <param name="group"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.GetCaptionSummaryValues(Syncfusion.Data.ISummaryColumn,System.Collections.IEnumerable,Syncfusion.Data.SummaryRecordEntry)">
            <summary>
            Calculate the summary values for summary Columns
            </summary>
            <param name="summaryColumn">Contains the summary column</param>
            <param name="enumerableSource">Contains the group record source</param>
            <param name="summaryRecordEntry">Contains the summary details</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.CalculateCaptionSummary(Syncfusion.Data.SummaryRecordEntry,System.String,Syncfusion.Data.Group)">
            <summary>
            Group Caption Summary calculated while SummaryCalculationMode is OnDemandCaptionSummary
            </summary>
            <param name="summaryentry">Contains the summary details</param>
            <param name="columnName">Contains the column mapping name</param>
            <param name="group">Contains group record of column</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.GetUnderlyingSourceType">
            <summary>
            Gets the source type of the underlying collection view of the top-level group.
            </summary>
            <returns>The source type of the underlying collection view of the top-level group.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.UpdateSummaries(Syncfusion.Data.Group)">
            <summary>
            Updates the summaries for the specified <see cref="T:Syncfusion.Data.Group"/> in the top-level group.
            </summary>
            <param name="group">The group for which the summaries is to be updated.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.UpdateSummaries(Syncfusion.Data.Group,Syncfusion.Data.SummaryRecordEntry)">
            <summary>
            Updates the summaries for the specified <see cref="T:Syncfusion.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.UpdateSummaries(Syncfusion.Data.Group,Syncfusion.Data.SummaryRecordEntry,Syncfusion.Data.ISummaryRow,Syncfusion.Data.SummaryCalculationUnit)">
            <summary>
            Calculate the group summaries based on SummaryCalculationUnit.
            </summary>
            <param name="group">The <see cref="T:Syncfusion.Data.Group"/> for which the summaries is to be updated.</param>
            <param name="summaryRecordEntry">The <see cref="T:Syncfusion.Data.SummaryRecordEntry"/> which contains the summary values of summary row.</param>
            <param name="summaryRow">The <see cref="T:Syncfusion.Data.ISummaryRow"/> which summary value need to be calculate.</param>
            <param name="mode">The SummaruCalculationUnit</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.GetGroupSummaryValues(System.Collections.IEnumerable,Syncfusion.Data.ISummaryColumn,Syncfusion.Data.SummaryRecordEntry,System.Data.DataTable)">
            <summary>
            Calculate the group summary values
            </summary>
            <param name="enumerableSource">Cotains the group records enumerable values</param>
            <param name="summaryColumn">Contains the summary columns</param>
            <param name="summaryRecordEntry">Contains summary Details</param>
            <param name="summaryCalculationTable">Get the summaries for DataTable</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.CalculateGroupSummary(Syncfusion.Data.SummaryRecordEntry,System.String,Syncfusion.Data.Group)">
            <summary>
            Calculate the summary for group when OnDemandGroupSummary is Enable
            </summary>
            <param name="summaryRecordEntry">Cotains the summary Details</param>
            <param name="columnName">Contains column name </param>
            <param name="group">Contains the group Details</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.ExpandGroup(Syncfusion.Data.Group)">
            <summary>
            Expands the given group in the top-level group.
            </summary>
            <param name="group">The group to be expanded.</param>
            <returns>Returns the value indicating the items count in the given group.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.CollapseGroup(Syncfusion.Data.Group)">
            <summary>
            Collapses the given group in the top-level group.
            </summary>
            <param name="group">The group to be collapsed.</param>
            <returns>Returns the value indicating the items count in the given group.</returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.ComputeCount(Syncfusion.Data.Group,System.Int32@)">
            <summary>
            Computes the number of items in the given group.
            </summary>
            <param name="group">The group in which the items count is to be calculated.</param>
            <param name="itemCount">The number of items in the given group.</param>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.IsTopLevelGroup">
            <summary>
            Gets a value indicating whether this instance is top level group. Top-Level Group will be the first-level group.
            </summary>
            <value>
            <b>True</b> if this instance is top level group, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.ResetCache">
            <summary>
            Gets or sets a boolean value indicating whether to reset the cache.
            </summary>
            <value>A boolean value indicating whether to reset the cache.</value>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.RelationsCount">
            <summary>
            Gets the relations count of the group, that link grid and allow navigation from parent grid to child grid.
            </summary>
            <value>The relations count of the group, that link grid and allow navigation from parent grid to child grid.</value>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.CollectionView">
            <summary>
            Gets the collection view of the group.
            </summary>
            <value>The collection view of the group.</value>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.GroupDescriptions">
            <summary>
            Gets the collection of group descriptions in the SfDataGrid.
            </summary>
            <value>The collection of group descriptions in the SfDataGrid.</value>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.DisplayElements">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.GroupDisplayElements"/> which contains the group and record information of the top level group.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.GroupDisplayElements"/> which contains the group and record information of the top level group.
            </value>
            <remarks>
            The group and record can accessed from display elements when the data is grouped.
            </remarks>
        </member>
        <member name="T:Syncfusion.Data.TopLevelGroup.DeferHelper">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.DeferHelper.#ctor(Syncfusion.Data.TopLevelGroup)">
            <summary>
            Initializes a new instance of the DeferHelper class.
            </summary>
            <param name="topLevelGroup">The reference of the top level group of the datagrid.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.DeferHelper.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.TopLevelGroup.DeferHelper"/> class.
            </summary>            
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.DeferHelper.Dispose(System.Boolean)">
            <summary>
            Disposes the unmanaged and optionally disposes managed resources used by the <see cref="T:Syncfusion.Data.TopLevelGroup.DeferHelper"/> class.
            </summary>
            <param name="isDisposing">A boolean value indicating whether to display both 
            managed and unmanaged resources.</param>
        </member>
        <member name="T:Syncfusion.Data.NotifyGroupsChangedEventArgs">
            <summary>
            This class pass collection change notification from <see cref="T:Syncfusion.Data.TopLevelGroup"/> to <see cref="T:Syncfusion.Data.CollectionViewAdv"/> 
            and <see cref="P:Syncfusion.Data.NotifyGroupsChangedEventArgs.Entries"/> property of the class maps the list of items changed in the collection which is of type <see cref="T:Syncfusion.Data.NodeEntry"/>, 
            so no need to typecast in <see cref="T:Syncfusion.Data.CollectionViewAdv"/> for performance reasons.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.NotifyGroupsChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Initializes a new instance of the NotifyGroupsChangedEventArgs class.
            </summary>
            <param name="action">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> representing the
             collection changed action.</param>
        </member>
        <member name="M:Syncfusion.Data.NotifyGroupsChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.List{Syncfusion.Data.NodeEntry},System.Int32)">
            <summary>
            Initializes a new instance of the NotifyGroupsChangedEventArgs class.
            </summary>
            <param name="action">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> representing the
             collection changed action.</param>
            <param name="changedItems">The list of changed items in the collection.</param>
            <param name="startingIndex">The starting index of the items changed in the collection.</param>
        </member>
        <member name="P:Syncfusion.Data.NotifyGroupsChangedEventArgs.Entries">
            <summary>
            Gets or set the list of items affected by the collection change.
            </summary>
            <value>The list of items affected by the collection change.</value>
        </member>
        <member name="T:Syncfusion.Data.PropertyChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.PropertyChangingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PropertyChangingEventArgs class.
            </summary>
            <param name="propertyName">The name of the property whose value is changing.</param>
        </member>
        <member name="P:Syncfusion.Data.PropertyChangingEventArgs.PropertyName">
            <summary>
            Gets the name of the property whose value is changing.
            </summary>
            <value>The name of the property whose value is changing.</value>
        </member>
        <member name="T:Syncfusion.Data.PropertyChangingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Data.INotifyPropertyChanging.PropertyChanging"/>
            event of an <see cref="T:Syncfusion.Data.INotifyPropertyChanging"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.Data.PropertyChangingEventArgs">PropertyChangingEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Data.INotifyPropertyChanging">
            <summary>
            Notifies clients that a property value is changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Data.INotifyPropertyChanging.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.IPagedCollectionView">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.IPagedCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Returns a boolean value indicating whether moved to the first page or not.</returns>
        </member>
        <member name="M:Syncfusion.Data.IPagedCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            </summary>
            <returns>Returns a boolean value indicating whether moved to the last page or not.</returns>
        </member>
        <member name="M:Syncfusion.Data.IPagedCollectionView.MoveToNextPage">
            <summary>
            Moves to the next page.
            </summary>
            <returns>Returns a boolean value indicating whether moved to the next page or not.</returns>
        </member>
        <member name="M:Syncfusion.Data.IPagedCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the previous page.
            </summary>
            <returns>Returns a boolean value indicating whether moved to the previous page or not.</returns>
        </member>
        <member name="P:Syncfusion.Data.IPagedCollectionView.ItemCount">
            <summary>
            Gets the number of items in the collection view.
            </summary>
            <value>The number of items in the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.IPagedCollectionView.PageIndex">
            <summary>
            Gets the page index of the current page.
            </summary>
            <value>The page index of the current page.</value>
        </member>
        <member name="P:Syncfusion.Data.IPagedCollectionView.PageSize">
            <summary>
            Gets or sets the page size, which indicates the number of rows to be displayed 
            in the page.
            </summary>
            <value>The page size, which indicates the number of rows to be displayed 
            in the page.</value>
        </member>
        <member name="T:Syncfusion.Data.IPropertyAccessProvider">
            <summary>
            Interface that declares the methods to be implemented for accessing the properties of 
            the column.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value for the given record and property.
            </summary>
            <param name="record">The record for which the value is to be obtained.</param>
            <param name="propName">The name of the property.</param>
            <returns>The value for the given record and property.</returns>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value for the given record and property name.
            </summary>
            <param name="record">The record for which the value is to be set.</param>
            <param name="propName">The name of the property.</param>
            <param name="value">The value to be set.</param>
            <returns>A boolean value indicating whether the value is set.</returns>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.GetFormattedValue(System.Object,System.String)">
            <summary>
            Gets the Formatted value for the given record and the property name.
            </summary>
            <param name="record">The record for which the value is to be obtained.</param>
            <param name="propName">The name of the property.</param>
            <returns>The formatted value based on the given property and record.</returns>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.GetFormattedValue(System.Object,System.String,System.Object@)">
            <summary>
            Gets the Formatted value for the given record and the property name.
            </summary>
            <param name="record">The record for which the value is to be obtained.</param>
            <param name="propName">The name of the property.</param>
            <returns>The formatted value based on the given property and record.</returns>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.IPropertyAccessProvider"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.IFilterDefinition">
            <summary>
            Interface that holds the information of the Filtering like Mapping Name, filter predicate, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.MappingName">
            <summary>
            Gets or sets the mapping name of the column, which should be filtered.
            </summary>
            <value>The mapping name of the column, which should be filtered.</value>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.FilterPredicates">
            <summary>
            Gets the collection of filter predicates for performing filtering in the collection view.
            </summary>
            <value>The collection of filter predicates for performing filtering in the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.FilterBehavior">
            <summary>
            Gets or sets the filter behavior for the column.
            </summary>
            <value>The <see cref="T:Syncfusion.Data.FilterBehavior"/> for the column.</value>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.ColumnMemberType">
            <summary>
            Gets or sets the type of the column, which should be filtered.
            </summary>
            <value>The type of the column, which should be filtered.</value>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.FilterMode">
            <summary>
            Gets or sets a value that decides whether to filter based on display value or MappingName of the column.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Data.ColumnFilter"/> enumeration that decides how the items populated for the filter control in the column. 
            </value>     
        </member>
        <member name="T:Syncfusion.Data.FilterPredicate">
            <summary>
            Represents a class that defines the predicate for filtering.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.FilterPredicate.#ctor">
            <summary>
            Initializes a new instance of the FilterPredicate class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.FilterType">
            <summary>
            Gets or sets the type of the filter to be applied.
            </summary>
            <value>The <see cref="T:Syncfusion.Data.FilterType"/> that represents the type of the filter to be applied.</value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.FilterValue">
            <summary>
            Gets or sets the filter value for the filter predicate.
            </summary>
            <value>The filter value for the filter predicate.</value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.PredicateType">
            <summary>
            Gets or sets the type of the predicate.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.FilterBehavior">
            <summary>
            Gets or sets the behavior of filtering for the filter predicate.
            </summary>
            <value>The <see cref="T:Syncfusion.Data.FilterBehavior"/> for the filter predicate.</value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether filtering should be applied considering the casing.
            </summary>
            <value>
            <b>True</b> if casing is considered when filtering, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.FilterMode">
            <summary>
            Gets or sets a value indicating whether filtering should be applied based on the display text or value of the column.
            </summary>
            <value>
            <c>ColumnFilter.DisplayText</c> if Filter is based on DisplayText, otherwise <c>ColumnFilter.Value</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Data.PredicateType">
            <summary>
            Defines the various constants for Predicate type of Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.PredicateType.And">
            <summary>
            Does an AND operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.PredicateType.Or">
            <summary>
            Does an OR operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.PredicateType.AndAlso">
            <summary>
            Does an ANDALSO operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.PredicateType.OrElse">
            <summary>
            Does an ORELSE operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.FilterOperatorType">
            <summary>
            Defines the various constants for filtering operations in SfDataGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterOperatorType.Equals">
            <summary>
            Does an <b>Equals</b> operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterOperatorType.StartsWith">
            <summary>
            Does an <b>StartsWith</b> operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterOperatorType.Contains">
            <summary>
            Does an <b>Contains</b> operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.PropertyAccessor">
            <summary>
            Represents the class that defines the methods to access the property, its value and etc.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.PropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of PropertyAccessor class.
            </summary>
            <param name="propertyInfo">The property info for the property accessor being 
            initialized.</param>
        </member>
        <member name="M:Syncfusion.Data.PropertyAccessor.GetValue(System.Object)">
            <summary>
            Gets the value for the given object.
            </summary>
            <param name="obj">The object for which the value is to be obtained.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Get method is not defined for this property</exception>
        </member>
        <member name="M:Syncfusion.Data.PropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the given value to the given object.
            </summary>
            <param name="obj">The object for which the value is to be obtained.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="P:Syncfusion.Data.PropertyAccessor.PropertyInfo">
            <summary>
            Gets the information of the property.
            </summary>
            <value>The information of the property.</value>
        </member>
        <member name="T:Syncfusion.Data.ItemPropertiesProvider">
            <summary>
            Implements <see cref="T:Syncfusion.Data.IPropertyAccessProvider"/> to get / set value on the underlying object which is used by <see cref="T:Syncfusion.Data.CollectionViewAdv"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.ItemPropertiesProvider.view">
            <summary>
            Gets the collection view of the SfDataGrid.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.#ctor">
            <summary>
            Initializes a new instance of the ItemPropertiesProvider class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.#ctor(Syncfusion.Data.ICollectionViewAdv)">
            <summary>
            Initializes a new instance of the ItemPropertiesProvider class.
            </summary>
            <param name="view">The collection view of the SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value for the given record and property.
            </summary>
            <param name="record">The record for which the value is to be obtained.</param>
            <param name="property">The name of the property.</param>
            <returns>The value for the given record and property.</returns>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value for the given record and property name.
            </summary>
            <param name="record">The record for which the value is to be set.</param>
            <param name="propName">The name of the property.</param>
            <param name="value">The value to be set.</param>
            <returns>A boolean value indicating whether the value is set.</returns>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.GetDataTableValue(System.Object,System.String)">
            <summary>
            Gets the data table value for the given record and the property name.
            </summary>
            <param name="record">The record for which the data table value is to be obtained.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The data table value for the given record and the property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.GetFormattedValue(System.Object,System.String)">
            <summary>
            Gets the Formatted value for the given record and the property name.
            </summary>
            <param name="record">The record for which the formatted value is to be 
            obtained.</param>
            <param name="propName">The name of the property.</param>
            <returns>The formatted value based on the given property and record.</returns>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.ItemPropertiesProvider"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.Dispose(System.Boolean)">
            <summary>
            Disposes the unmanaged and optionally releases managed resources used by the <see cref="T:Syncfusion.Data.ItemPropertiesProvider"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.Data.DynamicPropertiesProvider">
            <summary>
            Class that serves as the provider for the dynamic properties, which implements 
            methods for obtaining the values and setting the values for the various properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.#ctor(Syncfusion.Data.ICollectionViewAdv)">
            <summary>
            Initializes a new instance of the DynamicPropertiesProvider class.
            </summary>
            <param name="view">The collection view of the SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value for the given record and property.
            </summary>
            <param name="record">The record for which the value is to be obtained.</param>
            <param name="propName">The name of the property.</param>
            <returns>The value for the given record and property.</returns>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value for the given record and property name.
            </summary>
            <param name="record">The record for which the value is to be set.</param>
            <param name="propName">The name of the property.</param>
            <param name="value">The value to be set.</param>
            <returns>A boolean value indicating whether the value is set.</returns>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.GetFormattedValue(System.Object,System.String)">
            <summary>
            Gets the formatted value for the given record and the property name.
            </summary>
            <param name="record">The record for which the value is to be obtained.</param>
            <param name="propName">The name of the property.</param>
            <returns>The formatted value based on the given property and record.</returns>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.Dispose(System.Boolean)">
            <summary>
            Disposes the unmanaged and optionally disposes managed resources used by the <see cref="T:Syncfusion.Data.DynamicPropertiesProvider"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.Data.PagedCollectionView">
            <summary>
            Represents the class that maintains the collection view of type paged collection view, when the 
            SfDataGrid is bind to the paged collection view.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.QueryableCollectionView">
            <summary>
            Represents the class that maintains the collection view of type queryable collection view, when the 
            SfDataGrid is bind to the queryable collection view.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.IParallelizableView">
            <summary>
            Implement this interface to instruct the QueryableCollectionView derived view for generating PLINQ query expression trees.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.IParallelizableView.UsePLINQ">
            <summary>
            Gets or sets the boolean value indicating whether to use PLINQ.
            </summary>
            <value>The boolean value indicating whether to use PLINQ.</value>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.#ctor">
            <summary>
            Initializes a new instance of the QueryableCollectionView class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the QueryableCollectionView class.
            </summary>
            <param name="source">The IEnumerable source of the collection view.</param>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.#ctor(System.Collections.IEnumerable,System.Type)">
            <summary>
            Initializes a new instance of the QueryableCollectionView class.
            </summary>
            <param name="source">The IEnumerable source of the collection view.</param>
            <param name="sourceType">The source type.</param>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.CreateRecords">
            <summary>
            Creates the records for the items in the <see cref="P:Syncfusion.Data.QueryableCollectionView.ViewSource"/>.
            </summary>
            <returns>The list of records created for the items in the <see cref="P:Syncfusion.Data.QueryableCollectionView.ViewSource"/>.</returns>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.OnSortDescriptionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method fires when the sort description collection is changed.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> representing the data for the event.</param>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.CanExecuteParallel(Syncfusion.Data.DataOperation)">
            <summary>
            Invokes to check whether source is need to execute execute in Parallel Query.
            </summary>
            <param name="operation">DataOperation</param>
            <returns>Returns true if source is execute in parallel query</returns>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.RefreshSort">
            <summary>
            Refreshes sorting in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.SortQueryable(System.Linq.IQueryable,Syncfusion.Data.SortDescriptionCollection)">
            <summary>
            Sets the given source and the sort fields as queryable.
            </summary>
            <param name="source">The IQueryable source of the items which has to be queried.</param>
            <param name="sortFields">The sort fields of the source which has to be queried.</param>
            <returns>The IQueryable source of the items which is queried.</returns>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.FilterRecord(System.Object)">
            <summary>
            Returns a boolean value indicating whether to filter underlying data from adding it to 
            View.Records collection.
            </summary>
            <param name="record">The record to filter.</param>
            <returns>A boolean value indicating whether to filter underlying data from adding it to 
            View.Records collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.RefreshFilter(System.Boolean)">
            <summary>
            Refreshes the view when the filtering is applied through <see cref="M:Syncfusion.Data.QueryableCollectionView.FilterRecord(System.Object)"/> delegate.
            </summary>
            <param name="isProgrammatic">A boolean value indicating whether filtering is done programmatically.</param>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.CreateRowFilterPredicate">
            <summary>
            Creates a row filter predicate, which filters the items to be displayed in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.GetQueryableSource">
            <summary>
            Returns the IQueryable source of the collection view.
            </summary>
            <returns>The IQueryable source of the collection view.</returns>
            <remarks>
            PagedCollectionView returns paged source as IQueryable.
            Returning query will be sorted query in the case of normal VirtualizingCollectionView.
            It will be sorted and filtered query in the case of PagedCollectionVeiw and OnDemand VirtualizingCollectionView.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.ResetFilter">
            <summary>
            Resets the filter of the collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.GetPredicateExpression(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            Gets the predicate expression for the given source and parameter expression.
            </summary>
            <param name="source">The IQueryable source</param>
            <param name="parameterExpression">The parameter expression.</param>
            <returns>The predicate expression for the given source and parameter expression.</returns>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.GetPredicateExpression(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression@,System.String,System.Boolean)">
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="columnName">The column name.</param>
            <param name="returncolExpression">A boolean value indicating whether to return the column 
            expression.</param>
            <returns>The predicate expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.RefreshSortingOrderWithFiltersForBottomLevel(System.Collections.Generic.List{Syncfusion.Data.Group})">
            <summary>
            Refreshes the sorting order with filters on the records in the bottom-level group.
            </summary>
            <param name="groups">The list of groups in the view.</param>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.GetGroupResult(System.String[])">
            <summary>
            Gets the IEnumerable collection of group result for the array of group-by.
            </summary>
            <param name="groupBy">The array of groups</param>
            <returns>The IEnumerable collection of group result for the array of group-by.</returns>
        </member>
        <member name="P:Syncfusion.Data.QueryableCollectionView.ViewSource">
            <summary>
            Gets the queryable collection for the source of the collection view.
            </summary>
            <value>The queryable collection for the source of the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.QueryableCollectionView.UsePLINQ">
            <summary>
            Gets or sets a value indicating whether to use PLINQ. 
            </summary>
            <value><b>True</b> if PLINQ is used, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.Data.QueryableCollectionView.RowFilter">
            <summary>
            Gets or sets the predicate for the row filter.
            </summary>
            <value>The predicate for the row filter.</value>
        </member>
        <member name="F:Syncfusion.Data.PagedCollectionView.OnDemandPageCache">
            <summary>
            Gets the on demand paged cache which contains the cache of the records in the previous page.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the PagedCollectionView class.
            </summary>
            <param name="source">The IEnumerable source of the SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.#ctor">
            <summary>
            Initializes a new instance of the PagedCollectionView class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.SetSource(System.Collections.IEnumerable)">
            <summary>
            Sets the given source to the collection view.
            </summary>
            <param name="_source">The source to be set to the collection view.</param>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.CreateRecords">
            <summary>
            Creates the records for the items in the source of the collection view.
            </summary>
            <returns>The list of records created for the items in the source of the 
            collection view.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.RefreshFilter(System.Boolean)">
            <summary>
            Refreshes the view when the filtering is applied through <see cref="!:FilterRecord"/> delegate.
            </summary>
            <param name="isProgrammatic">A boolean value indicating whether filtering is done programmatically.</param>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.RefreshSort">
            <summary>
            Refreshes sorting in the underlying collection of the SfDataGrid.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.EnsureView">
            <summary>
            Ensures sorting, grouping and filtering by refreshing the view with updated collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.GetGroupResult(System.String[])">
            <summary>
            Gets the IEnumerable collection of group result for the array of group-by.
            </summary>
            <param name="groupBy">The array of groups</param>
            <returns>The IEnumerable collection of group result for the array of group-by.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.GetQueryableSource">
            <summary>
            Returns the IQueryable source of the collection view.
            </summary>
            <returns>The IQueryable source of the collection view.</returns>
            <remarks>
            PagedCollectionView returns paged source as IQueryable.
            Returning query will be sorted query in the case of normal VirtualizingCollectionView.
            It will be sorted and filtered query in the case of PagedCollectionVeiw and OnDemand VirtualizingCollectionView.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.Remove(System.Object)">
            <summary>
            Removes the given item from the collection.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.UpdateCollectionView(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method fires when the collection is changed.
            </summary>
            <param name="sender">The original sender of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> which represents 
            the collection changed action.</param>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.CommitEdit">
            <summary>
            Ends the edit transaction and saves the pending changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.NotifyPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This method fires when the property is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event for the data.</param>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.GetComparerIndex(System.Object,System.Int32)">
            <summary>
            Compares the given index and the index corresponding to the given record.
            <para/>
            Call this method when you need to find the compared index of item based on sorting
            </summary>
            <param name="record">The record whose index is to be compared with the given index.</param>
            <param name="index">The index which is to be compared</param>
            <returns>Gets the comparer index based on the given index and the index corresponding to the given record.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.AdjustBeforeAdd(System.Object,System.Int32)">
            <summary>
            Adjust the underlying collection by getting the comparer index before adding the 
            given record at the given index in the view.
            </summary>
            <param name="record">The record to be added to the collection.</param>
            <param name="index">The index at which the record is to be added.</param>
            <returns>Gets the comparer index based on the given index and records in the collection.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Returns a boolean value indicating whether moved to the first page or not.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            </summary>
            <returns>Returns a boolean value indicating whether moved to the last page or not.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.MoveToNextPage">
            <summary>
            Moves to the next page.
            </summary>
            <returns>Returns a boolean value indicating whether moved to the next page or not.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.MoveToPage(System.Int32)">
            <summary>
            Moves to the given page index.
            </summary>
            <param name="pageIndex">The page index to move to.</param>
            <returns>Returns a boolean value indicating whether moved to the given page or not.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the previous page.
            </summary>
            <returns>Returns a boolean value indicating whether moved to the previous page or not.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.FilterInternalList">
            <summary>
            Applies filtering to the records in the underlying collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.LoadDynamicItems(System.Int32,System.Collections.IEnumerable)">
            <summary>
            Loads the given items starting from the given page index, dynamically to the page.
            </summary>
            <param name="startIndex">The start index to load the items.</param>
            <param name="items">The items to be loaded to the page.</param>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.ResetCache">
            <summary>
            Clears the cache while using OnDemandPaging.
            </summary>
            <remarks>
            While navigating between pages, records are loaded through <see cref="!:Syncfusion.UI.Xaml.Controls.DataPager.SfDataPager.OnDemandLoading"/> event
            and the loaded records will be maintained in cache. If you navigate to already navigated page, then records are loaded from cache and the <see cref="!:Syncfusion.UI.Xaml.Controls.DataPager.SfDataPager.OnDemandLoading"/> event will not fire for that corresponding page.
            You can clear the cache by using this method and now the <see cref="!:Syncfusion.UI.Xaml.Controls.DataPager.SfDataPager.OnDemandLoading"/> event will be raised when you navigate to the same page.
            And the records will be loaded through event instead of loading from cache.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.ResetCacheForPage(System.Int32)">
            <summary>
            Reset the cache to the given page index.
            </summary>
            <param name="pageIndex">Index of the page to reset its cache.</param>
            <seealso cref="M:Syncfusion.Data.PagedCollectionView.ResetCache"/>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.GetInternalList">
            <summary>
            Gets the list of underlying objects of the collection view.
            </summary>
            <returns>The list of underlying objects of the collection view.</returns>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.GetInternalListForIndex(System.Int32)">
            <summary>
            Gets the enumerable collection of the underlying objects in the given page index.
            </summary>
            <param name="pageIndex">The page index at which the internal list is to be obtained.</param>
            <returns>The enumerable collection of the underlying objects in the given page index.</returns>
        </member>
        <member name="P:Syncfusion.Data.PagedCollectionView.PageCount">
            <summary>
            Gets the number of pages in the paged collection view.
            </summary>
            <value>The number of pages in the paged collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.PagedCollectionView.FilterPredicates">
            <summary>
            Gets or sets the collection of FilterPredicates, based on which filtering is performed 
            in the underlying collection.
            </summary>
            <value>The collection of FilterPredicates, based on which filtering is performed 
            in the underlying collection.</value>
        </member>
        <member name="P:Syncfusion.Data.PagedCollectionView.MaxItemsCount">
            <summary>
            Gets or sets the maximum items count in the paged collection view.
            </summary>
            <value>The maximum items count in the paged collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.PagedCollectionView.UseOnDemandPaging">
            <summary>
            Gets or sets a boolean value indicating whether to use on demand paging, when 
            on demand paging is enabled the items will be populated to the page only when 
            navigated to the page.
            </summary>
            <value>A boolean value indicating whether to use on demand paging.</value>
        </member>
        <member name="P:Syncfusion.Data.PagedCollectionView.CanAddNew">
            <summary>
            Gets a value that indicates whether a new item can be added to the collection.
            </summary>
            <value><b>True</b> if a new item can be added to the collection, otherwise<b>false</b>.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Data.PagedCollectionView.EnableSummaryOptimization" -->
        <member name="E:Syncfusion.Data.PagedCollectionView.OnDemandItemsLoading">
            <summary>
            Occurs when the items are loaded on demand to the page.
            </summary>
        </member>
        <member name="E:Syncfusion.Data.PagedCollectionView.PageChanging">
            <summary>
            Occurs when the page is changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Data.PagedCollectionView.PageChanged">
            <summary>
            Occurs when the page is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.PagedCollectionView.ItemCount">
            <summary>
            Gets the number of items in the collection view.
            </summary>
            <value>The number of items in the collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.PagedCollectionView.PageIndex">
            <summary>
            Gets the page index of the current page.
            </summary>
            <value>The page index of the current page.</value>
        </member>
        <member name="P:Syncfusion.Data.PagedCollectionView.PageSize">
            <summary>
            Gets or sets the page size, which indicates the number of rows to be displayed 
            in the page.
            </summary>
            <value>The page size, which indicates the number of rows to be displayed 
            in the page.</value>
        </member>
        <member name="T:Syncfusion.Data.OnDemandItemsLoadingEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Data.PagedCollectionView.OnDemandItemsLoading"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.OnDemandItemsLoadingEventArgs.StartIndex">
            <summary>
            Gets or sets the start index for loading the items.
            </summary>
            <value>The start index for loading the items.</value>
        </member>
        <member name="P:Syncfusion.Data.OnDemandItemsLoadingEventArgs.PageSize">
            <summary>
            Gets or sets the page size for loading the number of items in the page.
            </summary>
            <value>The page size for loading the number of items in the page.</value>
        </member>
        <member name="T:Syncfusion.Data.PageChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Data.PagedCollectionView.PageChanging"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.PageChangingEventArgs.NewPageIndex">
            <summary>
            Gets or sets the new page index for which the page is being navigated to.
            </summary>
            <value>The new page index for which the page is being navigated to.</value>
        </member>
        <member name="T:Syncfusion.Data.PageChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Data.PagedCollectionView.PageChanged"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.PageChangedEventArgs.NewPageIndex">
            <summary>
            Gets or sets the new page index for which the page is navigated to.
            </summary>
            <value>The new page index for which the page is navigated to.</value>
        </member>
        <member name="T:Syncfusion.Data.OnDemandItemsLoadingEventHandler">
            <summary>
            Delegate for <see cref="E:Syncfusion.Data.PagedCollectionView.OnDemandItemsLoading"/> event.
            </summary>
            <param name="sender">The original sender of the event.</param>
            <param name="e">The <see cref="T:Syncfusion.Data.OnDemandItemsLoadingEventArgs"/> representing the data for the event.</param>
        </member>
        <member name="T:Syncfusion.Data.PageChangingEventHandler">
            <summary>
            Delegate for <see cref="E:Syncfusion.Data.PagedCollectionView.OnDemandItemsLoading"/> event.
            </summary>
            <param name="sender">The original sender of the event.</param>
            <param name="e">The <see cref="T:Syncfusion.Data.PageChangingEventArgs"/> representing the data for the event.</param>
        </member>
        <member name="T:Syncfusion.Data.PageChangedEventHandler">
            <summary>
            Delegate for <see cref="E:Syncfusion.Data.PagedCollectionView.OnDemandItemsLoading"/> event.
            </summary>
            <param name="sender">The original sender of the event.</param>
            <param name="e">The <see cref="T:Syncfusion.Data.PageChangedEventArgs"/> representing the data for the event.</param>
        </member>
        <member name="M:Syncfusion.Data.PageListOrdinalComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares the given two objects.
            </summary>
            <param name="obj1">The object 1.</param>
            <param name="obj2">The object 2.</param>
            <returns>The value indicating the comparison of the given two objects.</returns>
        </member>
        <member name="T:Syncfusion.Data.IColumnAccessProvider">
            <summary>
            Implements this interface to get the value for the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.IColumnAccessProvider.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:Syncfusion.Data.IColumnAccessProvider.PropertyReflector">
            <summary>
            Gets or sets the property access provider of the column.
            </summary>
            <value>The property access provider of the column.</value>
        </member>
        <member name="T:Syncfusion.Data.QueryableCollectionViewExtensions">
            <summary>
            Class that defines the extension methods for the queryable collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionViewExtensions.GetPredicateExpressionExt(Syncfusion.Data.CollectionViewAdv,System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            Gets the predicate expression extension for the given values.
            </summary>
            <param name="view">The collection view.</param>
            <param name="source">The IQueryable source.</param>
            <param name="paramExpression">The parameter expression.</param>
            <returns>The predicate expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionViewExtensions.GetPredicateExpressionExt(Syncfusion.Data.CollectionViewAdv,System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression@,System.String,System.Boolean)">
            <param name="view">The collection view.</param>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="columnName">The column name.</param>
            <param name="returncolExpression">A boolean value indicating whether to return the column 
            expression.</param>
            <returns>The predicate expression for the given values.</returns>
        </member>
        <member name="T:Syncfusion.Data.IRecordsList">
            <summary>
            Interface that declares the properties like Table Summaries and the methods to be 
            implemented for maintaining the list of records.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IRecordsList.GetItemAt(System.Int32)">
            <summary>
            Gets the item at the index specified in the SfDataGrid.
            </summary>
            <param name="recordIndex">Index of the record at which the item is to be obtained.</param>
            <returns>Returns the item at the specified index in the SfDataGrid.</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsList.CreateRecord(System.Object)">
            <summary>
            Creates the <see cref="T:Syncfusion.Data.RecordEntry"/> for the business object.
            </summary>
            <param name="data">The data for which the record entry is to be created.</param>
            <returns>Returns the RecordEntry for the specified object.</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsList.RemoveAll">
            <summary>
            Dispose all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.IRecordsList.TableSummaries">
            <summary>
            Gets the table summaries of the SfDataGrid.
            </summary>
            <value>The table summaries of the SfDataGrid.</value>
        </member>
        <member name="T:Syncfusion.Data.DataTableRecordsList">
            <summary>
            Represents the class that maintains the records list when binding data table as source 
            to the SfDataGrid.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.RecordsList">
            <summary>
            Class that serves as the base for maintaining the records in the SfDataGrid for 
            different types of source bind to the SfDataGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.RecordsList.isdisposed">
            <summary>
            Gets a value indicating whether the records is disposed.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.RecordsList.EnableHashIndexing">
            <summary>
            Gets a boolean value indicating whether hash indexing is enabled.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.#ctor">
            <summary>
            Initializes a new instance of the RecordsList class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.#ctor(Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Initializes a new instance of the RecordsList class.
            </summary>
            <param name="view">The collection view of the SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.#ctor(System.Collections.IEnumerable,Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Initializes a new instance of the RecordsList class.
            </summary>
            <param name="source">The IEnumerable source of the SfDataGrid.</param>
            <param name="view">The collection view of the SfDataGrid.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.OnInitialize">
            <summary>
            Initializes the internal list and the indices list of the collection view with records of the collection view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.PopulateRecords(System.Collections.IEnumerable,Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Populates the internalList by enumerating the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="view">The View.</param>
            <remarks>
            The internalList will be populated with null entries in the case of VirtualRecordsList.
            In case of IQueryable source will be filtered by query. So, there is no need of filter each record while populating.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.PopulateRecordsFromGroup(System.Collections.Generic.List{Syncfusion.Data.Group})">
            <summary>
            Populates the internalList by enumerating Group.Records.
            </summary>
            <param name="groups">The list of Groups.</param>
            <remarks>
            The internalList will be populated with null entries in the case of VirtualRecordsList.
            In case of IQueryable source will be filtered by query. So, there is no need of filter each record while populating.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.CreateRecord(System.Object)">
            <summary>
            Creates the record entry for the given data object.
            </summary>
            <param name="data">The data for which the RecordEntry is to be created.</param>
            <returns>Returns the RecordEntry created for the specified data.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.RemoveAll">
            <summary>
            Dispose all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.GetItemAt(System.Int32)">
            <summary>
            Gets the item at the specified index in the records list.
            </summary>
            <param name="recordIndex">The recordIndex to get the object.</param>
            <returns>Returns the object at specified record index.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.Add(System.Object)">
            <summary>
            Adds the specified data to the records list.
            </summary>
            <param name="data">The data for which the record is created and added to the records list.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing">A boolean value indicating whether both managed 
            and unmanaged resources is to be released.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.RemoveNotifyListener">
            <summary>
            Removes the notify listener for the collection view of the records list.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.RecordsList.View">
            <summary>
            Gets the collection view of SfDataGrid.
            </summary>
            <value>The collection view of SfDataGrid.</value>
        </member>
        <member name="P:Syncfusion.Data.RecordsList.TableSummaries">
            <summary>
            Gets the table summaries of SfDataGrid.
            </summary>
            <value>The table summaries of SfDataGrid.</value>
        </member>
        <member name="M:Syncfusion.Data.DataTableRecordsList.#ctor(System.Collections.IEnumerable,Syncfusion.Data.DataTableCollectionView)">
            <summary>
            Initializes a new instance of the DataTableRecordsList class.
            </summary>
            <param name="source">The IEnumerable source of the SfDataGrid.</param>
            <param name="view">The data table collection view.</param>
        </member>
        <member name="T:Syncfusion.Data.PagedCollectionRecordsList">
            <summary>
            Represents the class that maintains the records list when the paged collection is bind as the source to SfDataGrid.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionRecordsList.#ctor(System.Collections.IEnumerable,Syncfusion.Data.PagedCollectionView)">
            <summary>
            Initializes a instance of the PagedCollectionRecordsList class.
            </summary>
            <param name="source">The IEnumerable source of SfDataGrid.</param>
            <param name="view">The paged collection view.</param>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionRecordsList.PopulateRecords(System.Collections.IEnumerable,Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Populates the records in the given collection view from the given source.
            </summary>
            <param name="source">The source from which the records is to be populated.</param>
            <param name="view">The collection view in which the records has to be populated.</param>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionRecordsList.GetSource">
            <summary>
            Gets the list of source object for the collection view of the records. 
            </summary>
            <returns>The list of source object for the collection view of the records.</returns>
        </member>
        <member name="T:Syncfusion.Data.QueryableCollectionRecordsList">
            <summary>
            Represents the class that maintains the records list when the queryable collection is 
            bind as the source to SfDataGrid.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionRecordsList.#ctor(System.Collections.IEnumerable,Syncfusion.Data.QueryableCollectionView)">
            <summary>
            Initializes a new instance of the QueryableCollectionRecordsList class.
            </summary>
            <param name="source">The IEnumerable source.</param>
            <param name="view">The Queryable collection view.</param>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionRecordsList.PopulateRecords(System.Collections.IEnumerable,Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Populates the records in the given collection view from the given source.
            </summary>
            <param name="source">The source from which the records is to be populated.</param>
            <param name="view">The collection view in which the records has to be populated.</param>
        </member>
        <member name="T:Syncfusion.Data.Comparer">
            <summary>
            Represents the class that defines the comparer by implementing the IComparer.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Comparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the Comparer class.
            </summary>
            <param name="culture">The culture info of the comparer initialized.</param>
        </member>
        <member name="M:Syncfusion.Data.Comparer.Compare(System.Object,System.Object)">
            <summary>
            Compares the given two objects.
            </summary>
            <param name="obj1">The object 1.</param>
            <param name="obj2">The object 2.</param>
            <returns>The value indicating the comparison of the given two objects.</returns>
            <exception cref="T:System.ArgumentException">Object should implement IComparable</exception>
        </member>
        <member name="P:Syncfusion.Data.Comparer.Default">
            <summary>
            Gets the default comparer with the culture info as current culture.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.Comparer.DefaultInvariant">
            <summary>
            Gets the default invariant comparer with the culture info as invariant culture.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.SortFieldComparer">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.SortFieldComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares the given two objects.
            </summary>
            <param name="obj1">The object 1.</param>
            <param name="obj2">The object 2.</param>
            <returns>The value indicating the comparison of the given two objects.</returns>
        </member>
        <member name="T:Syncfusion.Data.SortFieldComparer.SortPropertyInfo">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.LiveDataUpdateMode">
            <summary>    
            Defines the constants that specifies how to update the data during data manipulation operation like add, remove and property change.
            </summary>      
        </member>
        <member name="F:Syncfusion.Data.LiveDataUpdateMode.Default">
            <summary>
            Specifies that data operations are not updated during data manipulation. 
            </summary>
        </member>
        <member name="F:Syncfusion.Data.LiveDataUpdateMode.AllowSummaryUpdate">
            <summary>
            Specifies that summaries are updated based on data manipulation changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.LiveDataUpdateMode.AllowDataShaping">
            <summary>
            Specifies that data operations sorting, grouping, filtering and summaries are updated based on data manipulation changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.LiveDataUpdateMode.AllowChildViewUpdate">
            <summary>
            Specifies that child view items source gets updated when property mapped with GridViewDefinition.RelationalColumn changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.CalculationMode">
            <summary>
            Defines the constants that specify the different modes of calculation for caption and group summary.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CalculationMode.Default">
            <summary>
            Specifies that summary (group and caption) is calculated, while grouping takes place.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CalculationMode.OnDemandCaptionSummary">
            <summary>
            Specifies that summary is calculated, when caption row comes into view and when you try to access the summary value.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CalculationMode.OnDemandGroupSummary">
            <summary>
            Specifies that summary is calculated, when group summary row comes into view and when you try to access the summary value.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.SummaryCalculationUnit">
            <summary>
            Defines the constants that specifies the mode for summary calculation.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.SummaryCalculationUnit.AllRows">
            <summary>
            Specifies that summary value is calculated against all rows.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.SummaryCalculationUnit.SelectedRows">
            <summary>
            Specifies that summary value is calculated against selected rows.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.SummaryCalculationUnit.Mixed">
            <summary>
            Specifies that summary value is calculated against selected rows, if selection exists. Otherwise, summary value is calculated against all rows.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.NewItemPlaceholderPosition">
            <summary>
            Specifies where the placeholder for a new item appears in the collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.NewItemPlaceholderPosition.None">
            <summary>
            Specifies that the collection does not use a new item placeholder. The position of items that are added 
            depends on the underlying collection. Usually, they are added at the end of the collection.
            </summary>           
        </member>
        <member name="F:Syncfusion.Data.NewItemPlaceholderPosition.AtBeginning">
            <summary>
            Specifies that the placeholder for a new item appears at the beginning of the collection. New items are at 
            the beginning of the collection, after the new item placeholder.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.NewItemPlaceholderPosition.AtEnd">
            <summary>
            Specifies that the placeholder for a new item appears at the end of the collection. New items are added at 
            the end of the collection, before the new item placeholder.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.SortComparers">
            <summary>
            Compares two SortComparer to perform sort operation based on custom logic.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SortComparers.#ctor">
            <summary>
            Initializes a new instance of SortComparers class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SortComparers.Item(System.String)">
            <summary>
            Gets the sort comparer for the specified property name.
            </summary>
            <param name="propertyName">
            The property name for which the sort comparer is to be obtained.
            </param>
            <returns>
            Returns the sort comparer for the given property name.
            </returns>
        </member>
        <member name="T:Syncfusion.Data.SortComparer">
            <summary>
            Represents the properties to sort the data based on custom logic.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SortComparer.#ctor">
            <summary>
            Initializes a new instance of SortComparer class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SortComparer.PropertyName">
            <summary>
            Gets or sets the property of the underlying collection view, for which sorting is to 
            be applied.
            </summary>
            <value>
            A string that specifies the property of the underlying collection view, for which sorting is to 
            be applied.
            </value>
        </member>
        <member name="P:Syncfusion.Data.SortComparer.Comparer">
            <summary>
            Gets or sets the comparer, that compares the two cell values and perform sorting based 
            on the custom logic.
            </summary>
            <value>
            The comparer that compares the two cell values and perform sorting based 
            on the custom logic.
            </value>
        </member>
        <member name="T:Syncfusion.Data.ISortDirection">
            <summary>
            The interface that defines the sort direction. The user can implement this  
            interface in custom sort comparer to get the sort direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.ISortDirection.SortDirection">
            <summary>
            Gets or sets the possible direction of a sort operation.
            </summary>
            <value>The possible direction of a sort operation.</value>
        </member>
        <member name="T:Syncfusion.Data.VirtualGroup">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.VirtualGroup.CreateDetailsForRecords(Syncfusion.Data.Group,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Create Details for record based on filter predicate
            </summary>
            <param name="parent"></param>
            <param name="source"></param>
            <param name="level"></param>
        </member>
        <member name="M:Syncfusion.Data.VirtualGroup.CreateRecord(Syncfusion.Data.Group,System.Object)">
            <summary>
            Creates the record.
            </summary>
            <param name="data">The data to create the RecordEntry.</param>
            <returns>Returns the RecordEntry for parent with specified data.</returns>
        </member>
        <member name="T:Syncfusion.Data.VirtualGroupRecordEntry">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.VirtualGroupRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32,System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Constructor to filter the InternalList of VirtualGroup.
            </summary>
            <param name="parent">Parent group</param>
            <param name="level">level of group</param>
            <param name="source">Grouped items</param>
            <param name="filterPredicate">Func to filter Internal list</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryList.IndexOfRecord(System.Object)">
            <summary>
            Returns the index of record.
            </summary>
            <param name="data"></param>
            <returns>Returns from SourceList when the data not a record entry.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryList.RemoveAt(System.Int32)">
            <summary>
            Override to remove the record from SourceList at specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryList.Remove(Syncfusion.Data.RecordEntry)">
            <summary>
            Override to remove the record from SourceList.
            </summary>
            <param name="item">The item to be removed from SourceList and intrenalList.</param>
            <returns>Returns true when the item is removed successfully. otherwise, returns false.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryList.Insert(System.Int32,Syncfusion.Data.RecordEntry)">
            <summary>
            Override to insert the record to SourceList.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="T:Syncfusion.Data.VirtualGroupRecordEntryEnumerator">
            <summary>
            Represent the class to process the enumerator for Records in Group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualGroupRecordEntryEnumerator.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.VirtualGroupRecordEntryEnumerator"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.VirtualGroupRecordEntryEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.VirtualGroupRecordEntryEnumerator"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.Data.VirtualizingTopLevelGroup">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.VirtualRecordsList">
            <summary>
            Represents the class that process the ICollectionView.Records of VirtualizingCollectionView.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.VirtualRecordsList.SourceList">
            <summary>
            Stores the business object source.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.OnInitialize">
            <summary>
            Initialize SourceList and internalList.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.PopulateRecords(System.Collections.IEnumerable,Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Populate source list.
            </summary>
            <param name="source">The source to populate the internalList or SourceList.</param>
            <param name="view">The View.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.PopulateRecordsFromGroup(System.Collections.Generic.List{Syncfusion.Data.Group})">
            <summary>
            Override to populate SourceList.
            </summary>
            <param name="groups">The groups to populate the internalList or SourceList.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetRecord(System.Int32)">
            <summary>
            Override to populate and return the RecordEntry by specified index.
            </summary>
            <param name="recordIndex">The recordIndex to get the RecordEntry.</param>
            <returns>Returns the RecordEntry at specified recordIndex.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetRecord(System.Object)">
            <summary>
            Override to populate and return the RecordEntry.
            </summary>
            <param name="data">The data to get the RecordEntry.</param>
            <returns>Returns the RecordEntry based on data.</returns>        
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.IndexOfRecord(System.Object)">
            <summary>
            Returns the index of record.
            </summary>
            <param name="data"></param>
            <returns>Returns from SourceList when the data not a record entry.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.RemoveAt(System.Int32)">
            <summary>
            Override to remove the record from SourceList at specified index.
            </summary>
            <param name="index">The index to remove the data and RecordEntry.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Remove(Syncfusion.Data.RecordEntry)">
            <summary>
            Override to remove the record from SourceList.
            </summary>
            <param name="item">The item to be removed from SourceList and internalList.</param>
            <returns>
            Returns true the item is removed. otherwise false.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Insert(System.Int32,Syncfusion.Data.RecordEntry)">
            <summary>
            Override to insert the record to SourceList.
            </summary>
            <param name="index">The index in internalList and SourceList is filled by the specified item.</param>
            <param name="item">The item to be inserted at the specified index.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Add(System.Object)">
            <summary>
            Override to add the data to SourceList.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Add(Syncfusion.Data.RecordEntry)">
            <summary>
            Override to add the item to SourceList and internalList.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetSource">
            <summary>
            Returns the list of data from RecordEntry collection.
            </summary>
            <remarks>
            Returns the list of data from SourceList<see cref="F:Syncfusion.Data.VirtualRecordsList.SourceList"/>.
            </remarks>  
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Clear">
            <summary>
            Clears the SourceList.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetRecordEntry(System.Int32,System.Object)">
            <summary>
            Method that populates internalList and return the RecordEntry with specified index.
            </summary>
            <param name="recordIndex">The recordIndex  to get the RecordEntry.</param>
            <returns>Returns the RecordEntry at specified recordIndex or based on data.</returns>                
        </member>
        <member name="T:Syncfusion.Data.VirtualRecordEntryEnumerator">
            <summary>
            Represents the class that process the enumerator of Records in view 
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryEnumerator.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.VirtualRecordEntryEnumerator"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.VirtualRecordEntryEnumerator"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.Data.Extensions.DataSetExtensions">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.Extensions.DataSetExtensions.NotStartsWith(System.String,System.Object)">
            <summary>
            Formats the filter string for <see cref="F:Syncfusion.Data.FilterType.NotStartsWith"/> option.
            </summary>
            <param name="columnName">The name of the column that is being filtered.</param>
            <param name="filterValue">The filter string.</param>
            <returns>Returns the formatted filter string for <see cref="F:Syncfusion.Data.FilterType.NotStartsWith"/> option.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.DataSetExtensions.NotEndsWith(System.String,System.Object)">
            <summary>
            Formats the filter string for <see cref="F:Syncfusion.Data.FilterType.NotEndsWith"/> option.
            </summary>
            <param name="columnName">The name of the column that is being filtered.</param>
            <param name="filterValue">The filter string.</param>
            <returns>Returns the formatted filter string for <see cref="F:Syncfusion.Data.FilterType.NotEndsWith"/> option.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.DataSetExtensions.NotContains(System.String,System.Object)">
            <summary>
            Formats the filter string for <see cref="F:Syncfusion.Data.FilterType.NotContains"/> option.
            </summary>
            <param name="columnName">The name of the column that is being filtered.</param>
            <param name="filterValue">The filter string.</param>
            <returns>Returns the formatted filter string for <see cref="F:Syncfusion.Data.FilterType.NotContains"/> option.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.DataSetExtensions.EscapeLikeValue(System.String)">
            <summary>
            Insert [ wildcard ] in LIKE Queries.
            http://msdn.microsoft.com/en-us/library/ms179859.aspx
            </summary>
        </member>
        <member name="T:Syncfusion.Data.Extensions.NamespaceDoc">
            <summary>
            Provides classes that simplify programming by providing ready-made solution to process
            the IEnumerable and IQueryable operations.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Dynamic.DynamicHelper">
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Dynamic.DynamicHelper.Dispose" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Dynamic.DynamicHelper.Dispose(System.Boolean)" -->
        <member name="T:Syncfusion.Dynamic.DynamicHelper.CallSiteMember">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.Extensions.EnumerableExtensions">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.Extensions.FunctionalExtensions">
            <summary>
            Functional method extensions
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Iterates over an IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates over a generic IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.IterateIndex``1(``0[],System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.IterateIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.True``1">
            <summary>
            Trues this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.False``1">
            <summary>
            Falses this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression1">The expr1.</param>
            <param name="expression2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression1">The expr1.</param>
            <param name="expression2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.Fold``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the specified list.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="action">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.FoldLeft``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the left.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="action">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.FoldRight``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the right.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="action">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.MoveTo(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Moves to.
            </summary>
            <param name="list">The list.</param>
            <param name="source">The SRC.</param>
            <param name="destination">The dest.</param>
        </member>
        <member name="T:Syncfusion.Data.FilterType">
            <summary>
            Specifies the filter type to be used in LINQ methods.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.LessThan">
            <summary>
            Performs <b>LessThan</b> operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.LessThanOrEqual">
            <summary>
            Performs <b>LessThan</b> or <b>Equal</b> operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.Equals">
            <summary>
            Checks <b>Equals</b> on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.NotEquals">
            <summary>
            Checks for <b>NotEquals</b> on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.GreaterThanOrEqual">
            <summary>
            Checks for <b>GreaterThan</b> or <b>Equal</b> on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.GreaterThan">
            <summary>
            Checks for <b>GreaterThan</b> on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.StartsWith">
            <summary>
            Checks for <b>StartsWith</b> on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.NotStartsWith">
            <summary>
            Checks the string operand which does not start with the given filter criteria.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.EndsWith">
            <summary>
            Checks for <b>EndsWith</b> on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.NotEndsWith">
            <summary>
            Checks the string operand which does not end with the given filter criteria.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.Contains">
            <summary>
            Checks for <b>Contains</b> on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.NotContains">
            <summary>
            Checks for <b>NotContains</b> on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.Undefined">
            <summary>
            Returns invalid type.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.Between">
            <summary>
            Checks for Between two date on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.FilterBehavior">
            <summary>
            Specifies the filter behavior for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterBehavior.StronglyTyped">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterBehavior.StringTyped">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.ColumnFilter">
            <summary>
            Specifies the constants for the column filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.ColumnFilter.Value">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.ColumnFilter.DisplayText">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.SortColumn">
            <summary>
            Representing the class that contains the columns that represents sorting, which contains 
            the column name that is sorted and sort direction.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SortColumn.#ctor">
            <summary>
            Initializes a new instance of the SortColumn class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SortColumn.ColumnName">
            <summary>
            Gets or sets the name of the column that represents sorting.
            </summary>
            <value>The name of the column that represents sorting.</value>
        </member>
        <member name="P:Syncfusion.Data.SortColumn.SortDirection">
            <summary>
            Gets or sets the direction of sorting applied.
            </summary>
            <value>The direction of sorting applied.</value>
        </member>
        <member name="T:Syncfusion.Data.ClassFactory">
            <summary>
            Class that creates the dynamic classes for the given properties and gets the dynamic class 
            for the given dynamic properties, generate properties for the given dynamic class, etc , this 
            class as the factory for the classes.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ClassFactory.GetDynamicClass(System.Collections.Generic.IEnumerable{Syncfusion.Data.DynamicProperty})">
            <summary>
            Gets the dynamic class for the given enumerable collection of dynamic properties.
            </summary>
            <param name="properties">The IEnumerable collection of the dynamic properties for which
             the dynamic class is to be obtained.</param>
            <returns>The type of the dynamic class obtained for the given properties.</returns>
        </member>
        <member name="P:Syncfusion.Data.ClassFactory.Instance">
            <summary>
            Gets the new instance of the ClassFactory class.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.DynamicClass">
            <summary>
            Defines the dynamic class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DynamicClass.ToString">
            <summary>
            Returns the string that contains the properties and their values in the class.
            </summary>
            <returns>The string that contains the properties and their values in the class.</returns>
        </member>
        <member name="T:Syncfusion.Data.DynamicProperty">
            <summary>
            Class that creates the dynamic property for the given name and type.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of DynamicProperty class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the property.</param>
        </member>
        <member name="P:Syncfusion.Data.DynamicProperty.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Syncfusion.Data.DynamicProperty.Type">
            <summary>
            Gets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="T:Syncfusion.Data.Signature">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Data.Signature.properties">
            <summary>
            Gets the array of dynamic properties of the signature.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Signature.#ctor(System.Collections.Generic.IEnumerable{Syncfusion.Data.DynamicProperty})">
            <summary>
            Initializes a new instance of the Signature class.
            </summary>
            <param name="properties">The enumerable collection of the dynamic property.</param>
        </member>
        <member name="M:Syncfusion.Data.Signature.Equals(Syncfusion.Data.Signature)">
            <summary>
            Checks the equality of the current instance and the given instance.
            </summary>
            <param name="other">The other object to compare with.</param>
            <returns>Returns a boolean value indicating the equality of the current object and the given object.</returns>
        </member>
        <member name="M:Syncfusion.Data.Signature.Equals(System.Object)">
            <summary>
            Checks the equality of the current instance and the given instance.
            </summary>
            <param name="obj">The other object to compare with.</param>
            <returns>Returns a boolean value indicating the equality of the current object and the given object.</returns>
        </member>
        <member name="M:Syncfusion.Data.Signature.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Syncfusion.Data.GroupContext">
            <summary>
            Class that contains the information of the group like child groups, items count, key, details of the group, etc.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupContext.#ctor">
            <summary>
            Initializes a new instance of the GroupContext class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.GroupContext.ChildGroups">
            <summary>
            Gets or sets the child groups of the group.
            </summary>
            <value>The child groups of the group.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupContext.Count">
            <summary>
            Gets or sets the count of the sub-groups in the group.
            </summary>
            <value>The count of the sub-groups in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupContext.Details">
            <summary>
            Gets or sets the details of the group.
            </summary>
            <value>The details of the group.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupContext.Key">
            <summary>
            Gets the key of the group.
            </summary>
            <value>The key of the group.</value>
        </member>
        <member name="T:Syncfusion.Data.Helper.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.IsComplexType(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="type">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.FixDBNullAsNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value">The object.</param>
            <param name="type">The type.</param>
            <returns>Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Data.Helper.NullableHelperInternal.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.Helper.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Data.Helper.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDBNullIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDBNullIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="valueAsString">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="valueAsString">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDBNullIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="valueAsString">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDBNullIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="numberFormatInfo">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="returnValue"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="valueAsString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Data.Helper.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Data.Helper.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.Helper.NamespaceDoc">
            <summary>
            Provides classes that simplify programming by providing ready-made solution to convert and check the type of value.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.Extensions.PropertyDescriptorExtensions">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.GetComplexPropertyValue(System.String[],System.ComponentModel.PropertyDescriptorCollection,System.Object)">
            <summary>
            Return the value of the given record and complex property column.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.SetValue(System.ComponentModel.PropertyDescriptorCollection,System.Object,System.Object,System.String)">
            <summary>
            Sets the value for the corresponding object available in the PropertyDescriptorCollection
            </summary>
            <param name="propertyDescriptorCollection">ItemProperties</param>
            <param name="record">Record</param>
            <param name="value">Value</param>
            <param name="columnName">Mapping name of the column(Including complex property mapping names)</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.SetComplexPropertyValue(System.String[],System.ComponentModel.PropertyDescriptorCollection,System.Object,System.Object)">
            <summary>
            Set the value to complex property column with the given record.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.GetPropertyDescriptor(System.ComponentModel.PropertyDescriptorCollection,System.String)">
            <summary>
            Generate the Property Descriptor for corresponding Property it may be simple or complex property
            </summary>
            <param name="propertyDescriptorCollection"></param>
            <param name="columnName"></param>
            <param name="columnType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.GetPropertyDescriptor(System.ComponentModel.PropertyDescriptor,System.Int32,System.String[],System.Int32,System.String)">
            <summary>
            Generate the Property Descriptor for corresponding Complexer/Indexer Property.
            </summary>
            <param name="colPropertyInfo">propertyDescriptor</param>
            <param name="complexPropertyCount">ComplexPropertyCount</param>
            <param name="propertyNameList">List of PropertyNames</param>
            <param name="iterator">index to process through propertyNameList</param>
            <param name="columnName">Name of columns</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.EscapeSpecialChars(System.String)">
            <summary>
            Method to skip Special characters from given string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.ContainsSpecialChars(System.String)">
            <summary>
            Method to check the given string contains special characters or not. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Data.Extensions.QueryableExtensions">
            <summary>
            Provides extension methods for the Queryable source. 
            <code lang="C#"><![CDATA[
            var fonts = FontFamily.Families.AsQueryable();
            ]]></code>
            We would normally write Expressions as,
            <code lang="C#"><![CDATA[
            var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);
            ]]></code>
            This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OfQueryable(System.Collections.IEnumerable)">
            <summary>
            Returns the queryable which iterates over the given collection of items.
            </summary>
            <param name="items">The enumerable collection of the items, which should be queried.</param>
            <returns>The queryable which iterates over the given collection of items.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OfQueryable(System.Collections.IEnumerable,System.Type)">
            <summary>
            Returns the queryable which iterates over the given collection of items.
            </summary>
            <param name="items">The enumerable collection of the items.</param>
            <param name="sourceType">The source type of the items.</param>
            <returns>The queryable which iterates over the given collection of items.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.AndPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an AND binary expression for the given expressions.
            </summary>
            <param name="expression1">The expression 1.</param>
            <param name="expression2">The expression 2.</param>
            <returns>An AND binary expression for the given expressions.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.AndAlsoPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an ANDAlso binary expression for the given expressions.
            </summary>
            <param name="expression1">The expression 1.</param>
            <param name="expression2">The expression 2.</param>
            <returns>An ANDAlso binary expression for the given expressions.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrElsePredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OrElse binary expression for the given expressions.
            </summary>
            <param name="expression1">The expression 1.</param>
            <param name="expression2">The expression 2.</param>
            <returns>An OrElse binary expression for the given expressions.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Count(System.Linq.IQueryable)">
            <summary>
            Gets the execution times count of the given queryable source.
            </summary>
            <param name="source">The source which is to be queried.</param>
            <returns>The count of the execution times of the given queryable source.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ElementAt(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Gets the element at the given index and the source.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="index">The index at which the element is to be obtained.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The element at the given index and the source.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ElementAt(System.Linq.IQueryable,System.Int32)">
            <summary>
            Gets the element at the given index and the source.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="index">The index at which the element is to be obtained.</param>
            <returns>The element at the given index and the source.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ElementAtOrDefault(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Gets the element at or default of the given index and the source.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="index">The index at which the element is to be obtained.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The element at or default of the given index and the type of source.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ElementAtOrDefault(System.Linq.IQueryable,System.Int32)">
            <summary>
            Gets the element at or default of the given index and the source.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="index">The index at which the element is to be obtained.</param>
            <returns>The element at the given index and the source.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Syncfusion.Data.SortColumn},System.Type)">
            <summary>
            Gets the GroupBy query expression for the given source and enumerable collection of the sort columns.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="groupByNames">The enumerable collection of the sort columns group by names.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The GroupBy query expression for the given source and enumerable collection of the sort columns.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Syncfusion.Data.SortColumn})">
            <summary>
            Gets the GroupBy query expression for the given source and enumerable collection of the sort columns.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="groupByNames">The enumerable collection of the sort columns group by names.</param>
            <returns>The GroupBy query expression for the given source and enumerable collection of the sort columns.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Type)">
            <summary>
            Gets the GroupBy query expression for the given source, group by name, source type and sort action.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="groupByName">The group by name which is the property name.</param>
            <param name="sourceType">The source type.</param>
            <param name="sortAction">The sort action.</param>
            <returns>The GroupBy query expression for the given source, group names and source type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String)">
            <summary>
            Gets the GroupBy query expression for the given source, group name and sort action.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="groupByName">The group by name which is the property name.</param>
            <param name="sortAction">The sort action.</param>
            <returns>The GroupBy query expression for the given source, group name and sort action.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OfType(System.Linq.IQueryable,System.Type)">
            <summary>
            Gets the queryable expression OfType for the given source and its type.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The queryable expression OfType for the given source and its type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OfType``2(System.Collections.ObjectModel.ObservableCollection{``1})">
            <summary>
            Gets the collection of the type parameter <typeparamref name="T"/> for the given collection of 
            type parameter <typeparamref name="K"/>.
            </summary>
            <typeparam name="T">The target type parameter.</typeparam>
            <typeparam name="K">The given type parameter.</typeparam>
            <param name="items">The collection of items.</param>
            <returns>The collection of the type parameter <typeparamref name="T"/> for the given collection of 
            type parameter <typeparamref name="K"/>.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderBy query for the queryable source, its type and the property name.
            </summary>
            <code lang="C#"><![CDATA[           
            DataClasses1DataContext db = new DataClasses1DataContext();
            var orders = db.Orders.Skip(0).Take(10).ToList();
            var queryable = orders.AsQueryable();
            var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
            ]]></code>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the OrderBy query is to be generated.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>A OrderBy query for the queryable source, its type and the property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetLambdaWithComplexPropertyNullCheck(System.Collections.IEnumerable,System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates lambda expression for the complex properties
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="parameterExpression"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String)">
            <summary>
            Generates a OrderBy query for the queryable source and the property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the OrderBy query is to be generated.</param>
            <returns>A OrderBy query for the queryable source and the property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a OrderBy query for the queryable source, property name and the expression func.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the OrderBy query is to be generated.</param>
            <param name="expressionFunc">The expression func based on which the query is to be generated.</param>
            <returns>A OrderBy query for the queryable source, property name and the expression func.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a OrderBy query for the queryable source, property name, expression func and the comparer.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the OrderBy query is to be generated.</param>
            <param name="expressionFunc">The expression func based on which the query is to be generated.</param>
            <param name="comparer">The comparer based on which the query is to be generated.</param>
            <returns>A OrderBy query for the queryable source, property name,  expression func and the comparer.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Generates a OrderBy query for the queryable source and the expressions.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression which are the objects to populate to the 
            parameter collection of the lambda expression.</param>
            <param name="expression">The expression to set the lambda expression body property equals to.</param>
            <returns>A OrderBy query for the queryable source and the expressions.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined, source and its type. 
            </summary>
            <code lang="C#"><![CDATA[  
            public class OrdersComparer : IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }
            ]]></code>
            <para/>
            <code lang="C#"><![CDATA[
            var sortedOrders = db.Orders.Skip(0).Take(5).ToList().OrderBy(o =&gt; o, new OrdersComparer());
            ]]></code>
            <typeparam name="T">The type parameter for which the queryable expression is to be obtained.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer defined for the queryable expression.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>An OrderBy query for the IComparer defined, source and its type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0})">
            <summary>
            Generates an OrderBy query for the IComparer defined and its source.
            </summary>
            <typeparam name="T">The type parameter for which the queryable expression is to be obtained.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer defined for the queryable expression.</param>
            <returns>An OrderBy query for the IComparer defined and its source.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Type)">
            <summary>
            Generates an OrderBy query for the given source, property and the comparer defined.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the OrderBy query is to be generated.</param>
            <param name="comparer">The comparer defined for the queryable expression.</param>
            <param name="sourceType">The source type.</param>
            <returns>An OrderBy query for the given source, property and the comparer defined.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderByDescending query of the given type parameter for the given source and comparer defined.
            </summary>
            <code lang="C#"><![CDATA[
            public class OrdersComparer : IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }
            ]]></code>
            <para/>
            <code lang="C#"><![CDATA[
            var sortedOrders = db.Orders.Skip(0).Take(5).ToList().OrderByDescending(o =&gt; o, new OrdersComparer());
            ]]></code>
            <typeparam name="T">The type parameter for which the queryable expression is to be obtained.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer defined for the queryable expression.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>An OrderByDescending query of the given type parameter for the given source and comparer defined.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Type)">
            <summary>
            Generates an OrderByDescending query for the given source, property and the comparer defined.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is to be generated.</param>
            <param name="comparer">The comparer defined for the queryable expression.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>An OrderByDescending query for the given source, property and the comparer defined.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0})">
            <summary>
            Generates an OrderByDescending query for the given source and the comparer defined.
            </summary>
            <typeparam name="T">The type parameter for which the queryable expression is to be obtained.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer defined for the queryable expression.</param>
            <returns>An OrderByDescending query for the given source and the comparer defined.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderByDescending query for the given source and the property.
            </summary>
            <code lang="C#"><![CDATA[         
            DataClasses1DataContext db = new DataClasses1DataContext();
            var orders = db.Orders.Skip(0).Take(10).ToList();
            var queryable = orders.AsQueryable();
            var sortedOrders = queryable.OrderByDescending(&quot;ShipCountry&quot;);
            ]]></code>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is to be generated.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>An OrderByDescending query for the given source and the property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetExpression(System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression for the given property and the parameter expression.
            </summary>
            <param name="parameterExpression">The parameter expression based on which the expression is 
            generated.</param>
            <param name="propertyName">The property name for which the expression is to be generated.</param>
            <returns>The expression for the given property and the parameter expression.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetValueExpression(System.Linq.Expressions.ParameterExpression,System.String,System.Type)">
            <summary>
            Generates the value expression for the given property, source type and the parameter expression.
            </summary>        
            <param name="propertyName">The property name for which the expression is to be generated.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="parameterExpression">The parameter expression based on which the expression is 
            generated.</param>
            <returns>The value expression for the given property, source type and the parameter expression.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String)">
            <summary>
            Generates the OrderByDescending query for the given source and the property.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is to be generated.</param>
            <returns>The OrderByDescending query for the given source and the property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates the OrderByDescending query for the given source, property, expression func and the comparer defined.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is to be generated.</param>
            <param name="comparer">The comparer defined for the query.</param>
            <param name="expressionFunc">The expression func based on which the query is to be generated.</param>
            <returns>The OrderByDescending query for the given source, property, expression func and the comparer defined.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates the OrderByDescending query for the given source, property and the expression func.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is to be generated.</param>
            <param name="expressionFunc">The expression func based on which the query is to be generated.</param>
            <returns>The OrderByDescending query for the given source, property and the expression func.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Generates the OrderByDescending query for the given source and expressions.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression which are the objects to populate to the 
            parameter collection of the lambda expression.</param>
            <param name="expression">The expression to set the lambda expression body property equals to.</param>
            <returns>The OrderByDescending query for the given source and expressions.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OR binary expression for the given expressions.
            <para></para>
            </summary>
            <param name="expression1">The expression 1.</param>
            <param name="expression2">The expression 2.</param>
            <returns>An OR binary expression for the given expressions.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Parameter(System.Linq.IQueryable)">
            <summary>
            Creates a ParameterExpression that is required when building a series of
            predicates for the WHERE filter.
            <para/>Use this same parameter passed to generate different predicates and
            finally to generate the Lambda.
            </summary>
            <code lang="C#"><![CDATA[       
            DataClasses1DataContext db = new DataClasses1DataContext();
            var orders = db.Orders.Skip(0).Take(100).ToList();
            var queryable = orders.AsQueryable();
            var parameter = queryable.Parameter();
            ]]></code>
            <remarks>
            If we specify a parameter for every predicate, then the Lambda expression scope
            will be out of the WHERE query that gets generated.
            </remarks>
            <param name="source">The IQueryable source.</param>     
            <returns>A ParameterExpression that is required when building a series of
            predicates for the WHERE filter.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Parameter(System.Type)">
            <summary>
            Generates the parameter expression for the given source type.
            </summary>
            <param name="sourceType">The source type.</param>
            <returns>The parameter expression for the given source type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Equal(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates the equal expression for the given parameter expression, property and value.
            </summary>
            <param name="parameterExpression">The parameter expression based on which the expression 
            is generated.</param>
            <param name="propertyName">The property name for which the expression is to be generated.</param>
            <param name="value">The object.</param>
            <returns>The equal expression for the given parameter expression, property and value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Equal(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates an equal binary expression for the given expression and the property name.
            </summary>
            <param name="parameterExpression">The parameter expression for generating the binary expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>An equal binary expression for the given expression and the property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Equal(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates an equal expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name for which the expression is generated.</param>
            <param name="value">The object.</param>
            <param name="elementType">The type of the element.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>An equal expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.NotEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a NotEqual expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name for which the expression is generated.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A NotEqual expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.NotEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a NotEqual binary expression for the given parameter expression, property and the value.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name for which the expression is to be generated.</param>
            <param name="value">The object.</param>
            <returns>A NotEqual binary expression for the given parameter expression, property and the value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.NotEqual(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates an NotEqual binary expression for the given expression and property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>An NotEqual binary expression for the given expression and property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GreaterThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a GreaterThanOrEqual binary expression for the given expression, property and the value.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <returns>A GreaterThanOrEqual binary expression for the given expression, property and the value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GreaterThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates a GreaterThanOrEqual binary expression for the given expressions and the property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>A GreaterThanOrEqual binary expression for the given expressions and the property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GreaterThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a GreaterThanOrEqual binary expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A GreaterThanOrEqual binary expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GreaterThan(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a GreaterThan binary expression for the given parameter expression, property and the value.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <returns>A GreaterThan binary expression for the given parameter expression, property and the value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GreaterThan(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates a GreaterThan binary expression for the given expression and the property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>A GreaterThan binary expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GreaterThan(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a GreaterThan expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A GreaterThan expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.LessThan(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a LessThan binary expression for the given expression, property and the values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <returns>A LessThan binary expression for the given expression, property and the values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.LessThan(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates a LessThan binary expression for the given expression and the property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>A LessThan binary expression for the given expression and the property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.LessThan(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a LessThan expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A LessThan expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.LessThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object)">
            <summary>
            Generates a LessThanOrEqual binary expression for the given expression, property and the value.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <returns>A LessThanOrEqual binary expression for the given expression, property and the value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.LessThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.String)">
            <summary>
            Generates a LessThanOrEqual binary expression for the given expression and property.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name 1.</param>
            <param name="propertyName2">The property name 2.</param>
            <returns>A LessThanOrEqual binary expression for the given expression and property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.LessThanOrEqual(System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a LessThanOrEqual expression for the given values.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="value">The object.</param>
            <param name="elementType">The element type.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A LessThanOrEqual expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Data.FilterType,Syncfusion.Data.FilterBehavior,System.Boolean,System.Type)">
            <summary>
            Generates a predicate expression for the given values.
            <para/>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression. 
            </summary>
            <code lang="C#"><![CDATA[
            var binaryExp = queryable.Predicate(parameter,&quot;EmployeeID&quot;, &quot;4&quot;, true);
            ]]></code>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="constValue">The object.</param>
            <param name="filterType">The filter type.</param>
            <param name="filterBehavior">The filter behavior.</param>
            <param name="isCaseSensitive">A boolean values indicating whether to consider the expression with case sensitive.</param>
            <param name="sourceType">The type of the source</param>
            <returns>A predicate expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Data.FilterType,Syncfusion.Data.FilterBehavior,System.Boolean,System.Type,System.Delegate,System.Type)">
            <summary>
            Generates a predicate expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="constValue">The object.</param>
            <param name="filterType">The filter type.</param>
            <param name="filterBehavior">The filter behavior.</param>
            <param name="isCaseSensitive">A boolean values indicating whether to consider the expression with case sensitive.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="expressionFunc">The expression func.</param>
            <param name="memberType">The member type.</param>
            <returns>A predicate expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,System.Type,Syncfusion.Data.FilterType,Syncfusion.Data.FilterBehavior,System.Boolean,System.Type,System.Delegate)">
            <summary>
            Generates a predicate expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="constValue">The object.</param>
            <param name="memberType">The member type.</param>
            <param name="filterType">The filter type.</param>
            <param name="filterBehavior">The filter behavior.</param>
            <param name="isCaseSensitive">A boolean values indicating whether to consider the expression with case sensitive.</param>
            <param name="sourceType">The type of the source</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A predicate binary expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Data.FilterType,Syncfusion.Data.FilterBehavior,System.Boolean,System.Type,System.String)">
            <summary>
            Generates a predicate expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="propertyName">The property name.</param>
            <param name="constValue">The object.</param>
            <param name="filterType">The filter type.</param>
            <param name="filterBehavior">The filter behavior.</param>
            <param name="isCaseSensitive">A boolean values indicating whether to consider the expression with case sensitive.</param>
            <param name="sourceType">The type of the source</param>
            <param name="format">The format.</param>
            <returns>A predicate expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query based on the given source and property.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is generated.</param>
            <param name="sourceType">The source type.</param>
            <returns>A Select query based on the given source and property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String)">
            <summary>
            Generates a Select query for the given source and property.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name for which the query is generated.</param>
            <returns>A Select query for the given source and property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String[])">
            <summary>
            Generates a Select query based on the given source and properties passed. 
            <para></para>
            <code lang="C#"><![CDATA[            
            DataClasses1DataContext db = new DataClasses1DataContext();
            var orders = db.Orders.Skip(0).Take(10).ToList();
            var queryable = orders.AsQueryable();
            var selector = queryable.Select(new string[]{&quot;OrderID&quot;, &quot;ShipCountry&quot;});
            ]]></code>
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="properties">The array of properties based on which the query is to be generated.</param>
            <returns>The select query based on the given source and properties passed.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            Generates a Select query based on the source and the properties passed. 
            <para/>
            It returns a dynamic class generated through ReflectionEmit, Use reflection
            to identify the properties and values.
            </summary>
            <code lang="C#"><![CDATA[            
            DataClasses1DataContext db = new DataClasses1DataContext();
            var orders = db.Orders.Skip(0).Take(10).ToList();
            var queryable = orders.AsQueryable();
            var selector = queryable.Select(new List&lt;string&gt;() { &quot;OrderID&quot;, &quot;ShipCountry&quot; });
            ]]></code>
            <param name="source">The IQueryable source.</param>
            <param name="properties">The enumerable collection of properties.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>A Select query based on the source and the properties passed.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a Select query based on the given source and the properties passed.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="properties">The enumerable collection of properties.</param>
            <returns>A Select query based on the given source and the properties passed.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a SKIP expression for the given IQueryable source.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="constValue">The constant value.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>A SKIP expression for the given IQueryable source.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Generates a SKIP expression for the given IQueryable source and the constant value.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="constValue">The constant value.</param>
            <returns>A SKIP expression for the given IQueryable source and the constant value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetDelegateInvokeExpressionAggregateFunc``1(System.Linq.Expressions.ParameterExpression,System.String,System.Delegate)">
            <summary>
            Use this method with a cached delegate, this improves performance when using complex Expressions.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="paramExp"></param>
            <param name="propertyName"></param>
            <param name="expressionFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Sum(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Calculates the result by executing the expression obtained from the queryable sum method based on the given source type and property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The result by executing the expression obtained from the queryable sum method based on the given source type and property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Sum(System.Linq.IQueryable,System.String)">
            <summary>
            Calculates the result by executing the expression obtained from the queryable sum method based on the given source and property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>The result by executing the expression obtained from the queryable sum method based on the given source and property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Sum(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Calculates the result by executing the expression obtained from the queryable sum method based on the given source, property and the expression func.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>The result by executing the expression obtained from the queryable sum method based on the given source, property and the expression func.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetQueryableSumMethod(System.Type)">
            <summary>
            Get the exact Sum method from Queryable based on body type.
            </summary>        
            <param name="bodyType"></param>
            <returns>exact method info</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetQueryableAverageMethod(System.Type)">
            <summary>
            Get the exact Average method from Queryable based on body type
            </summary>        
            <param name="bodyType"></param>
            <returns>exact method info</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Average(System.Linq.IQueryable,System.String)">
            <summary>
            Calculates the average by executing the expression obtained from the queryable average method based on the given source and the property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>The average by executing the expression obtained from the queryable average method based on the given source and the property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Average(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Calculates the average by executing the expression obtained from the queryable average method based on the given source and the property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The source type.</param>
            <returns>The average by executing the expression obtained from the queryable average method based on the given source and the property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Average(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Calculates the average by executing the expression obtained from the queryable average method based on the given source, property name and the expression func.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>The average by executing the expression obtained from the queryable average method based on the given source, property name and the expression func.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Max(System.Linq.IQueryable,System.String)">
            <summary>
            Calculates the max object by executing the expression obtained from the queryable max method based on the given source and the property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>The max object by executing the expression obtained from the queryable max method based on the given source and the property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Max(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Calculates the max object by executing the expression obtained from the queryable max method based on the given source and the property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The source type.</param>
            <returns>The max object by executing the expression obtained from the queryable max method based on the given source and the property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Max(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Calculates the max object by executing the expression obtained from the queryable max method based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>The max object by executing the expression obtained from the queryable max method based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Min(System.Linq.IQueryable,System.String)">
            <summary>
            Calculates the min object by executing the expression obtained from the queryable min method based on the given source and the property.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>The min object by executing the expression obtained from the queryable min method based on the given source and the property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Min(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Calculates the min object by executing the expression obtained from the queryable min method based on the given source and the property.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The source type.</param>
            <returns>The min object by executing the expression obtained from the queryable min method based on the given source and the property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Min(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Calculates the min object by executing the expression obtained from the queryable min method based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>The min object by executing the expression obtained from the queryable min method based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a TAKE expression in the IQueryable source for the given source and constant value.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="constValue">The constant value.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>A TAKE expression in the IQueryable source for the given source and constant value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Generates a TAKE expression for the given IQueryable source and the constant value.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="constValue">The constant value.</param>
            <returns>A TAKE expression for the given IQueryable source and the constant value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenBy query expression for the given queryable source, its property name and the type of source.
            </summary>
            <code lang="C#"><![CDATA[          
            DataClasses1DataContext db = new DataClasses1DataContext();
            var orders = db.Orders.Skip(0).Take(10).ToList();
            var queryable = orders.AsQueryable();
            var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
            sortedOrders = sortedOrders.ThenBy(&quot;ShipCity&quot;);
            ]]></code>
            <param name="source">The source.</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The source type.</param>
            <returns>A ThenBy query expression for the queryable source, its property name and the type of source.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String)">
            <summary>
            Generates a ThenBy query expression for the given queryable source and property name.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <returns>A ThenBy query expression for the queryable source and property name.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a ThenBy query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">The comparer.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A ThenBy query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a ThenBy query expression for the given source, property and the expression func.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A ThenBy query expression for the given source, property and the expression func.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Generates a ThenBy query expression for the given source and the expressions.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="expression">The expression.</param>
            <returns>A ThenBy query expression for the given source and the expressions.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenBy query expression of the given type parameter for the given comparer and the source.
            </summary>
            <code lang="C#"><![CDATA[   
            public class OrdersComparer :IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }
            ]]></code>
            <code lang="C#"><![CDATA[
            var sortedOrders =db.Orders.Skip(0).Take(5).ToList().ThenBy(o =&gt; o, new OrdersComparer());
            ]]></code>
            <typeparam name="T">The type parameter for which the query is to be generated.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer defined.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>An ThenBy query expression of the given type parameter for the given comparer and the source.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Type)">
            <summary>
            Generates an ThenBy query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name. </param>
            <param name="comparer">The comparer.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>An ThenBy query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0})">
            <summary>
            Generates an ThenBy query expression for the given source and the comparer for the given type.
            </summary>
            <typeparam name="T">The type parameter.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer.</param>
            <returns>An ThenBy query expression for the given source and the comparer for the given type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates a ThenByDescending query of the given type parameter for the given source and the comparer defined.
            </summary>
            <code lang="C#"><![CDATA[
            public class OrdersComparer : IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }
            ]]></code>
            <code lang="C#"><![CDATA[
            var sortedOrders = db.Orders.Skip(0).Take(5).ToList().ThenByDescending(o =&gt; o, new OrdersComparer());
            ]]></code>
            <typeparam name="T">The type parameter.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer.</param>
            <param name="sourceType">The source type.</param>
            <returns>A ThenByDescending query of the given type parameter for the given source and the comparer defined.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Type)">
            <summary>
            Generates an ThenByDescending query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name. </param>
            <param name="comparer">The comparer.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>An ThenByDescending query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0})">
            <summary>
            Generates an ThenByDescending query expression for the given source and the comparer for the given type.
            </summary>
            <typeparam name="T">The type parameter.</typeparam>
            <param name="source">The IQueryable source.</param>
            <param name="comparer">The comparer.</param>
            <returns>An ThenByDescending query expression for the given source and the comparer for the given type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Collections.Generic.IComparer{System.Object},System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a ThenByDescending query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">The comparer.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A ThenByDescending query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object,System.Object}})">
            <summary>
            Generates a ThenByDescending query expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The property name.</param>
            <param name="expressionFunc">The expression func.</param>
            <returns>A ThenByDescending query expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Generates a ThenByDescending query expression for the given source and the expressions.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="expression">The expression.</param>
            <returns>A ThenByDescending query expression for the given source and the expressions.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenByDescending query for the given values. 
            </summary>
            <code lang="C#"><![CDATA[        
            DataClasses1DataContext db = new DataClasses1DataContext();
            var orders = db.Orders.Skip(0).Take(10).ToList();
            var queryable = orders.AsQueryable();
            var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
            sortedOrders = sortedOrders.ThenByDescending(&quot;ShipCity&quot;);
            ]]></code>
            <param name="source">The IQueryable source</param>
            <param name="propertyName">The property name.</param>
            <param name="sourceType">The source type.</param>
            <returns>A ThenByDescending query for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String)">
            <summary>
            Generates a ThenByDescending query for the given source and the property.
            </summary>
            <param name="source">The IQueryable source</param>
            <param name="propertyName">The property name.</param>
            <returns>A ThenByDescending query for the given source and the property.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.Data.FilterType,System.Boolean,System.Type)">
            <summary>
            Generates the where expression for the given values.
            </summary>
            <para></para>
            <code lang="C#"><![CDATA[            
            var nw = new Northwind(@&quot;Data Source = Northwind.sdf&quot;);
            IQueryable queryable = nw.Orders.AsQueryable();
            var filters = queryable.Where(&quot;ShipCountry&quot;,&quot;z&quot;, FilterType.Contains);
            foreach (Orders item in filters)
            {
            Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID,
            item.ShipCountry);
            }
            ]]></code>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The object.</param>
            <param name="filterType">The filter type.</param>
            <param name="isCaseSensitive">A boolean value indicating whether the expression should be considered as case sensitive or not.</param>
            <param name="sourceType">The type of the source.</param>
            <returns>The where expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.Data.FilterType,System.Boolean)">
            <summary>
            Generates the where expression for the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The object.</param>
            <param name="filterType">The filter type.</param>
            <param name="isCaseSensitive">A boolean value indicating whether the expression should be considered as case sensitive or not.</param>
            <returns>The where expression for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Page(System.Linq.IQueryable,System.Int32,System.Int32)">
            <summary>
            Generates the page expression for the given source, page index and page size.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="pageIndex">The index of the page.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>The page expression for the given source, page index and page size.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Generates the Where query expression based on the given values.
            <para/>
            Use this function to generate WHERE expression based on Predicates. The
            AndPredicate and OrPredicate should be used in combination to build the
            predicate expression which is finally passed on to this function for creating a
            Lambda. 
            </summary>
            <code lang="C#"><![CDATA[
            DataClasses1DataContext db = new DataClasses1DataContext();
            var orders = db.Orders.Skip(0).Take(100).ToList();
            var queryable = orders.AsQueryable();
            var parameter = queryable.Parameter(&quot;ShipCountry&quot;);
            var binaryExp = queryable.Predicate(parameter, &quot;ShipCountry&quot;, &quot;USA&quot;, true);
            var filteredOrders = queryable.Where(parameter, binaryExp);
            foreach (var order in filteredOrders)
            {
                Console.WriteLine(order);
            }
            //Build Predicates for Contains / StartsWith / EndsWith,
            IQueryable queryable = nw.Orders.AsQueryable();
            var parameter = queryable.Parameter();
            var exp1 = queryable.Predicate(parameter, &quot;ShipCountry&quot;, &quot;h&quot;, FilterType.Contains);
            var exp2 = queryable.Predicate(parameter, &quot;ShipCountry&quot;, &quot;a&quot;, FilterType.StartsWith);
            var andExp = exp2.OrPredicate(exp1);
            var filters = queryable.Where(parameter, andExp);
            foreach (Orders item in filters)
            {
                Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID, item.ShipCountry);
            }
            ]]></code>
            <param name="source">The IQueryable source.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="predicateExpression">The predicate expression.</param>
            <returns>The Where query expression based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Data.SortDescription},System.Collections.Generic.IEnumerable{System.Func{``0,System.Object}})">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type of the elements.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="groupSelectors">The enumerable collection of the func for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Data.SortDescription},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IComparer{System.Object}},System.String[],System.Collections.Generic.IEnumerable{System.Func{``0,System.Object}})">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type of the elements.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="sortComparers">The sort comparers collection.</param>
            <param name="properties">The array of properties.</param>
            <param name="groupSelectors">The enumerable collection of the func for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Data.SortDescription},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IComparer{System.Object}},System.Collections.Generic.List{System.String},System.Func{``0,System.Object}[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type parameter.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="sortComparers">The sort comparers collection.</param>
            <param name="properties">The array of properties.</param>
            <param name="groupSelectors">The func for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Data.SortDescription},System.Func{``0,System.Object}[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type of the elements.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="groupSelectors">The func for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type of the elements.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="groupSelectors">The func for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Func{``0,System.Object}})">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <typeparam name="TElement">The type parameter.</typeparam>
            <param name="elements">The enumerable collection of the elements.</param>
            <param name="groupSelectors">The enumerable collection of func for the group selectors.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates the GroupResult enumerable collection based on the given source and the properties passed.
            </summary>
            <param name="source">The IQueryable source</param>
            <param name="properties">The enumerable collection of properties.</param>
            <returns>The GroupResult enumerable collection based on the given source and the properties passed.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Type,System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given source and the properties.
            </summary>
            <param name="source">The IQueryable source</param>
            <param name="sourceType">The type of the source.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given source and the properties.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Collections.Generic.Dictionary{System.String,System.String},System.Type,System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="formatCollection">The dictionary of format collection.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Type,System.Collections.Generic.List{Syncfusion.Data.SortDescription},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Collections.IEnumerable,System.Type,System.Func{System.String,System.Linq.Expressions.Expression},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="getExpressionFunc">The expression func.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Data.DataView,System.Type,System.Func{System.String,System.Linq.Expressions.Expression},System.String[])">
            <summary>
            Generates the groups for the DataTable.
            </summary>
            <param name="source">The DataView source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="getExpressionFunc">The expression func.</param>
            <param name="properties">The array of properties.</param>
            <returns>The groups for the DataTable.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Collections.IEnumerable,System.Type,System.Collections.Generic.List{Syncfusion.Data.SortDescription},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IComparer{System.Object}},System.Func{System.String,System.Linq.Expressions.Expression},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IEnumerable source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="sortComparers">The dictionary of sort comparers.</param>
            <param name="GetExpressionFunc">The expression func.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Collections.IEnumerable,System.Type,System.Collections.Generic.List{Syncfusion.Data.SortDescription},System.Func{System.String,System.Linq.Expressions.Expression},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IEnumerable source.</param>
            <param name="sourceType">The type of the source.</param>
            <param name="sortFields">The list of sort descriptions.</param>
            <param name="GetExpressionFunc">The expression func.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection based on the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.String[])">
            <summary>
            Generates the GroupResult enumerable collection for the given source and the properties passed.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection for the given source and the properties passed.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Linq.IQueryable,System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
            <summary>
            Generates the GroupResult enumerable collection based on the given values.
            </summary>
            <param name="source">The IQueryable source.</param>
            <param name="formatCollection">The dictionary of format collection.</param>
            <param name="properties">The array of properties.</param>
            <returns>The GroupResult enumerable collection for the given values.</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetObjectType(System.Linq.IQueryable)">
            <summary>
            Gets the type of the given source.
            </summary>
            <param name="source">The source, whose type is to be obtained.</param>
            <returns>The type of the given object.</returns>
        </member>
        <member name="T:Syncfusion.Data.Extensions.GroupResult">
            <summary>
            Class that holds the information of the group like key, count, items and etc.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Extensions.GroupResult.ToString">
            <summary>
            Returns the result of the group, which contains the key and the items count in the group.
            </summary>
            <returns>The result of the group, which contains the key and the items count in the group.</returns>
        </member>
        <member name="P:Syncfusion.Data.Extensions.GroupResult.Key">
            <summary>
            Gets or sets the key of the group.
            </summary>
            <value>The key of the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Extensions.GroupResult.Count">
            <summary>
            Gets or sets the total number of items in the group.
            </summary>
            <value>The total number of items in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Extensions.GroupResult.Items">
            <summary>
            Gets or sets the enumerable collection of items in the group.
            </summary>
            <value>The enumerable collection of items in the group.</value>
        </member>
        <member name="P:Syncfusion.Data.Extensions.GroupResult.SubGroups">
            <summary>
            Gets or sets the enumerable collection of the sub-groups in the group, if the group 
            contains any sub-groups.
            </summary>
            <value>The enumerable collection of the sub-groups in the group.</value>
        </member>
        <member name="T:Syncfusion.Data.Extensions.SortDescriptionIndex">
            <summary>
            Class that defines the sort description index and the sort description.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.Extensions.SortDescriptionIndex.Index">
            <summary>
            Gets or sets the index of the sort description.
            </summary>
            <value>The index of the sort description.</value>
        </member>
        <member name="P:Syncfusion.Data.Extensions.SortDescriptionIndex.SortDescription">
            <summary>
            Gets or sets the sort descriptions, which contains the information of the column 
            that represents sorting.
            </summary>
            <value>The sort descriptions, which contains the information of the column 
            that represents sorting.</value>
        </member>
        <member name="T:Syncfusion.Data.Extensions.ReflectionExtensions">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.Extensions.StringExtensions">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.SortDescriptionCollection">
            <summary>
            Represents a collection of sorting column description that raises notification for both collection and item changes.
            </summary>
            <remarks>
            You can add many <see cref="!:Syncfusion.UI.Xaml.Grid.SortColumnDescription"/> instance to perform sorting.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.SortDescriptionCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="!:Syncfusion.UI.Xaml.Grid.SortColumnDescriptions"/>  class.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.SortDescription">
            <summary>
            Describes a sorting criterion.
            </summary>
        </member>
    </members>
</doc>
